{"version":3,"sources":["ovpApp/components/player/toggle-play.js"],"names":[],"mappings":"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","file":"ovpApp/components/player/toggle-play.js","sourcesContent":["(() => {\n    'use strict';\n\n    angular\n        .module('ovpApp.playerControls')\n        .component('togglePlay', {\n            templateUrl: '/js/ovpApp/components/player/toggle-play.html',\n            bindings: {\n                options: '<',\n                player: '<',\n                enlargeIcon: '='\n            },\n            controller: class TooglePlayController {\n                /* @ngInject */\n                constructor($rootScope, version, globalKeydown, keyMap, playerService) {\n                    angular.extend(this, {\n                        $rootScope,\n                        version,\n                        globalKeydown,\n                        keyMap,\n                        playerService\n                    });\n                }\n\n                $onInit() {\n                    this.statusText = '';\n                    this.playing = this.player.isPlaying();\n                    this.playerSubscriptions = {\n                        'playback-started': () => this.onPlaybackStarted(),\n                        'playback-stopped': () => this.onPlaybackStopped(),\n                        'error': () => this.onPlayerError()\n                    };\n                    this.registerPlayerEvents();\n                    this.togglePlaybackListener = this.$rootScope.$on('toggle-playback',\n                        () => this.toggle());\n                    this.resumePlaybackListener = this.$rootScope.$on('playback-resumed',\n                        () => this.onPlaybackResumed());\n\n                    this.keydownHandler = this.globalKeydown.observable\n                        // Ignore key events if not playing video\n                        .filter(event => this.playerService.isValidPlayRoute() && this.keyMap[event.keyCode] === 'k' &&\n                            !(event.ctrlKey || event.shiftKey || event.altKey || event.metaKey))\n                        .subscribe(() => this.toggle());\n                }\n\n                registerPlayerEvents() {\n                    for (let key in this.playerSubscriptions) {\n                        if (this.playerSubscriptions.hasOwnProperty(key)) {\n                            this.player.on(key, this.playerSubscriptions[key]);\n                        }\n                    }\n                }\n\n                $onDestroy() {\n                    this.togglePlaybackListener();\n                    this.resumePlaybackListener();\n                    for (let key in this.playerSubscriptions) {\n                        if (this.playerSubscriptions.hasOwnProperty(key)) {\n                            this.player.off(key, this.playerSubscriptions[key]);\n                        }\n                    }\n                    this.keydownHandler.dispose();\n                }\n\n                onPlaybackStarted() {\n                    this.playing = true;\n                }\n\n                onPlaybackResumed() {\n                    if (!this.playing) {\n                        this.playing = true;\n                    }\n                }\n\n                onPlaybackStopped() {\n                    this.playing = false;\n                }\n\n                onPlayerError() {\n                    this.playing = false;\n                }\n\n                toggle() {\n                    var playbackTime, duration;\n                    if (this.options) {\n                        playbackTime = this.options.playbackTime;\n                        duration = this.options.duration;\n                    }\n\n                    if (playbackTime) {\n                        this.statusText = (this.playing ? 'paused' : 'playing') + ' at ' +\n                            Math.floor(playbackTime / 60) + ' minutes, ' + Math.floor(playbackTime % 60) + ' seconds';\n                    }\n\n                    if (this.player.isPaused()) {\n                        this.player.play();\n                        this.playing = true;\n                    } else {\n                        this.player.pause();\n                        this.playing = false;\n                        let event = {\n                            PlaybackTimestamp: playbackTime * 1000,\n                            Runtime: duration * 1000\n                        };\n\n                        if (angular.isFunction(this.options.setBookmarkCallback)) {\n                            this.options.setBookmarkCallback(event, 'pause button');\n                        }\n                    }\n                    // Trigger to send the EG event.\n                    this.player.trigger('playback-pause-toggled', !this.playing);\n                }\n\n                image() {\n                    let fileName = (this.playing ? 'pause' : 'play') +\n                        (this.enlargeIcon ? '-enlarge' : '') +\n                        (this.playHover ? '-active.svg' : '.svg');\n                    return `/${this.version.appVersion}/images/${fileName}`;\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}