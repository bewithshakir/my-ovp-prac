{"version":3,"sources":["ovpApp/analytics/analytics-assetHelper.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/analytics-assetHelper.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.analyticsAssetHelper', [])\n    .factory('analyticsAssetHelper', AnalyticsAssetHelper);\n\n    /* @ngInject */\n    function AnalyticsAssetHelper($log) {\n\n        function populateChannelData(target, channel) {\n            // Do nothing if no channel to work with.\n            if (!channel) {\n                return target;\n            }\n\n            target.contentFormat = channel.hd ? 'HD' : 'SD';\n            target.favorite = channel.favorite;\n            target.callSign = channel.callSign;\n            target.tmsGuideId = channel.tmsId;\n\n            // parentallyBlocked by channel is deprecated. Do not use.\n            // target.parentallyBlocked = channel.isParentallyBlocked;\n            return target;\n        }\n\n        function populateAssetData(target, asset) {\n            // Do nothing if no asset to work with.\n            if (!asset) {\n                return target;\n            }\n\n            target.parentallyBlocked = isParentallyBlocked(asset);\n            target.rating = asset.rating || null;\n            target.tmsProgramId = getTmsProgramId(asset);\n            target.tmsSeriesId = getTmsSeriesId(asset);\n            if (asset.scheduledStartTimeSec) {\n                target.startTimestamp = asset.scheduledStartTimeSec;\n            }\n            if (asset.scheduledEndTimeSec) {\n                target.endTimestamp = asset.scheduledEndTimeSec;\n            }\n            if (target.entitled || asset.isEntitled) {\n                target.entitled = target.entitled || asset.isEntitled;\n            }\n\n            // Default contentClass to what was already set, otherwise use what\n            // the asset provides.\n            if (asset.contentClass && !target.contentClass) {\n                target.contentClass = asset.contentClass.toLowerCase();\n            }\n\n            if (asset.network) {\n                target.callSign = asset.network.callsign;\n            }\n\n            return target;\n        }\n\n        function isTvodAsset(asset) {\n            return asset &&\n                asset.isTvodEntitled &&\n                asset.tvodStream &&\n                asset.tvodStream.streamProperties &&\n                asset.tvodStream.streamProperties.tvodEntitlement;\n        }\n\n        function populateTvodData(target, asset) {\n\n            // Do nothing if no asset to work with.\n            if (!isTvodAsset(asset)) {\n                return target;\n            }\n\n            target.operationType = 'playbackPlaySelected';\n            target.purchaseType = 'rent';\n\n            let tvodStreamProperties = asset.tvodStream.streamProperties;\n\n            // Collect rental expiration date in milliseconds.\n            target.rentalExpirationDate = tvodStreamProperties.tvodEntitlement.rentalEndTimeUtcSeconds ?\n                tvodStreamProperties.tvodEntitlement.rentalEndTimeUtcSeconds * 1000 :\n                undefined;\n\n            target.rentalDurationHours = tvodStreamProperties.rentalWindowInHours;\n\n            if (tvodStreamProperties.price) {\n                target.price = '' + tvodStreamProperties.price;\n            }\n        }\n\n        function populateStreamData(target, stream) {\n\n            // Do nothing if no stream to work with.\n            if (!stream) {\n                return target;\n            }\n\n            // Validate we have a usable streaming format.\n            target.streamingFormat = stream.type ? stream.type.toLowerCase() : 'hls';\n            if (['hls', 'smooth', 'dash'].indexOf(target.streamingFormat) < 0) {\n                // Streaming format not recognized, so revert to default.\n                target.streamingFormat = 'hls';\n            }\n\n            let streamProps = stream.streamProperties;\n            if (streamProps) {\n                if (streamProps.attributes) {\n                    target.contentFormat = streamProps.attributes.indexOf('HIGH_DEF') > -1 ? 'HD' : 'SD';\n                    target.closedCaptioningCapable = streamProps.attributes.indexOf('CLOSED_CAPTIONING') > -1;\n                }\n\n                // Overrides network callsign from asset.\n                if (stream.network && stream.network.callsign) {\n                    target.callSign = stream.network.callsign;\n                }\n\n                // Bookmark data if on-demand\n                if (isOnDemandContentClass(target.contentClass)) {\n                    target.bookmarkPositionSec = 0;\n                    if (streamProps.bookmark && streamProps.bookmark.playMarkerSeconds) {\n                        target.bookmarkPositionSec = streamProps.bookmark.playMarkerSeconds || 0;\n                    }\n                }\n\n                // CDVR attributes\n                if (streamProps.cdvrRecording) {\n                    target.dvrRecordingId = streamProps.cdvrRecording.recordingId;\n                    target.contentUri = streamProps.cdvrRecording.playUrl;\n                    target.tmsGuideId = streamProps.cdvrRecording.tmsGuideId;\n\n                    // These times are expected to be in milliseconds.\n                    target.recordingStartTimestamp = streamProps.cdvrRecording.startTimeSec;\n                    target.recordingStopTimestamp = streamProps.cdvrRecording.stopTimeSec;\n                }\n\n                // We may have a guide ID on the stream.\n                if (streamProps.tmsGuideId) {\n                    target.tmsGuideId = streamProps.tmsGuideId.toString();\n                } else if (streamProps.tmsGuideServiceId) {\n                    target.tmsGuideId = streamProps.tmsGuideServiceId.toString();\n                }\n\n                if (streamProps.providerAssetID) {\n                    target.providerAssetId = streamProps.providerAssetID;\n                }\n\n                // Capture tmsProgramId from the stream, because it may vary\n                // if the asset has multiple tmsProgramIds.\n                target.tmsProgramId = getTmsProgramId(stream);\n            }\n\n            return target;\n        }\n\n        /**\n         * Returns true if the given contentClass indicates an on-demand asset.\n         *\n         * @param contentClass contentClass of asset to examine.\n         * @return True if this is an on-demand type of asset, otherwise false.\n         */\n        function isOnDemandContentClass(contentClass) {\n            let result = (contentClass && contentClass.endsWith('od') || false);\n            return result;\n        }\n\n        function populateEventData(target, evt) {\n            // Do nothing if no event to work with.\n            if (!evt) {\n                return target;\n            }\n\n            if (evt.runtimeInSeconds && Number.isInteger(evt.runtimeInSeconds)) {\n                target.runtime = evt.runtimeInSeconds * 1000;\n            }\n            target.operationType = target.operationType || evt.operationType;\n\n            // Override the 'triggeredBy' field if the incoming event specifies it.\n            target.triggeredBy = (angular.isDefined(evt.triggeredBy) ? evt.triggeredBy : 'user');\n\n            return target;\n        }\n\n        /**\n         * Find and return the tmsProgramId in this asset or stream, if defined.\n         *\n         * @param assetOrStream The asset or stream object to examine.\n         *\n         * @return The tmsProgramId as a string, or undefined.\n         */\n        function getTmsProgramId(assetOrStream) {\n\n            // If no assetOrStream, nothing to return.\n            if (!assetOrStream) {\n                return undefined;\n            }\n\n            // Case 1: Simple value on asset.\n            if (assetOrStream.tmsProgramId) {\n                return '' + assetOrStream.tmsProgramId;\n            }\n\n            // Case 2: Look for tmsProviderProgramId in streamProperties\n            // (This is only if the incoming arg is a populated stream)\n            if (assetOrStream.streamProperties &&\n                assetOrStream.streamProperties.tmsProviderProgramID) {\n                return '' + assetOrStream.streamProperties.tmsProviderProgramID;\n            }\n\n            // Case 3: Get first value from array of tmsProgramIds, if it exists.\n            return getFirstArrayValueAsString(assetOrStream.tmsProgramIds, undefined);\n        }\n\n        /**\n         * Convert the given object to an array.\n         * @param obj An object that may already be an array, or an object with\n         *            integer indices to values. Values are assumed to already be\n         *            strings. Indices are assumed to start at zero and have no\n         *            gaps.\n         * @return An array containing the values in obj.\n         */\n        function objToArray(obj) {\n\n            // Short circuit: Already given an array.\n            if (Array.isArray(obj)) {\n                return obj;\n            }\n\n            // Main logic: convert indexed object to an array. Assume indices are\n            // sequential integers.\n            let result = [];\n            let idx = 0;\n            while (obj && obj[idx]) {\n                result.push('' + obj[idx]);\n                ++idx;\n            }\n\n            return result;\n        }\n\n        /**\n         * Find and return the tmsSeriesId in this asset, if defined.\n         *\n         * @param asset to examine\n         *\n         * @return The tmsSeriesId as a string, or undefined.\n         */\n        function getTmsSeriesId(asset) {\n\n            // If no asset, nothing to return.\n            if (!asset) {\n                return undefined;\n            }\n\n            // Case 1: Simple value on asset.\n            if (asset.tmsSeriesId) {\n                return '' + asset.tmsSeriesId;\n            }\n\n            // Case 2: If this is a 'show' from the Guide page, value might\n            // be in the 'stateOptions' subobject.\n            if (asset.stateOptions && asset.stateOptions.tmsSeriesId) {\n                return asset.stateOptions.tmsSeriesId;\n            }\n\n            // Case 3: Get first value from array of tmsSeriesIds, if it exists.\n            return getFirstArrayValueAsString(asset.tmsSeriesIds, undefined);\n        }\n\n        /**\n         * Find and return the tmsSeriesId in this asset, if defined.\n         *\n         * @param asset to examine\n         *\n         * @return The tmsSeriesId as a string, or undefined.\n         */\n        function getEpisodeTitle(asset) {\n\n            // If no asset, nothing to return.\n            if (!asset) {\n                return undefined;\n            }\n\n            // Case 1: A series has a series title and a title.\n            if (asset.title && asset.seriesTitle) {\n                return '' + asset.title;\n            }\n\n            // Fallthrough is undefined.\n            return undefined;\n        }\n\n        /**\n        * Find and return the assetProviderId in this asset, if defined.\n         *\n         * @param asset to examine\n         *\n         * @return The assetProviderId as a string, or undefined.\n         */\n        function getProviderAssetId(asset) {\n\n            // If no asset, nothing to return.\n            if (!asset) {\n                return undefined;\n            }\n\n            // Case 1: Simple value on asset.\n            if (asset.providerAssetId) {\n                return '' + asset.providerAssetId;\n            }\n\n            // Case 2: Get first value from array of tmsProgramIds, if it exists.\n            return getFirstArrayValueAsString(asset.providerAssetIds, undefined);\n        }\n\n        /**\n         * Find and return the tmsGuideId in this asset, if defined.\n         *\n         * @param asset to examine\n         *\n         * @return The assetProviderId as a string, or undefined.\n         */\n        function getTmsGuideId(asset) {\n\n            // If no asset, nothing to return.\n            if (!asset) {\n                return undefined;\n            }\n\n            // Case 1: Simple value on asset.\n            if (asset.tmsGuideId) {\n                return '' + asset.tmsGuideId;\n            }\n\n            // Fallthrough: undefined.\n            return undefined;\n        }\n\n        /**\n         * Find and return the airtime of this asset, if defined. This generally\n         * only works for shows from the guide.\n         *\n         * @param asset to examine\n         *\n         * @return The airtime, or undefined.\n         */\n        function getAirtime(asset) {\n\n            // If no asset, nothing to return.\n            if (!asset) {\n                return undefined;\n            }\n\n            // Case 1: If this is a 'show' from the Guide page, value might\n            // be in the 'stateOptions' subobject.\n            if (asset.stateOptions && asset.stateOptions.tmsSeriesId) {\n                return asset.stateOptions.airtime;\n            }\n\n            // Fallthrough: undefined.\n            return undefined;\n        }\n\n        /**\n         * Determine if this asset has been parentally blocked or not.\n         *\n         * @param asset to examine\n         *\n         * @return True if asset is parentally blocked, otherwise false.\n         */\n        function isParentallyBlocked(asset) {\n\n            let isBlocked = false;\n\n            if (asset && asset.defaultStream && asset.defaultStream.streamProperties) {\n\n                isBlocked = asset.defaultStream.streamProperties.parentallyBlockedByChannel ||\n                    asset.defaultStream.streamProperties.parentallyBlockedByRating ||\n                    asset.isBlockedByParentalControls ||\n                    false;\n\n            } else if (asset) {\n                isBlocked = asset.isBlockedByParentalControls || false;\n            }\n\n            return isBlocked;\n        }\n\n        /**\n         * Retrieve the contentClass for an asset\n         *\n         * @param asset to work with\n         *\n         * @return Null if no contentClass, otherwise the given contentClass in lowercase.\n         */\n        function getContentClass(asset) {\n\n            // Validate we have something to work with.\n            if (!asset.contentClass) {\n                $log.error('Playback: no content class supplied', asset);\n                return null;\n            }\n\n            // Normalize incoming content class.\n            return asset.contentClass.toLowerCase();\n        }\n\n        /**\n         * Retrieve the first value from a given array, if it exists, as a string.\n         *\n         * @param possibleArray Possible array to act upon.\n         * @param defaultValue Value to return if unable to return first value for any reason.\n         *\n         * @return First array value cast to a string, otherwise an empty string.\n         */\n        function getFirstArrayValueAsString(possibleArray, defaultValue) {\n\n            if (possibleArray &&\n                Array.isArray(possibleArray) &&\n                possibleArray.length > 0) {\n\n                return '' + possibleArray[0];\n            }\n\n            // Fallthrough\n            return defaultValue;\n        }\n\n        function extractRecordingOptions(asset, cdvrSettings) {\n            // $log.debug('Analytics: extractRecordingOptions', asset, cdvrSettings);\n\n            let result = {};\n\n            // Capture cdvrSettings\n            if (cdvrSettings) {\n                angular.extend(result, cdvrSettings);\n            }\n\n            // If no asset to work with, return now.\n            if (!asset) {\n                return result;\n            }\n\n            // Capture asset data.\n            let defaultStream = asset.defaultStream || null;\n            let defaultStreamProperties = defaultStream && defaultStream.streamProperties || null;\n\n            if (defaultStreamProperties) {\n                setStringValue(result, 'startTime', defaultStreamProperties.startTime);\n                setStringValue(result, 'endTime', defaultStreamProperties.endTime);\n                setStringValue(result, 'channelId', defaultStreamProperties.tmsGuideServiceId);\n            }\n\n            let network = asset.network || null;\n            if (network && network.callsign) {\n                result.callsign = network.callsign;\n            }\n\n            result.channelNumber = (asset.displayChannel ? '' + asset.displayChannel : undefined);\n            result.title = asset.seriesTitle || asset.title;  // Prefer series title if available\n            result.seriesId = getTmsSeriesId(asset);\n            result.episodeTitle = getEpisodeTitle(asset);\n            result.programId = getTmsProgramId(asset);\n            setStringValue(result, 'episodeNumber', asset.episodeNumber);\n\n            // Prune undefined values\n            pruneUndefinedValues(result);\n\n            // $log.debug('Analytics: extractRecordingOptions complete', asset, result);\n\n            return result;\n        }\n\n        function setStringValue(object, id, value) {\n            if (value) {\n                object[id] = '' + value;\n            }\n        }\n\n        /**\n         * Copy all the named property values in the given object to string\n         * equivalents in the returned object. Non-scalar properties (like objects)\n         * are not returned in the result.\n         * @param obj The object containing scalar properties to convert.\n         * @return New object containing string versions of the scalar properties in obj.\n         */\n        function convertAllValuesToStrings(obj) {\n            let result = {};\n            for (var property in obj) {\n                // Only grab non-object child properties.\n                if (obj.hasOwnProperty(property) && typeof obj[property] !== 'object' && obj[property] !== null) {\n                    let value = obj[property];\n                    if (typeof value === 'string') {\n                        result[property] = obj[property];\n                    } else if (typeof value !== 'string') {\n                        result[property] = value.toString();\n                    } else {\n                        $log.warn('Analytics: Unexpected property type: ' + typeof value +\n                            ' for property ' + property, obj);\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        /**\n         * Remove all attributes from the given object whose value is 'undefined'.\n         *\n         * @param obj The object from which to remove undefined values.\n         */\n        function pruneUndefinedValues(obj) {\n            for (var property in obj) {\n                // Only grab non-object child properties.\n                if (obj.hasOwnProperty(property) && typeof obj[property] === 'undefined') {\n                    // $log.debug('Removing undefined property: ' + property);\n                    delete obj[property];\n                }\n            }\n\n            return obj;\n        }\n\n        /**\n         * Convert the incoming on-demand category name, such as 'Movies', 'Kids',\n         * etc, to one of the venona normalized names, such as 'curatedMovies',\n         * 'curatedKids', etc.\n         *\n         * @param name The incoming content category name.\n         * @return Normalized equivalent for the given name.\n         */\n        function normalizeContentCategoryName(name) {\n            if ('Featured' === name) {\n                return 'curatedFeatured';\n            } else if ('TV Shows' === name) {\n                return 'curatedTvShows';\n            } else if ('Movies' === name) {\n                return 'curatedMovies';\n            } else if ('Kids' === name) {\n                return 'curatedKids';\n            } else if ('Networks' === name) {\n                return 'curatedNetworks';\n            }\n\n            // Fallthrough\n            return 'curatedCatalog';\n        }\n\n        function toLowerCamelCase(name) {\n\n            if (!name) {\n                return name;\n            }\n\n            // Remove whitespace & lowercase the first letter\n            // and convert first letters of the remaining words into uppercase\n            let words = name.split(' ').map(s => s.charAt(0).toUpperCase() + s.slice(1));\n            words[0] = words[0].charAt(0).toLowerCase() + words[0].slice(1);\n            let newName = words.join('');\n\n            // $log.debug('Analytics: toLowerCamelCase [' + name + '] -> [' + newName + ']');\n            return newName;\n        }\n\n        let service = {\n            populateChannelData,\n            populateAssetData,\n            populateStreamData,\n            populateTvodData,\n            populateEventData,\n            isTvodAsset,\n            getTmsProgramId,\n            getTmsSeriesId,\n            getTmsGuideId,\n            getAirtime,\n            getEpisodeTitle,\n            getProviderAssetId,\n            getContentClass,\n            isParentallyBlocked,\n            extractRecordingOptions,\n            convertAllValuesToStrings,\n            objToArray,\n            toLowerCamelCase,\n            isOnDemandContentClass,\n            normalizeContentCategoryName,\n            pruneUndefinedValues\n        };\n\n        return service;\n    }\n}());\n"],"sourceRoot":"/source/"}