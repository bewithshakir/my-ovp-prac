{"version":3,"sources":["ovpApp/data-delegates/delegate-utils.js"],"names":[],"mappings":"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","file":"ovpApp/data-delegates/delegate-utils.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.dataDelegate')\n        .factory('delegateUtils', delegateUtils);\n\n    /* @ngInject */\n    function delegateUtils($rootScope, parentalControlsService, $q, config) {\n        const service = {\n            cached,\n            promiseCached,\n            getEpisodesSince,\n            getEpisodesFromSeasonSince,\n            getDefaultStream,\n            getStreamProps,\n            createProductImageFunction,\n            getPersonImageUri,\n            createNetworkImageFunction,\n            networkImageFromTmsId: createNetworkImageFunction(\n                tmsId => `${config.image_api}/guide/${tmsId}`,\n                angular.noop\n            ),\n            appendQueryString,\n            formats: {\n                'HIGH_DEF': 'HD',\n                'THREED': '3D',\n                'STANDARD_DEF': 'SD'\n            },\n            details: {\n                'DOLBY_5_1':    '5.1',\n                'STEREO':       'Stereo',\n                'CLOSED_CAPTIONING': 'CC',\n                'SAP':          'SAP'\n            },\n            descriptionTypes: {\n                _mutator: 'details',\n                long: 'long_desc',\n                short: 'short_desc'\n            },\n            standardSearchParams: {\n                title: 'searchStringMatch',\n                titleWithHighlightTags: 'searchStringMatchWithHighlightTags',\n                tmsProgramId: 'tmsProgramId',\n                tmsSeriesId: 'tmsSeriesId',\n                dsQueryId: 'dsQueryId', // Analytics\n                searchResultIndex: 'searchResultIndex', // Analytics\n                searchFacet: 'searchFacet', // Analytics\n                availableLinear: 'availableLinear',\n                availableOnDemand: 'availableOnDemand',\n                ratings: 'allRatings',\n                isBlocked: function (data) {\n                    if (data.allRatings && data.allRatings.length > 0) {\n                        return parentalControlsService.isBlockedByRating(data.allRatings);\n                    } else {\n                        return $q.resolve(false);\n                    }\n                },\n                isBlockedByParentalControls: promiseCached(function () {\n                    //This returns a value always, not a promise - the 'isBlocked' getter\n                    //provides access to the promise directly.\n                    return this.isBlocked;\n                }, 'ParentalControls:updated'),\n                isEntitled: function () {\n                    // Search results don't currently include enough information to determine if it is entitled.\n                    return true;\n                }\n            }\n        };\n\n        let uniqueId = 0;\n\n        return service;\n\n        ///////////////////\n\n\n        function appendQueryString(uri, queryString) {\n            if (uri) {\n                let hasQuery = uri.includes('?');\n                return uri + (hasQuery ? '&' : '?') + queryString;\n            } else {\n                return '';\n            }\n        }\n\n        function getEpisodesSince(data, sinceDate) {\n            var result = [], seasons = data.seasons;\n            if (seasons) {\n                seasons.forEach(function (season) {\n                    result.push(...getEpisodesFromSeasonSince(season, sinceDate));\n                });\n            }\n            return result;\n        }\n\n        function getEpisodesFromSeasonSince(season, sinceDate) {\n            if (season.episodes && season.name !== 'Other') {\n                return season.episodes.filter(function (episode) {\n                    if (episode.originalAirDate) {\n                        let episodeTimestamp = Date.parse(episode.originalAirDate);\n                        return episodeTimestamp > sinceDate;\n                    }\n                    return false;\n                });\n            } else {\n                return [];\n            }\n        }\n\n        function getDefaultStream(data) {\n            return byWhatTheServerSays(data) ||\n                byFirstOnDemandStream(data) ||\n                byIndex(data);\n        }\n\n        function byWhatTheServerSays(data) {\n            return data.streamList && data.streamList.find(stream => stream.defaultStream);\n        }\n\n        function byFirstOnDemandStream(data) {\n            return data.streamList && data.streamList.find(stream => stream.type == 'ONLINE_ONDEMAND');\n        }\n\n        function byIndex(data) {\n            return data.streamList && data.streamList[0];\n        }\n\n        /**\n         * Creates a function to be used by data delegates for creating image uris\n         * @param  {function} getUri           a function for how to find the image uri in the data\n         * @param  {function} getNetworkParams a function for how to find the network params in the data\n         * @return {function}                  a function to be installed on a data delegate\n         */\n        function createProductImageFunction(getUri = defaultGetUri, getNetworkParams = defaultGetNetworkParams) {\n            // This next function gets installed on the data delegate\n            return function (data) {\n                // This next function is the one that gets called by the template or controller\n                // e.g. myMovieObject.imageUri({width: 50}) will call into this function\n                return function imageUri(options = {}) {\n                    let uri = getUri(data);\n\n                    // Size\n                    if (options.width) {\n                        uri = appendQueryString(uri, 'width=' + options.width);\n                    }\n                    if (options.height) {\n                        uri = appendQueryString(uri, 'height=' + options.height);\n                    }\n\n                    // Aspect ratio\n                    if (options.orientation == 'landscape') {\n                        uri = appendQueryString(uri, 'twccategory=Showcard');\n                    } else {\n                        uri = appendQueryString(uri, 'twccategory=Poster');\n                    }\n\n                    // If image unavailable, fallback to network\n                    uri = appendQueryString(uri, 'sourceType=colorHybrid');\n\n                    const networkParams = getNetworkParams(data);\n                    if (networkParams) {\n                        uri = appendQueryString(uri, networkParams);\n                    }\n\n                    // If network unavailable, fallback to default, or if default=false return a 404\n                    if (angular.isDefined(options.default)) {\n                        uri = appendQueryString(uri, 'default=' + options.default);\n                    } else {\n                        uri = appendQueryString(uri, 'default=true');\n                    }\n\n                    return prependHostIfNeeded(uri);\n                };\n            };\n        }\n\n        function defaultGetUri(data) {\n            return data.image_uri || data.imageUrl;\n        }\n\n        function defaultGetNetworkParams(data) {\n            return data.network && data.network.networkImageQueryParams;\n        }\n\n\n        function getPersonImageUri(data) {\n            return function (options = {}) {\n                let uri = data.image_uri || `${config.image_api}/person/${data.tmsPersonId}`;\n                // Size\n                if (options.width) {\n                    uri = appendQueryString(uri, 'width=' + options.width);\n                }\n                if (options.height) {\n                    uri = appendQueryString(uri, 'height=' + options.height);\n                }\n\n                // If network unavailable, fallback to default, or if default=false return a 404\n                if (angular.isDefined(options.default)) {\n                    uri = appendQueryString(uri, 'default=' + options.default);\n                } else {\n                    uri = appendQueryString(uri, 'default=true');\n                }\n\n                return prependHostIfNeeded(uri);\n            };\n        }\n\n        /**\n         * Creates a function to be used by data delegates for creating image uris\n         * @param  {function} getUri           a function for how to find the image uri in the data\n         * @param  {function} getNetworkParams a function for how to find the network params in the data\n         * @return {function}                  a function to be installed on a data delegate\n         */\n        function createNetworkImageFunction(getUri = defaultGetNetworkUri, getParams = defaultGetNetworkParams) {\n            // This next function gets installed on the data delegate\n            return function (data) {\n                // This next function is the one that gets called by the template or controller\n                // e.g. Network.imageUri({width: 50}) will call into this function\n                return function imageUri(options = {}) {\n                    let uri = getUri(data);\n\n                    if (!uri) {\n                        return '';\n                    }\n\n                    let queryParams = getParams(data);\n\n                    if (queryParams) {\n                        uri += `?${queryParams}`;\n                    }\n\n\n                    uri = appendQueryString(uri, 'sourceType=colorhybrid');\n                    uri = appendQueryString(uri, 'apikey=' + config.oAuth.consumerKey);\n\n                    if (options.width) {\n                        uri = appendQueryString(uri, 'width=' + options.width);\n                    }\n                    if (options.height) {\n                        uri = appendQueryString(uri, 'height=' + options.height);\n                    }\n\n                    if (angular.isDefined(options.default)) {\n                        uri = appendQueryString(uri, 'default=' + options.default);\n                    } else {\n                        uri = appendQueryString(uri, 'default=true');\n                    }\n\n                    return uri;\n                };\n            };\n        }\n\n        function defaultGetNetworkUri(data) {\n            return data.network && data.network.image_uri;\n        }\n\n        // Returns compiled attributes and formats for a streamList.\n        function getStreamProps(streamList) {\n            if (streamList && !(streamList instanceof Array)) {\n                streamList = [streamList];\n            }\n\n            return streamList\n                    .map(stream => stream.streamProperties.attributes)\n                    .reduce((list, current) => {\n                        if (current) {\n                            current.forEach(attr => {\n                                if (service.formats[attr]) {\n                                    if (list.formats.indexOf(service.formats[attr]) < 0) {\n                                        list.formats.push(service.formats[attr]);\n                                    }\n                                } else if (service.details[attr]) {\n                                    if (list.attributes.indexOf(service.details[attr]) < 0) {\n                                        list.attributes.push(service.details[attr]);\n                                    }\n                                }\n                            });\n                        }\n                        return list;\n                    }, {formats: [], attributes: []});\n        }\n\n        function prependHostIfNeeded(uri = '') {\n            return (uri.charAt(0) == '/') ? config.piHost + uri : uri;\n        }\n\n        /**\n         * Wraps a datadelegate accesor function so that it will be called only once, and the value\n         *    cached from then on. Use to improve the performance of immutable data.\n         * @param  {function} f the function to wrap\n         * @return {function}   the wrapped function\n         */\n        function cached(f) {\n            let id = uniqueId++;\n            return function (data) {\n                if (!data._cached) {\n                    data._cached = {};\n                }\n                data._cached[id] = data._cached[id] || f.call(this, data);\n                return data._cached[id];\n            };\n        }\n\n        /**\n         * Wraps a promise and returns undefined until the promise returns and then\n         * it returns the same value until the cacheTime completes.\n         * @param  {function} f the function to wrap\n         * @param  {int} cacheTime [Optional] amount of time to store the value before refetching\n         * @return {function}   the wrapped function\n         */\n\n        function promiseCached(fn, event) {\n            let id = uniqueId++;\n            let eventUnsubscribe = null;\n            let cacheVersionId = 0;\n\n            if (event && !eventUnsubscribe) {\n                eventUnsubscribe = $rootScope.$on(event, function () {\n                    cacheVersionId++;\n                });\n            }\n\n            return function (data) {\n                if (!data._cached) {\n                    data._cached = {};\n                }\n\n                if (!data._cached[id]) {\n                    data._cached[id] = {\n                        cacheVersion: -1,\n                        promise: null,\n                        val: undefined\n                    };\n                }\n\n                let c = data._cached[id];\n\n                if ((c.promise === null && c.val === undefined) || c.cacheVersion < cacheVersionId) {\n                    c.promise = fn.call(this, data);\n                    c.cacheVersion = cacheVersionId;\n                    if (c.promise && c.promise.then) {\n                        c.promise.then((res) => {\n                            c.val = res;\n                            return c.val;\n                        });\n                    } else {\n                        c.val = c.promise;\n                        c.promise = {};//Make sure it is not null\n                    }\n                }\n                return c.val;\n            };\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}