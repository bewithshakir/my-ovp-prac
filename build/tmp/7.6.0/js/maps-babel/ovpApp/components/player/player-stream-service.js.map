{"version":3,"sources":["ovpApp/components/player/player-stream-service.js"],"names":[],"mappings":"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","file":"ovpApp/components/player/player-stream-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.player.streamService', [\n            'ovpApp.config',\n            'ovpApp.services.parentalControlsService',\n            'ovpApp.adBlockerDetection',\n            'ovpApp.services.drmSessionService',\n            'ovpApp.player',\n            'ovpApp.services.locationService',\n            'ovpApp.playerControls.miniGuideData',\n            'ovpApp.player.whatsOn',\n            'ovpApp.legacy.deviceid',\n            'ovpApp.messages',\n            'ovpApp.components.alert',\n            'ovpApp.player.blockingScreen',\n            'ovpApp.services.errorCodes'])\n        .factory('playerStreamService', playerStreamService);\n\n    /* @ngInject */\n    function playerStreamService(config, $http, parentalControlsService,\n        adBlockerDetection, drmSessionService, $q, alert,\n        $state, playerErrors, $rootScope, locationService,\n        dummyEANAsset, whatsOn, playerService,\n        deviceid, messages, $log, $timeout, $interval, blockingScreenService, errorCodesService, profileService) {\n\n        let aegisPromise,\n            playbackStoppedHandler;\n\n        let currentAsset = null;\n\n        let service = {\n            playChannel,\n            playVodAsset,\n            playEAN\n        };\n\n        activate();\n\n        return service;\n\n        ////////////////\n\n        function activate() {\n            $rootScope.$on('player:parentalControlsUnblocked', onParentalControlsUnblocked);\n        }\n\n        /**\n         * Play a live channel\n         * @param  {object} options.player        flash player object to interact with\n         * @param  {object} options.channel       channel object to play\n         * @param  {object} options.channel.asset data delegate of the current asset on the chanenl\n         * @return {promise}    Promise will resolve when playback successfully starts\n         *                      or will reject if playback could not start\n         */\n        function playChannel({player, channel, triggeredBy}) {\n            currentAsset = channel.asset;\n            $rootScope.$broadcast('sap-reset');\n            player.trigger('channel-changed', {channel, triggeredBy});\n            blockingScreenService.hide();\n            return whatsOn.now(channel).then(assetOnNow => {\n                return checkChannelEntitlements({channel})\n\n                .then(() => {\n                    $rootScope.$broadcast('player:assetSelected', assetOnNow);\n                    return handleParentalControls({player: player, asset: assetOnNow});\n                })\n                .then(() => getLinearStream(channel.streamUri, player))\n                .then(streamInfo => {\n                    triggerLiveStreamUriObtained(streamInfo, {player, channel});\n                    playStream({\n                        player: player,\n                        uri: streamInfo.stream.streamUrlWithDAIScheme,\n                        drm: streamInfo.drm,\n                        mode: 'LIVE',\n                        aegis: streamInfo.stream.aegis,\n                        tokenRefreshSeconds: streamInfo.stream.token_refresh_seconds\n                    });\n                    return streamInfo;\n                })\n                .then(streamInfo => handleAdBlocker(streamInfo))\n                .catch(convertError)\n                .catch(error => {\n\n                    // Analytics error\n                    $rootScope.$emit('Analytics:playbackFailure', {\n                        channel: channel,\n                        asset: currentAsset,\n                        cause: error,\n                        errorCode: 'WVS-1001',\n                        errorMessage: errorCodesService.getMessageForCode('WVS-1001')\n                    });\n\n                    return handleBlockedError(error, channel.asset)\n                    .then(() => playChannel({player, channel}));\n                });\n            });\n        }\n\n        /**\n         * Play a vod asset\n         * @param  {object} options\n         * @param  {object} options.player      flash player object to interact with\n         * @param  {object} options.asset       data delegate of the asset\n         * @param  {object} options.stream      the specific stream to play\n         * @param  {bool}   options.isTrailer   true if this is a trailer\n         * @param  {bool}   options.isCdvr      true if this is a cdvr playback\n         * @param  {bool}   options.isStartover true if asset should start over instead of resume\n         * @return {promise}    Promise will resolve when playback successfully starts\n         *                      or will reject if playback could not start\n         */\n        function playVodAsset(options) {\n            $rootScope.$broadcast('sap-reset');\n            $rootScope.$broadcast('player:assetSelected', options.asset);\n\n            currentAsset = options.asset;\n\n            let operationType = 'playbackPlaySelected';\n            let elementStandardizedName = options.isCdvr ? 'asset' : 'onDemandWatch';\n            if (options.startTime !== 0) {\n                operationType = 'playbackResumeSelected';\n                elementStandardizedName = options.isCdvr ? 'asset' : 'onDemandResume';\n            }\n            if (options.isStartOver === true) {\n                operationType = 'playbackRestartSelected';\n            }\n\n            if (options.isCdvr) {\n                options.player.trigger('cdvr-content-selected', {asset: options.asset,\n                    operationType: operationType,\n                    elementStandardizedName: elementStandardizedName,\n                    stream: options.stream});\n            } else {\n                options.player.trigger('vod-content-selected', {asset: options.asset,\n                    runtimeInSeconds: options.stream.duration,\n                    elementStandardizedName: elementStandardizedName,\n                    contentBookmark: options.startTime, operationType: operationType});\n            }\n\n            blockingScreenService.hide();\n\n            return checkVodEntitlements(options)\n                .then(() => handleParentalControls(options))\n                .then(() => getVODStream(options))\n                .then(streamInfo => {\n                    triggerVodStreamUriObtained(streamInfo, options);\n                    playStream({\n                        player: options.player,\n                        uri: streamInfo.stream.stream_url,\n                        drm: streamInfo.drm,\n                        startTime: options.startTime,\n                        eptTime: options.eptTime,\n                        mode: 'VOD',\n                        aegis: streamInfo.stream.aegis,\n                        tokenRefreshSeconds: streamInfo.stream.token_refresh_seconds\n                    });\n\n                    return streamInfo;\n                })\n                .then(streamInfo => handleAdBlocker(streamInfo))\n                .catch(convertError)\n                .catch(error => {\n                    // Analytics error\n                    $rootScope.$emit('Analytics:playbackFailure', {\n                        asset: currentAsset,\n                        cause: error,\n                        errorCode: 'WVS-1003',\n                        errorMessage: errorCodesService.getMessageForCode('WVS-1003')\n                    });\n\n                    return handleBlockedError(error, options.asset)\n                    .then(() => playVodAsset(options));\n                });\n        }\n\n        /**\n         * Play EAN message\n         * @param  {object} options.player flash player object to interact with\n         * @param  {object} options.eanUrl url to play from\n         * @return {promise}     Promise will resolve when playback sucessfully starts\n         *                       or will reject if playback could not start\n         */\n        function playEAN({player, eanUrl}) {\n            $rootScope.$broadcast('player:assetSelected', dummyEANAsset);\n\n            playStream({player, uri: eanUrl, mode: 'LIVE'});\n\n            return $q.resolve();\n        }\n\n        function checkChannelEntitlements({channel}) {\n            if (channel.available) {\n                return $q.resolve(true);\n            } else {\n                return $q.reject(playerErrors.outOfHome);\n            }\n        }\n\n        function aegisDeleteRequest(data) {\n            $http({\n                url: config.aegisUri(),\n                params: data,\n                method: 'DELETE',\n                withCredentials: true\n            });\n        }\n\n        function aegisRefreshRequest(data) {\n            return $http({\n                url: config.aegisRefreshUri(),\n                params: data,\n                method: 'GET',\n                withCredentials: true,\n                ignoreStatus: [400]\n            });\n        }\n\n        function handleAegisToken(aegis, tokenRefreshSeconds, player) {\n            if (!aegis || !tokenRefreshSeconds) {\n                return;\n            }\n            let refreshInterval = tokenRefreshSeconds;\n            let data = {'aegis' : aegis};\n\n            // Clear previous listener\n            if (playbackStoppedHandler) {\n                player.off('playback-stopped', playbackStoppedHandler);\n            }\n            // Clear previous timer\n            if (aegisPromise) {\n                $interval.cancel(aegisPromise);\n            }\n\n            aegisPromise = $interval(() => {\n                aegisRefreshRequest(data).then((data) => {\n                    refreshInterval = data.token_refresh_seconds;\n                }).catch(error => handleFraudDetection(error, player));\n            }, refreshInterval * 1000);\n\n            playbackStoppedHandler = function () {\n                if (aegisPromise) {\n                    $interval.cancel(aegisPromise);\n                    aegisPromise = null;\n                }\n                aegisDeleteRequest(data);\n            };\n\n            player.on('playback-stopped', playbackStoppedHandler);\n        }\n\n        function handleFraudDetection(error, player) {\n            if (error.status === 429) {\n                let errorCode = 'WVS-1005';\n                $rootScope.$emit('Analytics:playbackFailure', {\n                    asset: currentAsset,\n                    cause: error,\n                    errorCode: errorCode,\n                    errorMessage: errorCodesService.getMessageForCode(errorCode)\n                });\n                alert.open({\n                    message: errorCodesService.getMessageForCode(errorCode),\n                    buttonText: 'OK'\n                });\n                if (aegisPromise) {\n                    $interval.cancel(aegisPromise);\n                }\n                // Restrict user from watching a video if aegis refresh url\n                // returns an error of 429\n                player.stop();\n                return $q.reject(playerErrors.oohFraudDetection);\n            }\n            return $q.reject(error);\n        }\n\n        function checkVodEntitlements({asset, stream, isTrailer, isCdvr}) {\n            return locationService.getLocation()\n                .then(location => {\n                    if (isTrailer || isCdvr) {\n                        return true;\n                    } else if (stream.streamProperties.ondemandStreamType === 'TOD') {\n                        let tvodEntitlement = stream.streamProperties.tvodEntitlement;\n                        let now = Math.round(Date.now() / 1000);\n                        if (!tvodEntitlement || (now > tvodEntitlement.rentalEndTimeUtcSeconds)) {\n                            return $q.reject(playerErrors.notRented);\n                        } else {\n                            return true;\n                        }\n                    } else if (!asset.isEntitled && !stream.streamProperties.entitled) {\n                        return $q.reject(playerErrors.unentitled);\n                    } else if (!location.behindOwnModem && !asset.availableOutOfHome) {\n                        return $q.reject(playerErrors.outOfHome);\n                    } else {\n                        return true;\n                    }\n                });\n        }\n\n        function convertError(error = {}) {\n            let result = playerErrors.unknown;\n\n            if (angular.isString(error) && error in playerErrors) {\n                result = error;\n            } else if (error.status === 403 && error.data.context) {\n                let context = error.data.context;\n                if (context.InUSAOnly || context.blockedOOH) {\n                    result = playerErrors.outOfHome;\n                } else if (context.blockedByPCChannel || context.blockedByPCRating || context.incorrectPin) {\n                    result = playerErrors.blocked;\n                } else if (context.unentitled) {\n                    result = playerErrors.unentitled;\n                } else {\n                    result = playerErrors.unknown;\n                }\n            } else if (error.status === 404) {\n                result = playerErrors.notFound;\n            }\n\n            return $q.reject(result);\n        }\n\n        let blockingDefer;\n\n        function handleBlockedError(error, asset) {\n            if (error === playerErrors.blocked || error === playerErrors.adBlocker) {\n                // Normally we detect blocking problems before trying to play, so this error\n                // only occurs if we think the program is unblocked and yet the server tells\n                // us it is. This can happen if asset data is missing.\n\n                blockingScreenService.show({asset: asset, type: error});\n                blockingDefer = $q.defer();\n                return blockingDefer.promise;\n            } else {\n                return $q.reject(error);\n            }\n        }\n\n        function onParentalControlsUnblocked() {\n            if (blockingDefer) {\n                blockingDefer.resolve();\n                blockingDefer = undefined;\n            }\n        }\n\n        function handleAdBlocker(streamInfo) {\n            var isDai = streamInfo.stream.dai;\n            var blocked = false;\n\n            if (!config.adBlockerDetection.enabled ||\n                !config.adBlockerDetection.blockPlaybackIfAdsBlocked) {\n                return $q.resolve();\n            }\n\n            adBlockerDetection.adsBlocked().then(() => {\n                // not blocked\n                return $q.resolve();\n            }, () => {\n                // blocked\n                if (config.adBlockerDetection.blockPlaybackOnlyIfDaiStream) {\n                    if (isDai) {\n                        blocked = true;\n                    }\n                } else {\n                    blocked = true;\n                }\n\n                if (blocked) {\n                    if (config.adBlockerDetection.debug) {\n                        $log.debug('Blocking playback due to ad blocker');\n                    }\n                    blockingScreenService.show({type: 'adBlocker'});\n\n                    return $q.reject(playerErrors.adBlocker);\n                }\n\n                return $q.resolve();\n            });\n        }\n\n        function handleParentalControls({player, asset, stream, isTrailer}) {\n            if (blockingDefer) {\n                // If previous channel had a blocking defer, get rid of it\n                blockingDefer.reject(playerErrors.tunedAway);\n                blockingDefer = undefined;\n            }\n\n            if (isTrailer) {\n                return $q.resolve();\n            } else {\n                let streamRating = stream && stream.streamProperties && stream.streamProperties.rating ?\n                    stream.streamProperties.rating : '';\n\n                // If data is missing, then we do not enforce asset parental controls. It's possible it will\n                // fail if the server knows something we don't, in which case it goes to error handling\n                let assetBlocked = asset ? asset.isBlocked : $q.resolve(false);\n                return $q.all([\n                    assetBlocked,\n                    parentalControlsService.isBlockedByRating(streamRating),\n                    parentalControlsService.isParentalControlsDisabledForClient()\n                ]).then(([assetBlocked, streamBlocked, isPCDisabledForClient]) => {\n                    if ((assetBlocked || streamBlocked) && !isPCDisabledForClient) {\n                        blockingDefer = $q.defer();\n                        blockingScreenService.show({type: 'parentalControls'});\n                        return blockingDefer.promise;\n                    } else {\n                        return $q.resolve();\n                    }\n                });\n            }\n        }\n\n        function triggerLiveStreamUriObtained(streamInfo, {player, channel}) {\n            $rootScope.$broadcast('stream-uri-obtained', 'LIVE', streamInfo);\n            player.trigger('stream-uri-obtained', {\n                stream: streamInfo.stream,\n                scrubbingEnabled: false,\n                playerType: 'linear',\n                contentMetadata: {\n                    channelId: channel.tmsId,\n                    channelIdType: 'TMS',\n                    tmsProgramId: channel.asset && channel.asset.tmsProgramIds[0]\n                }\n            });\n\n            return streamInfo;\n        }\n\n        function triggerVodStreamUriObtained(streamInfo, options) {\n            $rootScope.$broadcast('stream-uri-obtained', 'VOD', streamInfo, options);\n            let {player, asset, stream, isTrailer} = options;\n            let prodProvider = asset.network ? asset.network.product_provider : '';\n            // CDVR assets do not have a product provider?\n            prodProvider = prodProvider || '';\n            let index = prodProvider.indexOf(':');\n            let provider = prodProvider.substring(index + 1);\n            let product = prodProvider.substring(0, index);\n\n            player.trigger('stream-uri-obtained', {\n                stream: streamInfo.stream, //We need to pass the stream received from IPVS and not our stream delegate\n                isTrailer: isTrailer,\n                scrubbingEnabled: !isFastForwardDisabled(stream),\n                playerType: options.isCdvr ? 'cdvr' : 'onDemand',\n                contentBookmark: options.startTime,\n                contentMetadata: {\n                    product: product,\n                    provider: provider,\n                    contentIdType: 'thePlatform',  // TODO This type doesn't seem to be used by venona\n                    contentId: String(asset.providerAssetIds && asset.providerAssetIds[0]),\n                    providerAssetId: asset.providerAssetIds && asset.providerAssetIds[0],\n                    tmsProgramId: asset.tmsProgramIds && asset.tmsProgramIds[0],\n                    contentClass: asset.contentClass,\n                    seriesIdType: (asset.isSeries || asset.isEpisode) && 'thePlatform',\n                    seriesId: (asset.isSeries || asset.isEpisode) && asset.tmsSeriesId,\n                    cdvrRecording: stream.cdvrRecording\n                }\n            });\n            return streamInfo;\n        }\n\n        function isFastForwardDisabled(stream) {\n            return stream && stream.streamProperties.tricks_mode &&\n                stream.streamProperties.tricks_mode.FASTFORWARD !== undefined;\n        }\n\n        function playStream({player, uri, drm, startTime, eptTime, mode, aegis, tokenRefreshSeconds}) {\n            if (!playerService.isValidPlayRoute()) {\n                return;\n            }\n\n            drm = drm || null;\n            startTime = startTime || 0;\n\n            $rootScope.$broadcast('Session:setCapabilities', [\n                {\n                    capabilityName: 'DRMPlayback',\n                    status: drm ? 'enabled' : 'disabled'\n                }\n            ]);\n            blockingScreenService.hide();\n\n            let mediaKeys = drm ? [{\n                    sessionId: drm.sessionId,\n                    ticketId: drm.ticketId\n                }] : null;\n\n            player.setMediaKeys(mediaKeys);\n\n            player.setSrc([uri]);\n\n            // set buffer lenght\n            try {\n                let bufferConfig = config.playerBufferControlParameters;\n                if (bufferConfig.overrideDefaults) {\n                    if (mode === 'LIVE') {\n                        player.setBufferControlParameters({\n                            initial: bufferConfig.initialBufferLengthInMilliSec,\n                            current: bufferConfig.defaultPlaybackBufferLengthInMilliSec\n                        });\n                    } else if (mode === 'VOD') {\n                        player.setBufferControlParameters({\n                            initial: bufferConfig.initialBufferLengthInMilliSec,\n                            current: bufferConfig.vodPlaybackBufferLengthInMilliSec\n                        });\n                    }\n                }\n            } catch (e) {\n                $log.error('Error parsing playerBufferControlParameters', e);\n            }\n\n            // If we have the eptTime from bookmark then use that time to calculate\n            // the correct position in the stream.\n            if (eptTime !== undefined && eptTime >= 0) {\n                player.setEptTime(eptTime);\n            } else {\n                player.setCurrentTime(startTime);\n            }\n\n            player.play();\n            handleAegisToken(aegis, tokenRefreshSeconds, player);\n        }\n\n        function getLinearStream(uri, player) {\n            let drm;\n\n            return handleLinearDRM()\n                .then(d => drm = d)\n                .then(() => getLiveStreamData(drm))\n                .then(data =>\n                    $http({\n                        url: config.piHost + uri,\n                        params: data,\n                        method: 'GET',\n                        withCredentials: true\n                    }))\n                .then(result => {\n                    if (!result.data.drm && config.playDrmOnlyStreams) {\n                        return $q.reject();\n                    } else {\n                        result.data.streamUrlWithDAIScheme = getStreamUrlWithDAIScheme(result.data);\n                        return {\n                            drm: drm,\n                            stream: result.data\n                        };\n                    }\n                }).catch(error => handleFraudDetection(error, player));\n        }\n\n        function handleLinearDRM() {\n            if (config.useDRMforLIVE || config.playDrmOnlyStreams) {\n                return drmSessionService.getDRMSession();\n            } else {\n                return $q.resolve(null);\n            }\n        }\n\n        function handleVODDRM() {\n            if (config.useDRMforVOD || config.playDrmOnlyStreams) {\n                return drmSessionService.getDRMSession();\n            } else {\n                return $q.resolve(null);\n            }\n        }\n\n        function getLiveStreamData(drm) {\n            let csid = profileService.isSpecU() ? config.csidForSpecULive : config.csidforLIVE;\n            let data = {\n                csid: csid,\n                encoding: 'hls',\n                'dai-supported': config.useDAIforLIVE,\n                'drm-supported': !!drm,\n                'vast-supported': config.vastSupport,\n                'adID': deviceid.get()\n            };\n            if (!!drm) {\n                data.sessionId = drm.sessionId;\n            }\n\n            return $q.all([\n                parentalControlsService.isParentalControlsDisabledForClient(),\n                parentalControlsService.getLocalPin()\n            ]).then(([disabled, pin]) => {\n                if (disabled) {\n                    data.parentalControlPIN = pin;\n                }\n                return data;\n            });\n        }\n\n        function getVODStream({stream, isTrailer, isCdvr, player}) {\n            let uri, drm;\n\n            if (isTrailer) {\n                uri = config.piHost + stream.streamProperties.ipvsTrailerUrl;\n            } else if (isCdvr) {\n                uri = config.piHost + stream.streamProperties.cdvrRecording.playUrl;\n            } else {\n                uri = config.piHost + stream.streamProperties.mediaUrl;\n            }\n\n            return handleVODDRM()\n                .then(d => {\n                    drm = d;\n                    return getVODStreamData(drm);\n                })\n                .then(data =>\n                    $http({\n                        url: uri,\n                        params: data,\n                        method: 'GET',\n                        withCredentials: true\n                    }))\n                .then(result => {\n                    if (!result.data.drm && config.playDrmOnlyStreams) {\n                        return $q.reject();\n                    } else {\n                        return {\n                            drm: drm,\n                            stream: result.data,\n                            isTrailer: isTrailer\n                        };\n                    }\n                }).catch(error => handleFraudDetection(error, player));\n        }\n\n        function getVODStreamData(drm) {\n            let csid = profileService.isSpecU() ? config.csidForSpecUVod : config.csidforVOD;\n            let data = {\n                'dai-supported': config.useDAIforVOD,\n                'drm-supported': !!drm,\n                csid: csid,\n                encoding: 'hls',\n                'vast-supported': config.vastSupport,\n                'adID': deviceid.get()\n            };\n\n            if (!!drm) {\n                data.sessionId = drm.sessionId;\n            }\n\n            return parentalControlsService.getLocalPin()\n                .then(pin => {\n                    data.parentalControlPIN = pin;\n                    return data;\n                });\n        }\n\n        function getStreamUrlWithDAIScheme(streamInfo) {\n            var schemeUrl = streamInfo.stream_url;\n            if (streamInfo.dai && config.useAlternateDAIScheme) {\n                schemeUrl += (schemeUrl.indexOf('?') !== -1) ? '&' : '?';\n                schemeUrl += 'imptoken=1';\n            }\n            return schemeUrl;\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}