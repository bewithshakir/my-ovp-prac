{"version":3,"sources":["ovpApp/interceptors/eventGatewayInterceptor.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;;6DACT;IACA,QAAQ,OAAO,oCAAoC,CAAC,kBAC/C,OAAO;;;;;;;;;;;IAWZ,SAAS,wBAAwB,eAAe;QAC5C,cAAc,aAAa,KAAK,CAAC,MAAM,aAAa,UAAU,IAAI,WAAW;YACzE,IAAI,SAAS,UAAU,IAAI;YAC3B,IAAI,YAAY,UAAU,IAAI;;YAE9B,IAAI,aAAa,UAAU;gBACvB,uBAAuB,OAAO,QAAQ,OAAO,eAAe;gBAC5D,iCACA,OAAO,QAAQ,OAAO,eAAe;;;YAGzC,QAAQ,WAAW;gBACf,KAAK;oBACD,uBAAuB;oBACvB,iCAAiC;oBACjC;gBACJ,KAAK;oBACD,uBAAuB;oBACvB,iCAAiC;oBACjC;gBACJ,KAAK;oBACD,uBAAuB;oBACvB;;;YAGR,OAAO;gBACH,SAAS,SAAA,QAAU,QAAQ;oBACvB,IAAI,sBAAsB,UAAU,IAAI;oBACxC,IAAI,wBACC,UAAU,OAAO,IAAI,QAAQ,YAAY,GAAI;wBAC9C,OAAO,YAAY,IAAI,OAAO;wBAC9B,oBAAoB;;oBAExB,OAAO;;gBAEX,eAAe,SAAA,cAAU,UAAU;oBAC/B,IAAI,wBACC,YAAY,SAAS,UAClB,SAAS,OAAO,IAAI,QAAQ,YAAY,GAC9C;wBACE,mBAAmB,MAAM;;;oBAG7B,OAAO,GAAG,OAAO;;gBAErB,UAAU,SAAA,SAAU,WAAU;oBAC1B,IAAI,wBACA,CAAC,kCACA,UAAS,OAAO,IAAI,QAAQ,YAAY,GAC3C;wBACE,mBAAmB,OAAO;;oBAE9B,OAAO;;;;YAIf,SAAS,mBAAmB,KAAK,QAAQ;gBACrC,IAAI,sBAAsB,UAAU,IAAI;gBACxC,IAAI,WAAY,OAAO,WAAW;oBAC9B;;gBAEJ,IAAI,KAAK;;oBAEL,IAAI,OAAO,WAAW,CAAC,GAAG;wBACtB,OAAO;;;oBAGX,IAAI,UAAU;wBACV,SAAS;2BACN;wBACH,SAAS;;uBAEV;oBACH,SAAS;;;gBAGb,oBAAoB,UAAU,qBAAqB;oBAC/C,gBAAgB,OAAO;oBACvB,SAAS,OAAO,OAAO;oBACvB,UAAU,OAAO,OAAO;oBACxB,QAAQ;;;;;KAMvB","file":"ovpApp/interceptors/eventGatewayInterceptor.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.interceptors.eventGateway', ['ovpApp.config'])\n        .config(eventGatewayInterceptor);\n\n    /**\n     * Since http interceptors in angular are done before services initialize,\n     * the config must be injected at runtime.\n     *\n     * This is also implemented in the nns-service for jquery http calls.\n     * @param $httpProvider\n     */\n\n    /* @ngInject */\n    function eventGatewayInterceptor($httpProvider) {\n        $httpProvider.interceptors.push(['$q', '$injector', function ($q, $injector) {\n            var config = $injector.get('config');\n            var $location = $injector.get('$location');\n\n            var queryPairs = $location.search(),\n                ajaxAnalyticsEnabled = config.getBool(config.eventgatewayV4.logServiceCalls),\n                ajaxAnalyticsEnabledErrorsOnly =\n                config.getBool(config.eventgatewayV4.logServiceCallErrorsOnly);\n\n            // Override reporting level by query param egErrorReportingLevel\n            switch (queryPairs.egErrorReportingLevel) {\n                case 'all':\n                    ajaxAnalyticsEnabled = true;\n                    ajaxAnalyticsEnabledErrorsOnly = false;\n                    break;\n                case 'errors':\n                    ajaxAnalyticsEnabled = true;\n                    ajaxAnalyticsEnabledErrorsOnly = true;\n                    break;\n                case 'none':\n                    ajaxAnalyticsEnabled = false;\n                    break;\n            }\n\n            return {\n                request: function (config) {\n                    var eventGatewayService = $injector.get('eventGatewayService');\n                    if (ajaxAnalyticsEnabled &&\n                        (config && config.url.indexOf('http') === 0)) {\n                        config.startTime = new Date().getTime();\n                        eventGatewayService.setServiceCallStartTime();\n                    }\n                    return config;\n                },\n                responseError: function (response) {\n                    if (ajaxAnalyticsEnabled &&\n                        (response && response.config &&\n                            response.config.url.indexOf('http') === 0)\n                    ) {\n                        remoteCallReturned(true, response);\n                    }\n\n                    return $q.reject(response);\n                },\n                response: function (response) {\n                    if (ajaxAnalyticsEnabled &&\n                        !ajaxAnalyticsEnabledErrorsOnly &&\n                        (response.config.url.indexOf('http') === 0)\n                    ) {\n                        remoteCallReturned(false, response);\n                    }\n                    return response;\n                }\n            };\n\n            function remoteCallReturned(err, config) {\n                var eventGatewayService = $injector.get('eventGatewayService');\n                var timedOut = (config.status === 408),\n                    result;\n\n                if (err) {\n\n                    if (config.status === -1) {\n                        return null;\n                    }\n\n                    if (timedOut) {\n                        result = 'timeout';\n                    } else {\n                        result = 'failure';\n                    }\n                } else {\n                    result = 'success';\n                }\n\n                eventGatewayService.sendEvent('serviceCallResult', {\n                    httpStatusCode: config.status,\n                    httpUrl: config.config.url,\n                    httpVerb: config.config.method,\n                    result: result\n                });\n\n            }\n        }]);\n    }\n}());\n"],"sourceRoot":"/source/"}