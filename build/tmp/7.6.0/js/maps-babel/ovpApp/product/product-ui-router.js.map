{"version":3,"sources":["ovpApp/product/product-ui-router.js"],"names":[],"mappings":"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","file":"ovpApp/product/product-ui-router.js","sourcesContent":["/*\n * Product ui-router config\n */\n\n(function () {\n    'use strict';\n\n    angular.module('ovpApp.product.router', [\n        'ui.router',\n        'ovpApp.product',\n        'ovpApp.product.focusRestore',\n        'ovpApp.product.info',\n        'ovpApp.search.searchService',\n        'ovpApp.dataDelegate',\n        'ovpApp.messages',\n        'ovpApp.directives.scrollReset',\n        'ovpApp.services.focusMediator',\n        'lib.platform'\n    ])\n        //A list to verify the app name is correct/and translates to the correct name\n        .constant('appOptions', {\n            'guide': 'guide',\n            'dvr': 'rdvr',\n            'cdvr': 'rdvr',\n            'ondemand': 'ondemand',\n            'livetv': 'livetv',\n            'search': 'search',\n            'watchLater': 'watchLater'\n        })\n        .run(run)\n        .config(productUiRouter);\n\n    /* @ngInject */\n    function run($state, $rootScope, $timeout, searchService, messages, delegateFactory, $document, platform,\n        focusMediator, $transitions) {\n\n        loadBackgroundStateOnDeepLink();\n\n        restoreFocusOnTransitions();\n\n        removeProductPageStickyState();\n\n        function removeProductPageStickyState() {\n            // As product page is a part of sticky state. So need to exit sticky state when user\n            // navigate back from playing video to updated product button.\n            $transitions.onSuccess({\n                to: function (state) {\n                    return (state.name.startsWith('ovp.ondemand.play'));\n                }\n            }, (transition) => {\n                const stickyStates = transition.router.getPlugin('stickystates');\n                const inactives = stickyStates.inactives();\n                if (inactives.find(state => state.name === 'product')) {\n                    stickyStates.exitSticky('product');\n                }\n            });\n        }\n\n        function loadBackgroundStateOnDeepLink() {\n            // The menu is part of the 'ovp' state, so for product to look correct an ovp state must exist\n            //   inactive in the background. So on deep link, we need to manually load the ovp state\n            $transitions.onSuccess({to: 'product.**'}, function (transition) {\n                const inactives = transition.router.getPlugin('stickystates').inactives();\n                const ovp = inactives.find(state => state.name === 'ovp');\n                if (!ovp) {\n                    const dispose = $transitions.onSuccess({to: 'ovp.blankPage'}, function () {\n                        $state.go(transition.to(), transition.params('to'), {location: 'replace'});\n                        dispose();\n                        $rootScope.$emit('Analytics:unpauseNavigation');\n                    });\n\n                    $rootScope.$emit('Analytics:pauseNavigation');\n\n                    $state.go('ovp.blankPage');\n                }\n            });\n        }\n\n        function restoreFocusOnTransitions() {\n            $transitions.onStart({}, function (transition) {\n                const toState = transition.to();\n                const fromState = transition.from();\n                if (toState.name.startsWith('product') && !fromState.name.startsWith('product')) {\n                    // When entering product, save the focus and restore it if user exits back the way they came\n                    let activeEl = $document[0].activeElement;\n                    let entryState = fromState.name;\n                    let unregister = $transitions.onSuccess({}, function (_transition) {\n                        const _toState = _transition.to();\n                        if (!_toState.name.startsWith('product')) {\n                            if (_toState.name === entryState) {\n                                focusMediator.requestFocus(focusMediator.highPriority)\n                                    .then(() => {\n                                        //added timeout for windows / ff ngc-5784\n                                        const isFF = platform.name === 'Firefox';\n                                        if (isFF) {\n                                            $timeout(() => activeEl.focus(), 1000);\n                                        } else {\n                                            activeEl.focus();\n                                        }\n                                    });\n\n                                unregister();\n                            } else if (!_toState.name.startsWith('search')) {\n                                unregister();\n                            }\n                            // Else they went product -> search. That's still \"in\" the product page, so don't unregister\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n\n    /* @ngInject */\n    function productUiRouter($stateProvider) {\n        $stateProvider\n            .state('product', {\n                abstract: true,\n                url: '/product',\n                sticky: true,\n                views: {\n                    productView: {\n                        template: `<ui-view class=\"product-page-content\" ` +\n                            `ng-class='{\"invisible\": !$state.includes(\"product\")}' />`\n                    }\n                },\n                data: {\n                    bodyClass: 'product-active',\n                    hideSubMenu: true\n                }\n            })\n            .state('product.series', {\n                url: `/series/{tmsSeriesId}?app&serviceId&airtime&tmsProgramId&{uri:uri}&tmsGuideServiceId\n                    &displayChannel`,\n                component: 'productSeries',\n                params: {\n                    app: resolveApp,\n                    serviceId: null, //mystroServiceId\n                    tmsGuideServiceId: null,\n                    airtime: null, //airtimeUtcSec\n                    tmsProgramId: null,\n                    uri: null, // A specific uri to use instead of constructing one from the tmsSeriesId\n                    displayChannel: null\n                },\n                redirectTo: {\n                    state: 'product.series.episodes'\n                },\n                resolve: {\n                    fetcher: (productService, $q, $stateParams) => {\n                        return createFetcher(productService, $q, $stateParams);\n                    },\n                    series: (fetcher, $rootScope) => {\n                        let promise = fetcher();\n                        if (promise) {\n                            $rootScope.$broadcast(\n                                'message:loading',\n                                promise,\n                                undefined,\n                                'Series'\n                            );\n                        }\n                        return promise || {};\n                    },\n                    /* @ngInject */\n                    blocked: series => series.isBlocked,\n                    /* @ngInject */\n                    cameFromWatchLater: $transition$ => $transition$.from().name.startsWith('ovp.watchLater'),\n                    app: fromStateParams('app'),\n                    tmsProgramId: fromStateParams('tmsProgramId')\n                },\n                /* @ngInject */\n                onEnter: function ($rootScope) {\n                    $rootScope.$broadcast('productEnter'); //Used to trigger a scroll reset\n                }\n            })\n            .state('product.series.episodes', {\n                url: '/episodes',\n                component: 'productEpisodeList'\n            })\n            .state('product.series.info', {\n                url: '/info',\n                component: 'productInfo',\n                resolve: {\n                    /* @ngInject */\n                    asset: series => series\n                }\n            })\n            .state('product.event', {\n                url: '/movie/:tmsId?app&serviceId&airtime&tmsProgramId&{uri:uri}&tmsGuideServiceId&displayChannel',\n                component: 'productMovie',\n                params: {\n                    // Passes additional data about the context. Eg, a specific program or time\n                    app: resolveApp,\n                    serviceId: null, //mystroServiceId\n                    airtime: null, //airtimeUtcSec\n                    uri: null, // A specific uri to use instead of constructing one from the tmsProgramId\n                    tmsGuideServiceId: null,\n                    displayChannel: null\n                },\n                resolve: {\n                    fetcher: (productService, $q, $stateParams) => {\n                        return createFetcher(productService, $q, $stateParams);\n                    },\n                    movie: (fetcher, $rootScope) => {\n                        let promise = fetcher();\n                        if (promise) {\n                            $rootScope.$broadcast(\n                                'message:loading',\n                                promise,\n                                undefined,\n                                'Movie'\n                            );\n                        }\n                        return promise || {};\n                    },\n                    /* @ngInject */\n                    blocked: movie => movie.isBlocked,\n                    /* @ngInject */\n                    cameFromWatchLater: $transition$ => $transition$.from().name.startsWith('ovp.watchLater')\n                },\n                /* @ngInject */\n                onEnter: function ($rootScope) {\n                    $rootScope.$broadcast('productEnter'); //Used to trigger a scroll reset\n                }\n            });\n\n        function fromStateParams(key) {\n            return ['$stateParams', function ($stateParams) {\n                return $stateParams[key];\n            }];\n        }\n\n        /* @ngInject */\n        function resolveApp($state, appOptions) {\n            var app, re = /ovp\\.([a-zA-Z0-9]*)/;\n            if ($state.current) {\n                if ($state.current.name.startsWith('search')) {\n                    app = 'search';\n                } else if (re.test($state.current.name)) {\n                    app = re.exec($state.current.name)[1];\n                    app = (appOptions[app]) ? appOptions[app] : null;\n                }\n            }\n            return app;\n        }\n\n        function createFetcher(productService, $q, $stateParams) {\n            let fetch;\n            if ($stateParams.uri) {\n                fetch = productService\n                    .withUri($stateParams.uri)\n                    .fetch;\n            } else if ($stateParams.tmsId) {\n                fetch = productService\n                    .withTmsId($stateParams.tmsId, $stateParams)\n                    .fetch;\n            } else if ($stateParams.tmsSeriesId) {\n                fetch = productService\n                    .withTmsSeriesId($stateParams.tmsSeriesId, $stateParams)\n                    .fetch;\n            } else {\n                fetch = () => $q.resolve({});\n            }\n\n            return function (waitForFetch) {\n                return fetch(waitForFetch)\n                    .then(data => {\n                        data.displayChannel = parseInt($stateParams.displayChannel) || null;\n                        if (data.seasons) {\n                            data.seasons.forEach(season =>\n                                season.episodes.forEach(episode =>\n                                    episode.displayChannel = data.displayChannel));\n                        }\n                        return data;\n                    });\n            };\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}