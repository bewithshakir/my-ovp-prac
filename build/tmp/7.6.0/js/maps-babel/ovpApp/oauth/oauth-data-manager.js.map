{"version":3,"sources":["ovpApp/oauth/oauth-data-manager.js"],"names":[],"mappings":"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","file":"ovpApp/oauth/oauth-data-manager.js","sourcesContent":["/* globals window */\n(function () {\n    'use strict';\n    angular.module('ovpApp.oauth')\n        .service('OauthDataManager', OauthDataManager)\n        .factory('StorageBuffer', StorageBufferFactory);\n    /* @ngInject */\n    function OauthDataManager(StorageBuffer, ovpStorage, oAuthConfig, deviceid, $rootScope, $timeout, config) {\n        var deviceVerifierKey = 'oauth:device_verifier',\n            expirationKey = 'oauth:expiration',\n            refreshTokenKey = 'oauth:refresh_token',\n            tokenKey = 'oauth.token',\n            tokenSecretKey = 'oauth:token_secret',\n            tokenAccountType = 'oauth:token_account_type',\n            tokenClassification = 'xoauth_classification',\n            consumer = oAuthConfig.consumerKey,\n            deviceType = 'ONEAPP-OVP',\n            secret = oAuthConfig.s,\n            buffer,\n            migrationKeys = {\n                'twctv:oauth:device_verifier': deviceVerifierKey,\n                'twctv:oauth:expiration': expirationKey,\n                'twctv:oauth:refresh_token': refreshTokenKey,\n                'twctv:oauth.token': tokenKey,\n                'twctv:oauth:token_secret': tokenSecretKey\n            };\n\n        let service = {\n            get: get,\n            set: set,\n            reset: reset\n        };\n\n        initialize();\n\n        return service;\n\n        ///////////////\n\n        function initialize() {\n            buffer = StorageBuffer.create(ovpStorage);\n            if (window.localStorage && window.localStorage.getItem) {\n                Object.keys(migrationKeys).forEach(key => {\n                    let legacyData = window.localStorage.getItem(key);\n                    if (legacyData) {\n                        buffer.setItem(migrationKeys[key], legacyData);\n                        buffer.removeItem(key);\n                    }\n                });\n            }\n        }\n\n        function get() {\n            var tempToken = buffer.getItem(tokenKey),\n                bufferCleared = buffer.clearStaleBuffer();\n\n            let currentParams = {\n                consumer: consumer,\n                deviceId: deviceid.get(),\n                deviceType: deviceType,\n                deviceVerifier: buffer.getItem(deviceVerifierKey),\n                expiration: buffer.getItem(expirationKey),\n                secret: secret,\n                refreshToken: buffer.getItem(refreshTokenKey),\n                token: buffer.getItem(tokenKey),\n                tokenSecret: buffer.getItem(tokenSecretKey),\n                accountType: buffer.getItem(tokenAccountType),\n                classification: buffer.getItem(tokenClassification)\n            };\n\n            // Cannot use profileService.isSpecU because of circular dependency\n            if (config.specU.enabled && currentParams.accountType === 'SPECU') {\n                currentParams.deviceType = 'SPECU-OVP';\n            }\n\n            if (bufferCleared && currentParams.token !== tempToken) {\n                $rootScope.$emit('Analytics:inVisitOauthRefresh', {success: true,\n                    operationType: 'refreshAuth',\n                    oAuthToken: currentParams.token,\n                    oAuthExpirationTimestamp: Number(currentParams.expiration)\n                });\n            }\n            return currentParams;\n        }\n\n        function set(data) {\n            if (data.hasOwnProperty('deviceVerifier')) {\n                buffer.setItem(deviceVerifierKey, data.deviceVerifier);\n            }\n\n            if (data.hasOwnProperty('expiration')) {\n                // data.expiration -= 1000 * ((60 * 60 * 6) -30) ; //Make the key \"expire\" in 30 seconds\n                buffer.setItem(expirationKey, data.expiration);\n            }\n\n            if (data.hasOwnProperty('refreshToken')) {\n                buffer.setItem(refreshTokenKey, data.refreshToken);\n            }\n\n            if (data.hasOwnProperty('token')) {\n                buffer.setItem(tokenKey, data.token);\n                //Make sure we also have a refresh token, otherwise its just a temporary (temp doesnt return refresh)\n                if (data.hasOwnProperty('refreshToken')) {\n                    $timeout(function () {\n                        $rootScope.$broadcast('OauthManager:tokenAcquired', data.token);\n                    });\n                }\n            }\n\n            if (data.hasOwnProperty('tokenSecret')) {\n                buffer.setItem(tokenSecretKey, data.tokenSecret);\n            }\n\n            if (data.hasOwnProperty('accountType')) {\n                buffer.setItem(tokenAccountType, data.accountType);\n            }\n\n            if (data.hasOwnProperty('classification')) {\n                buffer.setItem(tokenClassification, data.classification);\n            }\n        }\n\n        function reset() {\n            buffer.removeItem(expirationKey);\n            buffer.removeItem(refreshTokenKey);\n            buffer.removeItem(tokenKey);\n            buffer.removeItem(tokenSecretKey);\n            buffer.removeItem(deviceVerifierKey);\n            buffer.removeItem(tokenAccountType);\n            buffer.removeItem(tokenClassification);\n        }\n    }\n\n\n    function StorageBufferFactory() {\n        return {\n            create: function (storageObject) {\n                return new StorageBuffer(storageObject);\n            }\n        };\n\n        ///\n\n        function StorageBuffer(storageObject) {\n\n            this.data = {};\n            this.storage = storageObject;\n            this.updateTime = Date.now();\n\n            this.setItem = function (key, item) {\n                this.data[key] = item;\n                if (this.storage) {\n                    this.storage.setItem(key, item);\n                    this.updateTime = Date.now();\n                    this.storage.setItem('_lastWriteTime', this.updateTime);\n                }\n            };\n\n            this.getItem = function (key) {\n                if (this.storage && !this.data[key]) {\n                    this.data[key] = this.storage.getItem(key);\n                }\n                return this.data[key];\n            };\n\n            this.removeItem = function (key) {\n                delete this.data[key];\n                if (this.storage) {\n                    this.storage.removeItem(key);\n                    this.updateTime = Date.now();\n                    this.storage.setItem('_lastWriteTime', this.updateTime);\n                }\n            };\n\n            this.clearStaleBuffer = function () {\n                var cleared = false;\n                if (this.storage) {\n                    let lastWriteTime = this.storage.getItem('_lastWriteTime');\n                    if (lastWriteTime && lastWriteTime > this.updateTime) {\n                        this.updateTime = lastWriteTime;\n                        this.data = {};\n                        cleared = true;\n                    }\n                }\n                return cleared;\n            };\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}