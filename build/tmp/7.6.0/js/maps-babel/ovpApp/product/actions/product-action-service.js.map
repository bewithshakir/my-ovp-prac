{"version":3,"sources":["ovpApp/product/actions/product-action-service.js"],"names":[],"mappings":"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","file":"ovpApp/product/actions/product-action-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.product.productActionService', [\n        'ui.router',\n        'ovpApp.services.bookmark',\n        'ovpApp.services.cdvr',\n        'ovpApp.services.flickTo',\n        'ovpApp.services.stbService',\n        'ovpApp.services.errorCodes',\n        'ovpApp.rdvr',\n        'ovpApp.rdvr.rdvrService',\n        'ovpApp.rdvr.scheduled',\n        'ovpApp.components.templatePopup.editScheduled',\n        'ovpApp.components.recordCdvrSeries',\n        'ovpApp.components.modal',\n        'ovpApp.components.alert',\n        'ovpApp.product.service',\n        'ovpApp.product.rental',\n        'ovpApp.product.rental-service',\n        'ovpApp.services.dateFormat',\n        'ovpApp.services.channel',\n        'ovpApp.remotePlayer',\n        'ovpApp.dataDelegate'\n    ])\n    .factory('productActionService', productActionService);\n\n    /* @ngInject */\n    function productActionService(BookmarkService, actionTypeMap, $state, cdvrService, flickToService,\n        ChannelService, $rootScope, stbService, rdvrService, productService, $log, CONFIRM_BUTTON_TYPE,\n        modal, dateFormat, recordingViewModelDefinition, remotePlayService, alert, config, $q, errorCodesService,\n        messages) {\n\n        const service = {\n            executeAction,\n            getActionIcon,\n            getActionLabel,\n            getActionHoverText,\n            getOtherWaysActionLabel,\n            getOtherWaysToWatchSrOnlyLabel\n        };\n\n        return service;\n\n        /////////////////////\n\n        function executeAction(action, asset) {\n            let stream = null;\n            if (asset.streamList && angular.isDefined(action.streamIndex)) {\n                stream = asset.streamList[action.streamIndex];\n            }\n            $rootScope.$broadcast('product:action', action, asset, stream);\n\n            switch (action.actionType) {\n                case actionTypeMap.addToWatchList.id:\n                    BookmarkService.addToWatchLater(asset);\n                    action.actionType = actionTypeMap.removeFromWatchList.id;\n                    break;\n                case actionTypeMap.removeFromWatchList.id:\n                    BookmarkService.deleteFromWatchLater(asset);\n                    action.actionType = actionTypeMap.addToWatchList.id;\n                    break;\n                case actionTypeMap.watchOnDemandIP.id:\n                case actionTypeMap.resumeOnDemandIP.id:\n\n                    if (stream.streamProperties.ondemandStreamType === 'TOD') {\n                        $state.go('ovp.ondemand.playProduct', {\n                            productID: stream.streamProperties.providerAssetID,\n                            streamIndex: action.streamIndex\n                        });\n                    } else {\n                        $state.go('ovp.ondemand.playProduct',\n                            {productID: stream.streamProperties.providerAssetID});\n                    }\n                    break;\n                case actionTypeMap.watchLiveIP.id:\n                    $state.go('ovp.livetv', {tmsid: stream.streamProperties.tmsGuideServiceId});\n                    break;\n                case actionTypeMap.resumeOnDemandOnTv.id:\n                case actionTypeMap.watchOnDemandOnTv.id:\n                    let bookmarkSeconds = 0;\n                    if (stream.streamProperties &&\n                        stream.streamProperties.bookmark &&\n                        stream.streamProperties.bookmark.playMarkerSeconds) {\n                        bookmarkSeconds = stream.streamProperties.bookmark.playMarkerSeconds;\n                    }\n\n                    let ipAction = asset.actions.find((a) => {\n                        return a.actionType === actionTypeMap.watchOnDemandIP.id ||\n                            a.actionType === actionTypeMap.resumeOnDemandIP.id;\n                    });\n\n                    watchOnTv(asset, ipAction, action, (stb) => {\n                        return flickToService.flickToVodQam(stream.streamProperties.providerAssetID,\n                            bookmarkSeconds, stb);\n                    });\n                    break;\n                case actionTypeMap.watchLiveOnTv.id:\n\n                    let currentStb;\n                    stbService.getCurrentStbPromise().then(stb => {\n                        currentStb = stb;\n                    });\n                    flickToService.tuneToChannel(asset.streamList[action.streamIndex]).then(() => {\n                        let message = asset.title + (currentStb.name ? ' on ' + currentStb.name : '');\n                        $rootScope.$broadcast('message:growl', 'Playing: ' + message);\n                    }, error => {\n                        $log.error(error.message, error);\n                        $rootScope.$broadcast('message:growl', error.errorMessage + ' (' + error.errorCode + ')');\n                    });\n                    break;\n                case actionTypeMap.playRecordingOnTv.id:\n                    let recording = {\n                        mystroServiceId: stream.streamProperties.mystroServiceID,\n                        tmsProgramId: asset.tmsProgramIds[0],\n                        startTime: Math.floor(stream.streamProperties.startTime / 1000)\n                    };\n\n                    watchOnTv(asset, null, action, (stb) => {\n                        return rdvrService.playCompletedRecording(stb, recording);\n                    });\n                    break;\n                case actionTypeMap.editRecording.id:\n                case actionTypeMap.scheduleRecording.id:\n                case actionTypeMap.cancelRecording.id:\n                    stbService.getCurrentStbPromise().then(currentStb => {\n                        if (currentStb.simpleRecordingsOnly) {\n                            showSimpleScheduleRecordingPopup(currentStb, asset, action);\n                        } else {\n                            showScheduleRecordingPopup(asset, action);\n                        }\n                    });\n                    break;\n                case actionTypeMap.scheduleSeriesRecording.id:\n                case actionTypeMap.editSeriesRecording.id:\n                case actionTypeMap.cancelSeriesRecording.id:\n                    stbService.getCurrentStbPromise().then(currentStb => {\n                        if (currentStb.simpleRecordingsOnly) {\n                            showSimpleSeriesRecordingPopup(currentStb, asset, action);\n                        } else {\n                            showEditSeriesRecordingPopup(asset, action);\n                        }\n                    });\n                    break;\n                case actionTypeMap.deleteRecording.id:\n\n                    stbService.getCurrentStbPromise().then(currentStb => {\n                        let stream = asset.streamList[action.streamIndex];\n                        if (stream && stream.streamProperties) {\n                            let recording = recordingViewModelDefinition.createInstance({\n                                mystroServiceId: stream.streamProperties.mystroServiceID,\n                                tmsProgramId: asset.tmsProgramIds[0],\n                                startUnixTimestampSeconds: Math.floor(stream.streamProperties.startTime / 1000)\n                            });\n\n                            let message = asset.title + (currentStb.name ? ' on ' + currentStb.name : '');\n                            rdvrService.deleteRecordings(currentStb, recording).then(() => {\n                                $rootScope.$broadcast('message:growl', 'Recording deleted: ' + message);\n                                $rootScope.$broadcast('update-dvr', recording, asset, action);\n                            }, (error) => {\n                                $log.error(error);\n                                $rootScope.$broadcast('message:growl', 'Unable to delete recording ' + message);\n                                $rootScope.$broadcast('update-dvr', recording, asset, action);\n                            });\n                        }\n                    });\n                    break;\n                case actionTypeMap.cdvrPlayRecording.id:\n                case actionTypeMap.cdvrResumeRecording.id:\n\n                    $state.go('ovp.ondemand.playCdvr', {\n                            isCdvr: true,\n                            tmsProgramID: stream.streamProperties.cdvrRecording.tmsProgramId,\n                            streamIndex: action.streamIndex\n                        });\n                    break;\n                case actionTypeMap.cdvrScheduleRecording.id:\n                    showCdvrScheduleRecordingConfirmation(asset, action, stream);\n                    break;\n                case actionTypeMap.cdvrScheduleSeriesRecording.id:\n                    showRecordCdvrSeriesPopup(asset, action);\n                    break;\n                case actionTypeMap.cdvrCancelSeriesRecording.id:\n                    showCdvrCancelSeriesRecordingConfirmation(asset, action);\n                    break;\n                case actionTypeMap.cdvrCancelRecording.id:\n                    showCdvrCancelRecordingConfirmation(asset, action, stream);\n                    break;\n                case actionTypeMap.cdvrDeleteRecording.id:\n                    showCdvrDeleteRecordingConfirmation(asset, action);\n                    break;\n                case actionTypeMap.cdvrScheduleSeriesRecordingNotAvailable.id:\n                case actionTypeMap.cdvrScheduleRecordingNotAvailable.id:\n                    // UNITSTR - MODAL_RECORD_INACTIVE\n                    $rootScope.$broadcast('message:growl', 'This program is not recordable by your Cloud DVR service');\n                    break;\n                case actionTypeMap.otherWaysToWatch.id:\n                    showOtherWaysToWatch(asset, action);\n                    break;\n                case actionTypeMap.rentOnDemand.id:\n                    showRentalPopup(asset, action);\n                    break;\n                case actionTypeMap.watchTrailerIP.id:\n                    $state.go('ovp.ondemand.playProduct',\n                        {\n                            productID: stream.streamProperties.providerAssetID,\n                            trailer: true,\n                            streamIndex: stream.index\n                        });\n                    break;\n                default:\n                    $log.debug('action not implemented:', action.actionType);\n\n            }\n        }\n\n        /* Watch On TV Picker */\n        function watchOnTv(asset, ipAction, tvAction, callback) {\n            if (config.remoteSessionControlEnabled) {\n                modal.open({\n                    component: 'stb-picker',\n                    windowClass: 'ovp-watch-on-tv-picker-container',\n                    showCloseIcon: false,\n                    ariaDescribedBy: 'picker-description',\n                    ariaLabelledBy: 'picker-label',\n                    resolve: {\n                        stbs: stbService.getSTBs()\n                            .then(stbs => stbs.filter(s => s.flickable)),\n                        onSelect: () => callback,\n                        title: () => 'Select TV to watch'\n                    }\n                }).result.then(stb => {\n                    let options = {stb, asset, ipAction, tvAction};\n                    // Store remote play related data\n                    remotePlayService.remotePlay(options);\n\n                    // Analytics (switchScreen)\n                    $rootScope.$broadcast('Analytics:switchScreen', {\n                        switchScreenId: stb.macAddress\n                    });\n\n                    $state.go('ovp.playRemote', options);\n                }, (val) => {\n                    let {error, stb} = val;\n                    if (error && stb) {\n                        $log.error(error);\n\n                        let errorCode = 'WCM-1001';\n                        let message = errorCodesService.getAlertForCode(errorCode, {\n                            TITLE: asset.title,\n                            STB: stb.name || undefined\n                        });\n\n                        // Analytics (switchScreen)\n                        $rootScope.$broadcast('Analytics:switchScreen', {\n                            switchScreenId: stb ? stb.macAddress : 'unknown',\n                            error: error,\n                            errorCode: errorCode,\n                            errorMessage: message\n                        });\n\n                        return alert.open({\n                            message: message.message,\n                            buttonText: message.buttonText\n                        });\n                    }\n                });\n            } else {\n                stbService.getCurrentStbPromise().then(currentStb => {\n                    callback(currentStb).then(() => {\n                        let message = messages.getMessageForCode('MSG-9088', {\n                            TITLE: asset.title,\n                            STB: currentStb.name || undefined\n                        });\n                        $rootScope.$broadcast('message:growl', message);\n\n                        // Analytics (switchScreen)\n                        $rootScope.$broadcast('Analytics:switchScreen', {\n                            switchScreenId: currentStb.macAddress\n                        });\n\n                    }, error => {\n                        $log.error(error);\n                        let errorCode = 'WCM-1001';\n                        let message = errorCodesService.getMessageForCode(errorCode, {\n                            TITLE: asset.title,\n                            STB: currentStb.name || undefined\n                        });\n                        $rootScope.$broadcast('message:growl', message);\n\n                        // Analytics (switchScreen)\n                        $rootScope.$broadcast('Analytics:switchScreen', {\n                            switchScreenId: currentStb ? currentStb.macAddress : 'unknown',\n                            errorCode: errorCode,\n                            errorMessage: message\n                        });\n                    });\n                });\n            }\n        }\n\n        /**\n         * Format the information required to display the recording popup.\n         */\n        function showEditSeriesRecordingPopup(asset, action) {\n            let recordingStream, recordingEpisode, recordingSeason, recordingSettings;\n\n            if (action.seasonIndex !== undefined &&\n                action.episodeIndex !== undefined &&\n                action.streamIndex !== undefined) {\n                recordingSeason = asset.seasons[action.seasonIndex];\n                recordingEpisode = recordingSeason.episodes[action.episodeIndex];\n                recordingStream = recordingEpisode.streamList[action.streamIndex];\n\n                recordingSettings = rdvrService.getSeriesRecordingSettings({\n                    series: asset,\n                    episode: recordingEpisode,\n                    stream: recordingStream,\n                    isNew: (action.actionType !== 'editSeriesRecording')\n                });\n\n                modal.open({\n                    component: 'EditScheduled',\n                    resolve: {\n                        scheduledRecording: recordingSettings,\n                        seriesOnly: true\n                    }\n                }).result.then(\n                    (result) => {\n                        if (result && result.reason === 'update-schedule') {\n                            $rootScope.$broadcast('message:growl', messages.getMessageForCode('MSG-9089'));\n                        } else if (result && result.reason === 'cancel-schedule') {\n                            $rootScope.$broadcast('message:growl', messages.getMessageForCode('MSG-9090'));\n                        }\n\n                        if (result && result.recording) {\n                            $rootScope.$broadcast('update-dvr', result.recording, asset, action);\n                        }\n                    }\n                );\n            } else {\n                $log.error('Unable to determine the correct stream to use when recording action:', action);\n            }\n        }\n\n        // Simple scheduled recording popup\n        function showSimpleScheduleRecordingPopup(stb, asset, action) {\n            // For legacy user we will always show recording dialog, user will not be able to cancel or edit\n            let recordingSettings, displayDate;\n            recordingSettings = rdvrService.getEventRecordingSettings({\n                asset: asset,\n                stream: asset.streamList[action.streamIndex],\n                isNew: true\n            });\n\n            displayDate = dateFormat.absolute.expanded.atTime(new Date\n               (parseInt(recordingSettings.startTime * 1000)));\n\n            const options = {\n                okLabel: CONFIRM_BUTTON_TYPE.YES,\n                cancelLabel: CONFIRM_BUTTON_TYPE.NO,\n                preOkMessage: messages.getMessageForCode('MSG-9092', {\n                    TITLE: asset.title,\n                    DATE: displayDate,\n                    CHANNEL: recordingSettings.displayChannel\n                }),\n                postOkMessage: messages.getMessageForCode('MSG-9091', {\n                    TITLE: asset.title\n                }),\n                okAction: () => {\n                    return rdvrService.scheduleRecording(stb, recordingSettings);\n                },\n                getErrorString: () => {\n                    // UNITSTR - RDVR_ERROR_RECORDING_FAIL\n                    return errorCodesService.getMessageForCode('WCM-1400', {\n                        TITLE: asset.title\n                    });\n                }\n            };\n\n            modal.open({\n                component: 'confirm',\n                resolve: {options}\n            });\n        }\n\n        function showScheduleRecordingPopup(asset, action) {\n            let recordingSettings;\n            let stream = asset.streamList[action.streamIndex];\n            const isNew = (action.actionType !== 'editRecording' && action.actionType !== 'cancelRecording');\n            recordingSettings = rdvrService.getEventRecordingSettings({\n                asset: asset,\n                stream: stream,\n                isNew: isNew,\n                settings: stream && stream.streamProperties && stream.streamProperties.rdvrRecording &&\n                stream.streamProperties.rdvrRecording.settings\n            });\n\n            modal.open({\n                component: 'EditScheduled',\n                resolve: {\n                    scheduledRecording: recordingSettings,\n                    seriesOnly: false\n                }\n            }).result.then(\n                (result) => {\n                    if (result && result.reason === 'update-schedule') {\n                        $rootScope.$broadcast('message:growl', messages.getMessageForCode('MSG-9089'));\n                    } else if (result && result.reason === 'cancel-schedule') {\n                        $rootScope.$broadcast('message:growl', messages.getMessageForCode('MSG-9090'));\n                    }\n\n                    if (result.recording) {\n                        $rootScope.$broadcast('update-dvr', result.recording, asset, action);\n                    }\n                }\n            );\n        }\n\n        // Simple series recording popup\n        function showSimpleSeriesRecordingPopup(stb, asset, action) {\n            // For legacy user we will always show series recording dialog, user will not be able to cancel or edit\n            let recordingStream, recordingEpisode, recordingSeason, recordingSettings, displayDate;\n\n            if (action.seasonIndex !== undefined &&\n                action.episodeIndex !== undefined &&\n                action.streamIndex !== undefined) {\n                try {\n                    recordingSeason = asset.seasons[action.seasonIndex];\n                    recordingEpisode = recordingSeason.episodes[action.episodeIndex];\n                    recordingStream = recordingEpisode.streamList[action.streamIndex];\n                    recordingSettings = rdvrService\n                        .getSeriesRecordingSettings({\n                            series: asset,\n                            episode: recordingEpisode,\n                            stream: recordingStream,\n                            isNew: (action.actionType !== 'editSeriesRecording')\n                        });\n                    displayDate = dateFormat.absolute.expanded.atTime(new Date\n                       (parseInt(recordingSettings.startTime * 1000)));\n\n                    const options = {\n                        okLabel: CONFIRM_BUTTON_TYPE.YES,\n                        cancelLabel: CONFIRM_BUTTON_TYPE.NO,\n                        preOkMessage: messages.getMessageForCode('MSG-9092', {\n                            TITLE: asset.title,\n                            DATE: displayDate,\n                            CHANNEL: recordingSettings.displayChannel\n                        }),\n                        postOkMessage: messages.getMessageForCode('MSG-9091', {\n                            TITLE: asset.title\n                        }),\n                        okAction: () => {\n                            return rdvrService.scheduleRecording(stb, recordingSettings);\n                        },\n                        getErrorString: () => {\n                            // UNITSTR - RDVR_ERROR_RECORDING_FAIL\n                            return errorCodesService.getMessageForCode('WCM-1400', {\n                                TITLE: asset.title\n                            });\n                        }\n                    };\n\n                    modal.open({\n                        component: 'confirm',\n                        resolve: {options}\n                    });\n                } catch (e) {\n                    $rootScope.$broadcast('message:growl',\n                        'We’re sorry, we were unable to schedule your recording. Please try again later.');\n                }\n            }\n        }\n\n        function showCdvrScheduleRecordingConfirmation(asset, action, stream) {\n            const allChans = stream.streamProperties && stream.streamProperties.allChannelNumbers;\n            const chanToRecord = allChans && allChans.length &&\n                (allChans.includes(asset.displayChannel) ? asset.displayChannel : allChans[0]);\n            const title = asset.seriesTitle || asset.title;  // Prefer series title if available\n\n            const options = {\n                okLabel: CONFIRM_BUTTON_TYPE.YES,\n                cancelLabel: CONFIRM_BUTTON_TYPE.NO,\n                preOkMessage: messages.getMessageForCode('MSG-9092', {\n                    TITLE: title,\n                    DATE: productService.getCdvrDateText(asset, action),\n                    CHANNEL: chanToRecord || undefined\n                }),\n                postOkMessage: messages.getMessageForCode('MSG-9091', {\n                    TITLE: asset.title\n                }),\n                okAction: () => {\n\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToRecord',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'confirm',\n                        modalName: 'cdvrConfirmRecord',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n\n                    return cdvrService.scheduleRecording(action, stream)\n                        .then(() => {\n                            $rootScope.$broadcast(\n                                'update-dvr',\n                                {} /* no schedule options at this point */,\n                                asset, action);\n\n                        }, (err) => {\n                            // Analytics\n                            $rootScope.$broadcast('Analytics:cdvr-record-failed', asset, action, {},\n                                {\n                                    error: err,\n                                    errorCode: 'WCD-1400',\n                                    errorMessage: errorCodesService.getMessageForCode('WCD-1400', {\n                                        TITLE: asset.title\n                                    })\n                                });\n                            return $q.reject();\n                        });\n                },\n                cancelAction: () => {\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToRecord',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'cancel',\n                        modalName: 'cdvrConfirmRecord',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n                },\n                getErrorString: () => {\n                    // UNITSTR - CDVR_ERROR_RECORDING_FAIL\n                    return errorCodesService.getMessageForCode('WCM-1400', {\n                        TITLE: title\n                    });\n                },\n                ariaLabel: 'Record ' + (asset.isEpisode ? 'episode,' : 'movie,'),\n                ariaDescription: messages.getMessageForCode('MSG-9092', {\n                    TITLE: title,\n                    DATE: productService.getCdvrDateText(asset, action),\n                    CHANNEL: chanToRecord || undefined\n                })\n            };\n\n            modal.open({\n                component: 'confirm',\n                ariaDescribedBy: 'descriptionBlockText',\n                ariaLabelledBy: 'labelText',\n                resolve: {options}\n            });\n\n            // Analytics\n            $rootScope.$emit('Analytics:modal-view', {\n                context: 'cdvr',\n                modalName: 'cdvrConfirmRecord',\n                featureType: 'cdvrRequestToRecord',\n                featureStepName: 'cdvrConfirmRecord',\n                featureCurrentStep: 2,\n                modalType: 'options',\n                modalText: options.preOkMessage\n            });\n        }\n\n        function showCdvrCancelSeriesRecordingConfirmation(asset, action) {\n            const options = {\n                okLabel: CONFIRM_BUTTON_TYPE.YES,\n                cancelLabel: CONFIRM_BUTTON_TYPE.NO,\n                preOkMessage: messages.getMessageForCode('MSG-9093'),\n                postOkMessage: messages.getMessageForCode('MSG-9094', {\n                    TITLE: asset.title\n                }),\n                okAction: () => {\n\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToCancel',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'confirm',\n                        modalName: 'cdvrConfirmCancellation',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n\n                    return cdvrService.cancelSeriesRecording(action)\n                        .then(() => {\n                            $rootScope.$broadcast(\n                                'update-dvr',\n                                {} /* no schedule options at this point */,\n                                asset, action);\n                        }, (err) => {\n\n                            let errorCode = 'WCD-1003';\n                            let message = errorCodesService.getMessageForCode(errorCode);\n\n                            // Analytics\n                            $rootScope.$broadcast(\n                                'Analytics:cdvr-cancel-recording-failed',\n                                asset, action, {},  {\n                                    error: err,\n                                    errorCode: errorCode,\n                                    errorMessage: message\n                                });\n                            return $q.reject();\n                        });\n                },\n                ariaLabel: 'Cancel recording',\n                ariaDescription: 'Are you sure you want to cancel all recordings for this series?',\n\n                cancelAction: () => {\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToCancel',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'cancel',\n                        modalName: 'cdvrConfirmCancellation',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n                },\n                getErrorString: () => {\n                    // UNISTR - CDVR_ERROR_CANCEL_RECORDING_FAIL\n                    return errorCodesService.getMessageForCode('WCM-1400', {\n                        TITLE: asset.title\n                    });\n                }\n            };\n\n            modal.open({\n                component: 'confirm',\n                ariaDescribedBy: 'descriptionBlockText',\n                ariaLabelledBy: 'labelText',\n                resolve: {options}\n            });\n\n            // Analytics\n            $rootScope.$emit('Analytics:modal-view', {\n                context: 'cdvr',\n                featureType: 'cdvrRequestToCancel',\n                featureStepName: 'cdvrConfirmCancellation',\n                featureCurrentStep: 2,\n                modalName: 'cdvrConfirmCancellation',\n                modalType: 'options',\n                modalText: options.preOkMessage\n            });\n        }\n\n        function showCdvrCancelRecordingConfirmation(asset, action, stream) {\n            const title = asset.title;\n            const allChans = stream.streamProperties && stream.streamProperties.allChannelNumbers;\n            const chanToRecord = allChans && allChans.length &&\n                (allChans.includes(asset.displayChannel) ? asset.displayChannel : allChans[0]);\n\n            const options = {\n                okLabel: CONFIRM_BUTTON_TYPE.YES,\n                cancelLabel: CONFIRM_BUTTON_TYPE.NO,\n                preOkMessage: messages.getMessageForCode('MSG-9095', {\n                    TITLE: title,\n                    DATE: productService.getCdvrDateText(asset, action),\n                    CHANNEL: chanToRecord || undefined\n                }),\n                postOkMessage: messages.getMessageForCode('MSG-9094', {\n                    TITLE: asset.title\n                }),\n                okAction: () => {\n\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToCancel',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'confirm',\n                        modalName: 'cdvrConfirmCancellation',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n\n                    return cdvrService.cancelRecording(action)\n                        .then(() => {\n                            $rootScope.$broadcast(\n                                'update-dvr',\n                                {} /* no schedule options at this point */,\n                                asset, action);\n                        }, (err) => {\n\n                            let errorCode = 'WCM-1003';\n                            let message = errorCodesService.getAlertForCode(errorCode);\n\n                            // Analytics\n                            $rootScope.$broadcast(\n                                'Analytics:cdvr-cancel-recording-failed',\n                                asset, action, {},  {\n                                    error: err,\n                                    errorCode: errorCode,\n                                    errorMessage: message\n                                });\n\n                            return $q.reject();\n                        });\n                },\n                ariaLabel: 'Cancel recording,',\n                ariaDescription: 'Would you like to cancel '  + title + ' on ' +\n                    productService.getCdvrDateText(asset, action) +\n                    ((chanToRecord !== undefined) ?  ' on Channel ' + chanToRecord : '') +\n                    ', ' + asset.network.callsign + '?',\n\n                cancelAction: () => {\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToCancel',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'cancel',\n                        modalName: 'cdvrConfirmCancellation',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n                },\n                getErrorString: () => {\n                    // UNISTR - CDVR_ERROR_CANCEL_RECORDING_FAIL\n                    return errorCodesService.getMessageForCode('WCM-1400', {\n                        TITLE: asset.title\n                    });\n                }\n            };\n\n            modal.open({\n                component: 'confirm',\n                ariaDescribedBy: 'descriptionBlockText',\n                ariaLabelledBy: 'labelText',\n                resolve: {options}\n            });\n\n            // Analytics\n            $rootScope.$emit('Analytics:modal-view', {\n                context: 'cdvr',\n                featureType: 'cdvrRequestToCancel',\n                featureStepName: 'cdvrConfirmCancellation',\n                featureCurrentStep: 2,\n                modalName: 'cdvrConfirmCancellation',\n                modalType: 'options',\n                modalText: options.preOkMessage\n            });\n        }\n\n        function showCdvrDeleteRecordingConfirmation(asset, action) {\n            const options = {\n                okLabel: CONFIRM_BUTTON_TYPE.YES,\n                cancelLabel: CONFIRM_BUTTON_TYPE.NO,\n                preOkMessage: messages.getMessageForCode('MSG-9096', {\n                    TITLE: asset.title\n                }),\n                postOkMessage: messages.getMessageForCode('MSG-9097', {\n                    TITLE: asset.title\n                }),\n                okAction: () => {\n\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToDelete',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'confirm',\n                        modalName: 'cdvrConfirmDeletion',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n\n                    return cdvrService.deleteRecording(action)\n                        .then(() => {\n                            $rootScope.$broadcast(\n                            'update-dvr',\n                            {} /* no schedule options at this point */,\n                            asset, action);\n                        }, (err) => {\n\n                            let errorCode = 'WCD-1012';\n                            let message = errorCodesService.getMessageForCode(errorCode);\n\n                            // Analytics\n                            $rootScope.$broadcast('Analytics:cdvr-delete-recording-failed',\n                                asset, action, {\n                                    error: err,\n                                    errorCode: errorCode,\n                                    errorMessage: message\n                                });\n\n                            return $q.reject();\n                        });\n                },\n                ariaLabel: 'Delete recording,',\n                ariaDescription: 'Would you like to delete ' + asset.title + '?',\n\n                cancelAction: () => {\n                    // Analytics\n                    $rootScope.$emit('Analytics:select', {\n                        context: 'cdvr',\n                        featureType: 'cdvrRequestToDelete',\n                        featureCurrentStep: 3,\n                        elementStandardizedName: 'cancel',\n                        modalName: 'cdvrConfirmDeletion',\n                        modalType: 'options',\n                        asset: asset,\n                        action: action\n                    });\n                },\n                getErrorString: () => {\n                    // UNISTR - CDVR_ERROR_DELETE_FAIL\n                    return errorCodesService.getMessageForCode('WCM-1012');\n                }\n            };\n\n            modal.open({\n                component: 'confirm',\n                ariaDescribedBy: 'descriptionBlockText',\n                ariaLabelledBy: 'labelText',\n                resolve: {options}\n            });\n\n            // Analytics\n            $rootScope.$emit('Analytics:modal-view', {\n                context: 'cdvr',\n                featureType: 'cdvrRequestToDelete',\n                featureStepName: 'cdvrConfirmDeletion',\n                featureCurrentStep: 2,\n                modalName: 'cdvrConfirmDeletion',\n                modalType: 'options',\n                modalText: options.preOkMessage\n            });\n        }\n\n        /**\n         * Format the information required to display the recording popup.\n         */\n        function showRecordCdvrSeriesPopup(asset, action) {\n            let options = {\n                asset: asset,\n                action: action,\n                preferredTmsGuideId: asset.cdvrChannelPickerTmsGuideIds[0],\n                channels: ChannelService.getChannels() // to cache channels for screen reader\n            };\n\n            if (action.seasonIndex !== undefined &&\n                action.episodeIndex !== undefined &&\n                action.streamIndex !== undefined) {\n                const recordingSeason = asset.seasons[action.seasonIndex];\n                const recordingEpisode = recordingSeason.episodes[action.episodeIndex];\n                const recordingStream = recordingEpisode.streamList[action.streamIndex];\n                options.preferredTmsGuideId = recordingStream.streamProperties.tmsGuideServiceId;\n            }\n\n            modal.open({\n                component: 'recordCdvrSeries',\n                ariaLabelledBy: 'record-cdvr-series-title',\n                ariaDescribedBy: 'record-cdvr-series-description',\n                resolve: options\n            });\n\n            // Analytics\n            $rootScope.$emit('Analytics:modal-view', {\n                context: 'cdvr',\n                modalName: 'cdvrConfirmRecord',\n                modalType: 'options',\n                modalText: options.preOkMessage,\n                featureType: 'cdvrRequestToRecord',\n                featureStepName: 'cdvrConfirmRecord',\n                featureCurrentStep: 2,\n                elementStandardizedName: 'confirm',\n                asset: asset,\n                action: action\n            });\n        }\n\n        function showOtherWaysToWatch(asset) {\n            modal.open({\n                size: 'xl',\n                component: 'otherWaysPopup',\n                ariaLabelledBy: 'ariaLabelledByText',\n                resolve: {asset}\n            });\n        }\n\n        function showRentalPopup(asset, action) {\n            const options = {\n                asset: asset,\n                action: action\n            };\n\n            let modalPromise = modal.open({\n                component: 'productRental',\n                ariaLabelledBy: 'product-rental-title',\n                ariaDescribedBy: 'product-rental-description',\n                resolve: {options}\n            });\n\n            modalPromise.result.then(function () {\n                // Do nothing; pressing the confirm or cancel buttons is handled elsewhere.\n            }, function () {\n                // Modal dismissed, rejecting the promise.\n                try {\n                    // Analytics: user cancelled confirmation dialog by clicking\n                    // the 'x' or clicking outside the modal.\n                    $rootScope.$broadcast('Analytics:select', {\n                        source: 'productRentalConfirmDialog',\n                        ignoreIfPurchaseStopIsSeen: true,\n                        category: 'navigation',\n                        context: 'tvodFlow',\n                        featureStepName: 'rentConfirmation',\n                        pageName: 'rentConfirmation',\n                        elementUiName: 'cancel',\n                        pageSectionName: 'conversionArea',\n                        elementStandardizedName: 'cancel',\n                        triggeredBy: 'user',\n                        operationType: 'buttonClick',\n                        featureCurrentStep: 4\n                    });\n                    $rootScope.$emit('Analytics:tvod-purchase-stop', { // cancelled\n                        source: 'productRentalConfirmDialog',\n                        ignoreIfPurchaseStopIsSeen: true,\n                        context: 'tvodFlow',\n                        success: false,\n                        triggeredBy: 'user',\n                        asset: asset,\n                        featureCurrentStep: 5\n                    });\n                } catch (ex) {\n                    $log.error('Error', ex);\n                }\n            });\n        }\n\n        function getActionIcon(asset, action) {\n            return getParam(asset, action, 'icon');\n        }\n\n        function getActionLabel(asset, action) {\n            return getParam(asset, action, 'label');\n        }\n\n        function getActionHoverText(asset, action) {\n            return getParam(asset, action, 'hoverText');\n        }\n\n        function getOtherWaysToWatchSrOnlyLabel(asset, action) {\n            return getParam(asset, action, 'otherWaysToWatchSrOnlyLabel');\n        }\n\n        function getOtherWaysActionLabel(asset, action) {\n            let label = getParam(asset, action, 'otherWaysLabel');\n            if (label === undefined) {\n                label = getActionLabel(asset, action);\n            }\n\n            return label;\n        }\n\n        function getParam(asset, action, parameter) {\n            if (action && action.actionType && actionTypeMap[action.actionType]) {\n                let val = actionTypeMap[action.actionType][parameter];\n                if (angular.isFunction(val) && asset) {\n                    val = val(asset, action);\n                }\n                return val;\n            }\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}