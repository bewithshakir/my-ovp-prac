{"version":3,"sources":["ovpApp/directives/arrow-nav.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BA,QACK,OAAQ,8BAA8B,IACtC,UAAW,YAAY;;IAE5B,IAAM,OAAO,EAAC,MAAM,IAAI,IAAI,IAAI,OAAO,IAAI,MAAM,IAAI,KAAK;;;IAG1D,SAAS,SAAS,UAAU;QACxB,OAAO;YACH,UAAU;YACV,MAAM,SAAA,KAAU,OAAO,IAAI,OAAO;gBAC9B,IAAI,oBAAiB;gBACrB,IAAM,UAAU,MAAM,mBAAmB;;gBAEzC,SAAS,gBAAgB,GAAG;gBAC5B,IAAI,MAAM,SAAS;oBACf,MAAM,OAAO,MAAM,SAAS,YAAM;wBAC9B,SAAS,gBAAgB,GAAG;;;;gBAIpC,MAAM,IAAI,YAAY,YAAY;oBAC9B,IAAI,mBAAmB;wBACnB,kBAAkB,IAAI,WAAW;;;;gBAIzC,SAAS,iBAAiB;oBACtB,oBAAoB,QAAQ,QAAQ,GAAG,IAAI,KAAK,MAAM,MAAM;oBAC5D,KAAK,IAAI,IAAI,GAAI,IAAI,kBAAkB,QAAQ,KAAK;wBAChD,kBAAkB,GAAG,aAAa,YAAY,MAAM,IAAI,MAAM;;;oBAGlE,kBAAkB,IAAI,WAAW;oBACjC,kBAAkB,GAAG,WAAW;;;gBAGpC,SAAS,aAAa,OAAO;oBACzB,IAAI,MAAM,YAAY,KAAK,SAAS,MAAM,YAAY,KAAK,MAAM;wBAC7D,IAAM,QAAQ,UAAU,MAAM;wBAC9B,IAAI,kBAAkB,QAAQ,IAAI;4BAC9B,kBAAkB,QAAQ,GAAG;;wBAEjC,MAAM;wBACN,MAAM;2BACH,IAAI,MAAM,YAAY,KAAK,QAAQ,MAAM,YAAY,KAAK,IAAI;wBACjE,IAAM,QAAQ,UAAU,MAAM;wBAC9B,IAAI,kBAAkB,QAAQ,IAAI;4BAC9B,kBAAkB,QAAQ,GAAG;;wBAEjC,MAAM;wBACN,MAAM;2BACH,IAAI,MAAM,YAAY,KAAK,KAAK;wBACnC,IAAI,QAAQ,mBAAmB,OAAO;;4BAElC,kBAAkB,GAAG;;;;;;gBAMjC,SAAS,UAAU,IAAI;oBACnB,OAAO,MAAM,UAAU,QAAQ,KAAK,mBAAmB;;;;;KAKtE","file":"ovpApp/directives/arrow-nav.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * Adds arrow navigation to a list. Tab will land the user on the first element of the list, and then\n     * arrrows can be used to move within the list.\n     *\n     * usage:\n     * <div arrow-nav=\"some-class\">\n     *    <div ng-repeat=\"thing in $ctrl.things\" class=\"some-class\"></div>\n     * </div>\n     *\n     * or, to stop shift-tabs from exiting the list\n     *\n     * <div arrow-nav=\"some-class\" arrow-nav-options=\"{noShiftTabExit: true}\">\n     *    <div ng-repeat=\"thing in $ctrl.things\" class=\"some-class\"></div>\n     * </div>\n     *\n     * or, if the list is prone to changing at runtime, you must supply an ng-model\n     *\n     * <div arrow-nav=\"some-class\" ng-model=\"$ctrl.things\">\n     *    <div ng-repeat=\"thing in $ctrl.things\" class=\"some-class\"></div>\n     * </div>\n     *\n     * options:\n     *   noShiftTabExit: if true, then when the user hits shift tab from inside the list\n     *      they are returned to the first element of the list, rather than exiting the list\n     */\n    angular\n        .module ('ovpApp.directives.arrowNav', [])\n        .directive ('arrowNav', arrowNav);\n\n    const keys = {left: 37, up: 38, right: 39, down: 40, tab: 9};\n\n    /* @ngInject */\n    function arrowNav($timeout) {\n        return {\n            restrict: 'A',\n            link: function (scope, el, attrs) {\n                let focusableElements;\n                const options = attrs.arrowNavOptions || {};\n\n                $timeout(registerEvents, 0, false);\n                if (attrs.ngModel) {\n                    scope.$watch(attrs.ngModel, () => {\n                        $timeout(registerEvents, 0, false);\n                    });\n                }\n\n                scope.$on('$destroy', function () {\n                    if (focusableElements) {\n                        focusableElements.off('keydown', eventHandler);\n                    }\n                });\n\n                function registerEvents() {\n                    focusableElements = angular.element(el[0]).find('.' + attrs.arrowNav);\n                    for (let i = 0 ; i < focusableElements.length; i++) {\n                        focusableElements[i].setAttribute('tabindex', i === 0 ? '0' : '-1');\n                    }\n\n                    focusableElements.off('keydown', eventHandler);\n                    focusableElements.on('keydown', eventHandler);\n                }\n\n                function eventHandler(event) {\n                    if (event.keyCode === keys.right || event.keyCode === keys.down) {\n                        const index = findIndex(event.target);\n                        if (focusableElements[index + 1]) {\n                            focusableElements[index + 1].focus();\n                        }\n                        event.preventDefault();\n                        event.stopPropagation();\n                    } else if (event.keyCode === keys.left || event.keyCode === keys.up) {\n                        const index = findIndex(event.target);\n                        if (focusableElements[index - 1]) {\n                            focusableElements[index - 1].focus();\n                        }\n                        event.preventDefault();\n                        event.stopPropagation();\n                    } else if (event.keyCode === keys.tab) {\n                        if (options.noShiftTabExit !== false) {\n                            // reset focus to first element so shift-tab can exit correctly\n                            focusableElements[0].focus();\n                            // Deliberately not calling preventDefault();\n                        }\n                    }\n                }\n\n                function findIndex(el) {\n                    return Array.prototype.indexOf.call(focusableElements, el);\n                }\n            }\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}