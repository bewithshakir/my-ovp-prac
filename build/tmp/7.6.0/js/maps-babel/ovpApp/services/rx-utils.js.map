{"version":3,"sources":["ovpApp/services/rx-utils.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;;;mDACT;IACA,QAAQ,OAAO,2BAA2B,CAAC,OAC1C,QAAQ,UAAU,QAClB,QAAQ,4BAA4B;;;;;;;;;IASrC,SAAS,OAAO,OAAO,IAAI,IAAI;;QAE3B,IAAI,UAAU;;QAEd,mBAAmB,OAAO,UAAU,QAAQ;;QAE5C,2BAA2B,QAAQ,OAAO;;QAE1C,QAAQ,WAAW,MAAM;QACzB,QAAQ,kBAAkB,MAAM;;QAEhC,OAAO;;;;QAIP,SAAS,aAAa,eAAe;YACjC,OAAO,GAAG,WAAW,OAAO,UAAU,UAAU;gBAC5C,IAAI,YAAY,GAAG;gBACnB,cAAc,UAAU,UAAU;;gBAElC,MAAM,eACD,KAAK,UAAU,UAAU;oBACtB,SAAS,OAAO;oBAChB,SAAS;mBACV,UAAU,OAAO;oBAChB,SAAS,QAAQ;;;gBAGzB,OAAO,YAAY;oBACf,UAAU;;;;;QAKtB,SAAS,qBAA6B;YAAlC,KAAK,IAAI,OAAO,UAAU,QAAC,QAAK,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;gBAAL,MAAK,QAAA,UAAA;;;YAChC,MAAM,QAAQ,UAAU,MAAM;gBAC1B,aAAa,QAAQ,UAAU,KAAkB;oBAI7C,IAJgC,SAAM,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,KAAE,UAAA;;oBAC3C,OAAO,aAAa,QAAQ,OAAO,IAAI,QAAQ;wBAC3C,QAAQ;wBACR,KAAK;;;;;;QAMrB,SAAS,6BAAqC;YAM1C,KAAK,IAAI,QAAQ,UAAU,QANQ,QAAK,MAAA,QAAA,QAAA,GAAA,QAAA,OAAA,SAAA;gBAAL,MAAK,SAAA,UAAA;;;YACxC,MAAM,QAAQ,UAAU,MAAM;gBAC1B,aAAa,QAAQ,UAAU,KAAK,MAAmB;oBAUnD,IAVsC,SAAM,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,KAAE,UAAA;;oBACjD,OAAO,aAAa,QAAQ,OAAO,IAAI,QAAQ;wBAC3C,QAAQ;wBACR,KAAK;wBACL,MAAM;;;;;;;;;;;;;;;;;;;;;;IAsB1B,SAAS,yBAAyB,IAAI;QAClC,OAAO,YAAY;YACf,IAAM,UAAU,OAAO,OACnB,YAAA;gBAWA,KAAK,IAAI,QAAQ,UAAU,QAXvB,SAAM,MAAA,QAAA,QAAA,GAAA,QAAA,OAAA,SAAA;oBAAN,OAAM,SAAA,UAAA;;;gBAeV,OAfe,QAAQ,OAAO;eAC9B,GAAG,WAAW,WACd,GAAG,QAAQ;;YAEf,GAAG,QAAQ,KAAK;;YAEhB,OAAO;;;KAGd","file":"ovpApp/services/rx-utils.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.services.rxUtils', ['rx'])\n    .factory('rxhttp', rxhttp)\n    .factory('createObservableFunction', createObservableFunction);\n\n    /**\n     * Mimics the behavior of $http, except it returns an observable instead of a promise\n     *\n     * @param  {object} requestConfig config for an $http request.\n     * @return {observable}           observable which either emits the response, or errors\n     */\n    /* @ngInject */\n    function rxhttp($http, $q, rx) {\n\n        let service = rootFunction;\n\n        createShortMethods('get', 'delete', 'head', 'jsonp');\n\n        createShortMethodsWithData('post', 'put', 'patch');\n\n        service.defaults = $http.defaults;\n        service.pendingRequests = $http.pendingRequests;\n\n        return service;\n\n        //////////////////////\n\n        function rootFunction(requestConfig) {\n            return rx.Observable.create(function (observer) {\n                let canceller = $q.defer();\n                requestConfig.timeout = canceller.promise;\n\n                $http(requestConfig)\n                    .then(function (response) {\n                        observer.onNext(response);\n                        observer.onCompleted();\n                    }, function (error) {\n                        observer.onError(error);\n                    });\n\n                return function () {\n                    canceller.resolve();\n                };\n            });\n        }\n\n        function createShortMethods(...names) {\n            names.forEach(function (name) {\n                rootFunction[name] = function (url, config = {}) {\n                    return rootFunction(angular.extend({}, config, {\n                        method: name,\n                        url: url\n                    }));\n                };\n            });\n        }\n\n        function createShortMethodsWithData(...names) {\n            names.forEach(function (name) {\n                rootFunction[name] = function (url, data, config = {}) {\n                    return rootFunction(angular.extend({}, config, {\n                        method: name,\n                        url: url,\n                        data: data\n                    }));\n                };\n            });\n        }\n    }\n\n    /**\n     * Creates a function subject. This is both a function and an observable. If the function\n     * is called, anything subscribed to it will be notified\n     *\n     * Usage:\n     *\n     * let onDestroy = createObservableFunction();\n     * let otherObservable = rx.Observable.interval(500)\n     *     .takeUntil(onDestroy)\n     * onDestroy();\n     *\n     *\n     * @return {Subject}\n     */\n    /* @ngInject */\n    function createObservableFunction(rx) {\n        return function () {\n            const subject = Object.assign(\n                (...params) => subject.onNext(params),\n                rx.Observable.prototype,\n                rx.Subject.prototype);\n\n            rx.Subject.call(subject);\n\n            return subject;\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}