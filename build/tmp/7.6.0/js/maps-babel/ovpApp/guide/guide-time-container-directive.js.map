{"version":3,"sources":["ovpApp/guide/guide-time-container-directive.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,gBACV,UAAU,sBAAsB;;;;;;;IAOrC,SAAS,4BAA4B,SAAS,cAAc,UAAU,cAAc;QAChF,OAAO;YACH,UAAU;YACV,SAAS;YACT,SAAS,SAAA,QAAU,UAAU;gBACzB,IAAI,YAAY,SAAS,KAAK;gBAC9B,IAAI,kBAAkB,aAAa,UAAU;gBAC7C,UAAU,KAAK;;gBAEf,OAAO,SAAS,cAAc,QAAQ,UAAU,OAAO,OAAO;oBAC1D,IAAI;wBACA,eAAe;wBACf,cAAc;wBACd,aAAa;wBACb;;oBAEJ,OAAO,OAAO,YAAY,UAAC,IAAO;wBAC9B,IAAI,IAAI;4BACJ,IAAI,WAAW,GAAG,OAAO,UAAC,MAAM,MAAM,KAAQ;gCAC1C,QAAQ,gBAAgB,EAAC,OAAO,KAAK,MAAM,KAAK;gCAChD,OAAO;+BACR;4BACH,UAAU,KAAK;;;;oBAIvB,SAAS,KAAK,UAAU,YAAY;wBAChC,aAAa,SAAS;;wBAEtB,IAAI,CAAC,UAAU,OAAO,WAAW,GAAG;4BAChC,SAAS,SAAS,QAAQ,SAAS,KAAK;;;wBAG5C,OAAO,IAAI;4BACP,WAAW,gBAAiB,CAAC,IAAI,aAAc;;;wBAGnD,IAAI,uBAAuB,KAAK,MAAM,aAAa,MAAM;wBACzD,IAAI,yBAAyB,eAAe;4BACxC,gBAAgB;4BAChB,OAAO,MAAM,oBAAoB;;;wBAGrC,OAAO,WAAW,sBAAsB,YAAY;;wBAEpD,IAAI,aAAa,KAAK;wBACtB,IAAI,kBACA,MAAM,kBAAkB,cAAc,aAAa,YAAY;wBACnE,MAAM,cAAc,YAAY,MAAM;wBACtC,eAAe;wBACf,cAAc;;;oBAGlB,OAAO,IAAI,eAAgB,YAAY;wBACnC,SAAS,YAAY;4BACjB,OAAO,WAAW,sBAAsB;2BACzC;;;oBAGP,OAAO,IAAI,kBAAkB,UAAU,OAAO,MAAM;wBAChD,IAAI,mBAAmB,OAAO,aAAa,cAAc;wBACzD,IAAI,YAAa,oBAAoB,OAAO,QAAS,MAAM;wBAC3D,SAAS,QAAQ;4BACb,YAAY;;;;;;;KAOnC","file":"ovpApp/guide/guide-time-container-directive.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.guide')\n        .directive('guideTimeContainer', guideTimeContainerDirective);\n\n    /**\n     * This directive manages cooordianting the scrolling along the time axis (x) and fetching the channel data\n     * as it comes into view.\n     */\n    /* @ngInject */\n    function guideTimeContainerDirective($window, GuideService, $timeout, $interpolate) {\n        return {\n            restrict: 'A',\n            require: '^guide-scroll-container',\n            compile: function (tElement) {\n                var container = tElement.find('#hidden-time-row');\n                var timeRowTemplate = $interpolate(container.html());\n                container.html('');\n\n                return function guideTimeLink($scope, $element, $attr, $ctrl) {\n                    var hoursPastZero,\n                        lastTimeTime = 0,\n                        lastTimePos = 0,\n                        leftOffset = 0,\n                        $times;\n\n                    $scope.$watch('vm.times', (nv) => {\n                        if (nv) {\n                            let timeHtml = nv.reduce((memo, time, idx) => {\n                                memo += timeRowTemplate({index: idx, time: time.time});\n                                return memo;\n                            }, '');\n                            container.html(timeHtml);\n                        }\n                    });\n\n                    $element.bind('scroll', function () {\n                        leftOffset = $element.scrollLeft();\n\n                        if (!$times || $times.length === 0) {\n                            $times = $element.parents('.wrap').find('.guide-header .time-container');\n                        }\n\n                        $times.css({\n                            transform: 'translateX(' + (-1 * leftOffset) + 'px)'\n                        });\n\n                        let currentHoursPastZero = Math.floor(leftOffset / $ctrl.getPixelsPerHour());\n                        if (currentHoursPastZero !== hoursPastZero) {\n                            hoursPastZero = currentHoursPastZero;\n                            $scope.$emit('guide:timeScroll', hoursPastZero);\n                        }\n\n                        $scope.$broadcast('guide:adjustOffset', leftOffset, currentHoursPastZero);\n\n                        let scrollTime = Date.now();\n                        let currentVelocity =\n                            $ctrl.calculateVelocity(lastTimeTime, lastTimePos, scrollTime, leftOffset);\n                        $ctrl.scrollHandler(leftOffset, null, currentVelocity);\n                        lastTimeTime = scrollTime;\n                        lastTimePos = leftOffset;\n                    });\n\n                    $scope.$on('displayZone',  function () {\n                        $timeout(function () {\n                            $scope.$broadcast('guide:adjustOffset', leftOffset);\n                        }, 100);\n                    });\n\n                    $scope.$on('guide:timejump', function (event, time) {\n                        let offsetTimeMicros = time - GuideService.getZeroHour().getTime();\n                        let offsetPix = (offsetTimeMicros / (3600 * 1000)) * $ctrl.getPixelsPerHour();\n                        $element.animate({\n                            scrollLeft: offsetPix\n                        });\n                    });\n                };\n            }\n        };\n    }\n})();\n"],"sourceRoot":"/source/"}