{"version":3,"sources":["ovpApp/ondemand/ondemand-ui-router.js"],"names":[],"mappings":"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","file":"ovpApp/ondemand/ondemand-ui-router.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.ondemand', [\n        'ovpApp.messages',\n        'ovpApp.product.service',\n        'ui.router',\n        'ovpApp.player',\n        'ovpApp.remotePlayer',\n        'ovpApp.services.homePage',\n        'ovpApp.components.alert',\n        'ovpApp.services.locationService',\n        'ovpApp.services.errorCodes',\n        'ovpApp.ondemand.data',\n        'ovpApp.ondemand.subheader',\n        'ovpApp.ondemand.category',\n        'ovpApp.ondemand.networks',\n        'ovpApp.ondemand.networkSubPage',\n        'ovpApp.ondemand.gallerySummaryPage',\n        'ovpApp.ondemand.networkCategoryList',\n        'ovpApp.ondemand.subheaderService',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.directives.scrollCache',\n        'ui.router'\n        ])\n    .run(run)\n    .config(config);\n\n    /* @ngInject */\n    function run(playerService, $timeout, $transitions) {\n        // This would be better in an onInactivate, but stickyState's onInactivate hooks\n        //    appear to be nonfunctional in the current version\n        const playerState = state => state.name.indexOf('ovp.ondemand.play') === 0;\n\n        $transitions.onSuccess({from: playerState}, function (transition) {\n            const stickyStates = transition.router.getPlugin('stickystates');\n            const inactives = stickyStates.inactives();\n            if (inactives.find(state => state.name === transition.from().name)) {\n                playerService.getInstance()\n                    .then(player => player.stop());\n\n                // Keeping the player in an 'inactive' state causes problems when resuming\n                //   it. Bookmarks can be lost, analytics can miss it, etc. So instead we exit,\n                //   which will force it to reload into the correct state on re-enter\n                stickyStates.exitSticky(transition.from().name);\n            }\n        });\n    }\n\n    /* @ngInject */\n    function config($stateProvider, $urlRouterProvider, CAPABILITIES) {\n\n        //backwards compatible rewrite\n        $urlRouterProvider.rule(function ($injector, $location) {\n            //what this function returns will be set as the $location.url\n            var path = $location.url();\n\n            if (path.indexOf('networks$') > -1) {\n                $location.replace().path('/networks');  //to do: handle old links\n            }\n        });\n\n        /**\n          Because we don't know ahead of time precisely what the menu items in ondemand are, we use\n          lazy loading to initialize the states. The exact structure will depend on what data the\n          server sends, but it will look something like this:\n\n          ovp.ondemand\n            |--ovp.ondemand.favorites\n            |    \\--ovp.ondemand.favorites.viewall\n            |--ovp.ondemand.tv_shows\n            |--ovp.ondemand.movies\n            |--ovp.ondemand.kids\n            |--ovp.ondemand.networks\n            |    \\--ovp.ondemand.networks.network\n            |--ovp.ondemand.playProduct\n            |--ovp.ondemand.playEpisodeWithDetails\n            \\--ovp.ondemand.playCdvr\n        */\n\n        // Placeholder ondemand state\n        $stateProvider.state('ovp.ondemand.**', {\n            url: '/ondemand',\n            lazyLoad: registerOndemandStates\n        });\n\n        // Real ondemand state\n        const rootStateDefinition = {\n            name: 'ovp.ondemand',\n            url: '/ondemand',\n            data: {\n                capability: CAPABILITIES.ONDEMAND,\n                subheader: 50,\n                subheaderLabel: 'On Demand'\n            },\n            redirectTo: function (transition) {\n                return transition.injector().get('onDemandData').defaultCategory()\n                    .then(defaultCategory => `ovp.ondemand.${defaultCategory}`);\n            },\n            resolve: {\n                /* @ngInject */\n                menuItems: function (onDemandData) {\n                    return onDemandData.getFrontDoor();\n                }\n            },\n            views: {\n                'subMenu@ovp': {\n                    component: 'onDemandSubheader'\n                },\n                appView: {\n                    template: '<div ui-view scroll-reset=\"resetNetworkScroll\" scroll-cache></div>'\n                }\n            }\n        };\n\n        // Flattens a multidimensional dimensional array by one dimension\n        function concatAll(arr) {\n            return arr.reduce((result, current) => {\n                if (Array.isArray(current)) {\n                    result.push(...current);\n                } else {\n                    result.push(current);\n                }\n                return result;\n            }, []);\n        }\n\n        /**\n         * Replaces the placeholder ovp.ondemand.** state with a real tree of states\n         * @param {Transition} $transition$\n         */\n        function registerOndemandStates($transition$) {\n            const OauthService = $transition$.injector().get('OauthService');\n            const onDemandData = $transition$.injector().get('onDemandData');\n            const $q = $transition$.injector().get('$q');\n            const $rootScope = $transition$.injector().get('$rootScope');\n            const registry = $transition$.router.stateRegistry;\n\n            const promise = OauthService.isAuthenticated()\n                .then(authenticated => {\n                    if (authenticated) {\n                        return onDemandData.getFrontDoor();\n                    } else {\n                        return $q.reject({silent: true});\n                    }\n                })\n                .then(categories => {\n                    registry.deregister('ovp.ondemand.**');\n                    registry.register(rootStateDefinition);\n                    let states = categories.map(category =>\n                        createStateDefinitions(category, onDemandData, $transition$));\n                    states.push(createPlayerStates());\n                    concatAll(states)\n                        .filter(state => !!state)\n                        .forEach(state => registry.register(state));\n                })\n                .catch(err => {\n                    if (angular.isString(err) && err.indexOf('User is not logged in') > -1) {\n                        return $q.reject({silent: true});\n                    } else {\n                        return $q.reject(err);\n                    }\n                });\n\n            $rootScope.$broadcast(\n                'message:loading',\n                promise,\n                undefined,\n                'On Demand'\n            );\n\n            return promise;\n        }\n\n        const factories = {\n            // Creates the favorites page and its children\n            pods_with_assets: function (category, rootName) {\n                return [{\n                    name: `ovp.ondemand.${rootName}`,\n                    component: 'gallerySummaryPage',\n                    redirectTo: restrictOutOfUs,\n                    url: `/${rootName}`,\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageNameHint: 'gallerySummaryPage',\n                        categoryHint: category.name,\n                        isLazyLoad: false\n                    },\n                    data: {\n                        pageTitle: `On Demand - ${rootName}`\n                    },\n                    resolve: {\n                        /* @ngInject */\n                        data: (onDemandData, $rootScope) => {\n                            const promise = onDemandData.getByUri(category.uri);\n                            $rootScope.$broadcast(\n                                'message:loading',\n                                promise,\n                                undefined,\n                                `On Demand - ${rootName}`\n                            );\n\n                            return promise;\n                        }\n                    },\n                    /* @ngInject */\n                    onEnter(ondemandSubheaderService) {\n                        ondemandSubheaderService.setState({\n                            showFrontDoor: true\n                        });\n                    }\n                }, {\n                    name: `ovp.ondemand.${rootName}.viewall`,\n                    url: '/:name?page',\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageNameHint: 'viewall',\n                        categoryHint: category.name,\n                        isLazyLoad: false\n                    },\n                    views: {\n                        '@ovp.ondemand': {\n                            component: 'ondemandCategory'\n                        }\n                    },\n                    resolve: {\n                        /* @ngInject */\n                        category: (onDemandData, name, data, page, $state, $rootScope) => {\n                            if (angular.isUndefined(page) || page < 1) {\n                                page = 1;\n                            }\n                            const format = onDemandData.formatCategoryNameForRoute;\n                            name = format(name);\n                            const category = data.categories.find(c => format(c.name) === name);\n                            if (category) {\n                                let promise = onDemandData.getByUri(category.uri, page);\n                                $rootScope.$broadcast(\n                                    'message:loading',\n                                    promise,\n                                    undefined,\n                                    `On Demand - ${category.name}`\n                                );\n                                return promise;\n                            } else {\n                                $state.go(`ovp.ondemand.${rootName}`);\n                            }\n                        },\n                        name: fromStateParams('name'),\n                        page: fromStateParams('page')\n                    },\n                    /* @ngInject */\n                    onEnter(ondemandSubheaderService) {\n                        ondemandSubheaderService.setState({\n                            showFrontDoor: true,\n                            showToggle: true\n                        });\n                    },\n                    /* @ngInject */\n                    onExit(ondemandSubheaderService) {\n                        ondemandSubheaderService.setState({\n                            showFrontDoor: true,\n                            showToggle: false\n                        });\n                    }\n                }];\n            },\n            // Creates top-level category pages, such as 'movies' or 'kids'\n            media_list: function (category, name) {\n                return {\n                    name: `ovp.ondemand.${name}`,\n                    component: 'ondemandCategory',\n                    url: `/${name}?page`,\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageNameHint: 'ondemandCategory',\n                        categoryHint: category.name,\n                        isLazyLoad: false\n                    },\n                    redirectTo: restrictOutOfUs,\n                    data: {\n                        pageTitle: `On Demand - ${name}`\n                    },\n                    resolve: {\n                        /* @ngInject */\n                        category: (onDemandData, page, $rootScope) => {\n                            if (angular.isUndefined(page) || page < 1) {\n                                page = 1;\n                            }\n                            const promise = onDemandData.getByUri(category.uri, page);\n                            // replace underscores with spaces for screed reader\n                            name = name.replace('_', ' ');\n                            $rootScope.$broadcast(\n                                'message:loading',\n                                promise,\n                                undefined,\n                                `On Demand - ${name}`\n                            );\n\n                            return promise;\n                        },\n                        page: fromStateParams('page')\n                    },\n                    /* @ngInject */\n                    onEnter(ondemandSubheaderService) {\n                        ondemandSubheaderService.setState({\n                            showFrontDoor: true,\n                            showToggle: true\n                        });\n                    }\n                };\n            },\n            // Creates the networks page and its children\n            network_list: function (category, rootName, $transition$) {\n                // Update subheader when going to the main network page\n                $transition$.router.transitionService\n                    .onSuccess({to: `ovp.ondemand.${rootName}`}, function () {\n                        $transition$.injector().get('ondemandSubheaderService').setState({\n                            showFrontDoor: true\n                        });\n                    });\n\n                // Rset the scroll position when going to any network page\n                $transition$.router.transitionService\n                    .onSuccess({to: `ovp.ondemand.${rootName}.**`}, function () {\n                        $transition$.injector().get('$rootScope').$emit('resetNetworkScroll');\n                    });\n\n                return [{\n                    name: `ovp.ondemand.${rootName}`,\n                    url: `/${rootName}`,\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageNameHint: 'networkMainPage',\n                        categoryHint: category.name,\n                        isLazyLoad: false\n                    },\n                    redirectTo: restrictOutOfUs,\n                    component: 'networkMainPage',\n                    data: {\n                        pageTitle: `On Demand - ${rootName}`\n                    },\n                    resolve: {\n                        /* @ngInject */\n                        networks: (onDemandData, $rootScope) => {\n                            const promise = onDemandData.getByUri(category.uri)\n                                .then(data => data.networks);\n                            $rootScope.$broadcast(\n                                'message:loading',\n                                promise,\n                                undefined,\n                                `On Demand - ${rootName}`\n                            );\n                            return promise;\n                        }\n                    }\n                }, {\n                    name: `ovp.ondemand.${rootName}.network`,\n                    url: `/:name?index&page`,\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageNameHint: 'curatedNetworks',\n                        categoryHint: category.name,\n                        isLazyLoad: false\n                    },\n                    data: {\n                        pageTitle: transition => `On Demand - ${transition.params('to').name}`\n                    },\n                    views: {\n                        '@ovp.ondemand': {\n                            component: 'networkSubPage'\n                        }\n                    },\n                    resolve: {\n                        name: fromStateParams('name'),\n                        index: fromStateParams('index'),\n                        page: fromStateParams('page'),\n                        /* @ngInject */\n                        data: (page, name, networks, onDemandData, $q, $state, $rootScope) => {\n                            const format = onDemandData.formatCategoryNameForRoute;\n                            name = format(name);\n                            const network = networks.find(n => format(n.name) === name);\n                            if (network) {\n                                let promise;\n                                if (network.type === 'media_list') {\n                                    promise = onDemandData.getByUri(network.uri, page);\n                                } else {\n                                    // category_list or pods_with_assets contain a list of categories,\n                                    //   and then underneath that a number of assets. If we included\n                                    //   params to limit the results, that limits the number of\n                                    //   categories, not the number of results per category.\n                                    promise = onDemandData.getByUri(network.uri);\n                                }\n                                $rootScope.$broadcast(\n                                    'message:loading',\n                                    promise,\n                                    undefined,\n                                    `On Demand - ${network.name}`\n                                );\n                                return promise;\n                            } else {\n                                $state.go(`ovp.ondemand.${rootName}`);\n                            }\n                        }\n                    },\n                    /* @ngInject */\n                    onEnter: (ondemandSubheaderService, data, $state, index) => {\n                        let options;\n                        if (data.type === 'media_list') {\n                            options = {\n                                showBack: true,\n                                backString: 'Networks',\n                                onBackClick: () => $state.go(`ovp.ondemand.${rootName}`),\n                                showToggle: true,\n                                showNetworkLogo: true,\n                                networkName: () => data.name,\n                                networkLogoUrl: () => data.imageUri({height: 80})\n                            };\n                        } else if (data.type === 'pods_with_assets') {\n                            options = {\n                                showBack: true,\n                                backString: 'Networks',\n                                onBackClick: () => $state.go(`ovp.ondemand.${rootName}`),\n                                showToggle: true,\n                                showNetworkLogo: true,\n                                networkName: () => data.name,\n                                networkLogoUrl: () => data.imageUri({height: 80}),\n                                showNetwork3Tier: true,\n                                network3TierIndex: index,\n                                childNetworks: () => data.categories\n                            };\n                        }\n                        // Deliberately not checked: network.type === 'category_list'.\n                        //    NetworkCategoryList sets the subheader itself\n\n                        if (options) {\n                            ondemandSubheaderService.setState(options);\n                        }\n                    }\n                }];\n            }\n        };\n\n        function createStateDefinitions(category, onDemandData, $transition$) {\n            const factory = factories[category.type];\n            if (factory) {\n                const formattedName = onDemandData.formatCategoryNameForRoute(category.name);\n                return factory(category, formattedName, $transition$);\n            }\n        }\n\n        function fromStateParams(key) {\n            return ['$stateParams', function ($stateParams) {\n                return $stateParams[key];\n            }];\n        }\n\n        let oohListener;\n        const commonPlayerParams = {\n            redirectTo: restrictOutOfUs,\n            data: {\n                bodyClass: 'video-player-page',\n                subheader: 'none',\n                pageTitle: transition => {\n                    return transition.injector().getAsync('asset')\n                        .then(asset => `${asset.seriesTitle || asset.title}, ${asset.network.callsign}, OnDemand`);\n                },\n                hideHeaderGradient: true\n            },\n            resolve: {\n                asset: fetchAsset,\n                /* @ngInject */\n                stream: function (asset, $stateParams) {\n                    if ($stateParams.streamIndex !== undefined && $stateParams.streamIndex !== null) {\n                        return asset.streamList[$stateParams.streamIndex];\n                    } else {\n                        let id = $stateParams.episodeID || $stateParams.productID,\n                            type = !!$stateParams.isCdvr ? 'CDVR' : 'ONLINE_ONDEMAND',\n                            streamByProviderAssetId = asset.streamList\n                                .find(s => s.streamProperties.providerAssetID === id && s.type == type),\n                            streamByPlatformMediaId;\n\n                        //deprecated for deeplink by streamByProviderAssetId,\n                        // only included for compatibility check with\n                        //twcc sites.\n                        if (!streamByProviderAssetId) {\n                            //send splunk message?\n                            streamByPlatformMediaId = asset.streamList\n                                .find(s => s.streamProperties.thePlatformMediaId === id);\n                        }\n\n                        return streamByProviderAssetId || streamByPlatformMediaId;\n                    }\n                }\n            },\n            params: {\n                streamIndex: null\n            },\n            views: {\n                '': {\n                    /* @ngInject */\n                    controller: function ($stateParams, asset,\n                                          stream, $rootScope, $scope,\n                                          playerService) {\n                        let vm = this;\n\n                        vm.options = {\n                            mode: !!$stateParams.isCdvr ? 'CDVR' : 'VOD',\n                            asset: asset,\n                            stream: stream,\n                            isTrailer: !!$stateParams.trailer,\n                            isStartOver: !!$stateParams.isStartOver,\n                            isCdvr: !!$stateParams.isCdvr\n                        };\n\n                        playerService.playStream(vm.options);\n                        $rootScope.$broadcast('Analytics:pageChangeComplete');\n\n                        $scope.$on('$destroy', () => {\n                            playerService.stop();\n                        });\n                    },\n                    controllerAs: 'vm'\n                },\n                'subMenu@ovp': {\n                    template: '<div></div>'\n                }\n            },\n            /* @ngInject */\n            onEnter: function (asset, stream, $rootScope, $stateParams, ondemandGoBack) {\n                if (!stream.streamProperties.availableOutOfHome) {\n                    oohListener = $rootScope.$on('LocationService:locationChanged', function (data) {\n                        if (!data.behindOwnModem) {\n                            ondemandGoBack(asset, $stateParams.trailer);\n                        }\n                    });\n                }\n            },\n            /* @ngInject */\n            onExit: function () {\n                if (oohListener) {\n                    oohListener();\n                    oohListener = undefined;\n                }\n            }\n        };\n\n        function createPlayerStates() {\n            return [\n                angular.extend({}, commonPlayerParams, {\n                    name: 'ovp.ondemand.playEpisodeWithDetails',\n                    url: '/play/:seriesID/:episodeID?showDetails&startOver',\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageName: 'playerOnDemand',\n                        checkForTvod: true,\n                        isLazyLoad: false,\n                        dependsOnFlash: true\n                    }\n                }),\n                angular.extend({}, commonPlayerParams, {\n                    name: 'ovp.ondemand.playProduct',\n                    url: '/play/:productID?showDetails&startOver&trailer&streamIndex',\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageName: 'playerOnDemand',\n                        checkForTvod: true,\n                        isLazyLoad: false,\n                        dependsOnFlash: true\n                    }\n                }),\n                angular.extend({}, commonPlayerParams, {\n                    name: 'ovp.ondemand.playCdvr',\n                    url: '/playcdvr/:tmsProgramID?showDetails&startOver&isCdvr&streamIndex',\n                    analytics: {\n                        appSection: 'curatedCatalog',\n                        pageName: 'playerOnDemand',\n                        isLazyLoad: false,\n                        dependsOnFlash: true\n                    }\n                })\n            ];\n        }\n\n        /* @ngInject */\n        function fetchAsset($stateParams, productService, alert, messages, $state, $q, errorCodesService) {\n            let productToPlayId, fetcher,\n                onError = function (error) {\n                    let dialog;\n                    if (error.status === 404) {\n                        dialog = alert.open({\n                            message: errorCodesService.getMessageForCode('WGU-1002'),\n                            buttonText: 'OK'\n                        });\n                    } else {\n                        dialog = alert.open({\n                            message: errorCodesService.getMessageForCode('WGE-1001'),\n                            buttonText: 'OK'\n                        });\n                    }\n\n                    return dialog.result.then(() => {\n                        if ($state.current.name === '' || $state.current.name === 'login') {\n                            // Deep linked in, so we can't just stay where we are;\n                            $state.go('ovp.ondemand');\n                        }\n\n                        // Cancel the transition to the player\n                        return $q.reject({silent: true});\n                    });\n                };\n            if ($stateParams.productID !== undefined) {\n                productToPlayId = $stateParams.productID;\n                fetcher = productService.withProviderAssetId($stateParams.productID);\n            } else if ($stateParams.seriesID) { // episodic content\n                productToPlayId = $stateParams.episodeID;\n                fetcher = productService.withTmsSeriesId($stateParams.seriesID);\n            } else if ($stateParams.tmsProgramID) {\n                productToPlayId = $stateParams.tmsProgramID;\n                fetcher = productService.withTmsId($stateParams.tmsProgramID);\n            } else {\n                return onError({});\n            }\n\n            return fetcher.fetch()\n                .then(product => {\n                    let asset;\n                    if (product && product.isSeries) {\n                        let episodes = product.seasons ? product.seasons.reduce((episodeArray, season) =>\n                            episodeArray.concat(...season.episodes), []) : [];\n\n                        asset = episodes.find(e => e.streamList && e.streamList.find(\n                            s => s.streamProperties.providerAssetID == productToPlayId));\n                        if (!asset) {\n                            asset = episodes.find(e => e.tmsProgramIds.includes(productToPlayId));\n                        }\n\n                    } else {\n                        asset = product;\n                    }\n\n                    if (!asset) {\n                        return onError({status: 404});\n                    } else {\n                        return asset;\n                    }\n                }, onError);\n        }\n\n        function restrictOutOfUs(transition) {\n            const locationService = transition.injector().get('locationService');\n            return locationService.getLocation()\n                .then(location => {\n                    if (!location.inUS) {\n                        return 'ovp.outOfUs';\n                    }\n                });\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}