{"version":3,"sources":["ovpApp/components/player/ovp-scrubber.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,CAAC,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEjiB,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAJhH,CAAC,YAAY;IACT;;IAEA,QACK,OAAO,qCAAqC,CAAC,gCAC7C,UAAU,eAAe;QACtB,aAAa;QACb,UAAU;YACN,SAAS;YACT,UAAU;YACV,KAAK;YACL,OAAO;YACP,YAAY;YACZ,aAAa;YACb,YAAY;YACZ,QAAQ;YACR,aAAa;;QAEjB,YAAU,CAAA,YAAA;;;;YAEK,SAFG,SAEF,QAAQ,UAAU,UAAU,QAAQ,YAAY;gBAM5D,gBAAgB,MARF;;gBAGV,KAAK,SAAS;gBACd,KAAK,WAAW;gBAChB,KAAK,WAAW;gBAChB,KAAK,SAAS;gBACd,KAAK,aAAa;;;YAU1B,aAjBkB,UAAQ,CAAA;gBAkBtB,KAAK;gBACL,OATO,SAAA,UAAG;oBAUN,IAAI,QAAQ;;oBATZ,KAAK,OAAO,GAAG,+BAA+B,KAAK;oBACnD,KAAK,WAAW,KAAK,YAAY;oBACjC,KAAK,gBAAgB;oBACrB,KAAK,gBAAgB;oBACrB,KAAK,iBAAiB;oBACtB,KAAK,cAAc,SAAS,KAAK,OAAO,iBAAiB;oBACzD,KAAK,kBAAkB;oBACvB,KAAK,aAAa,QAAQ,QAAQ,KAAK,SAAS,IAAI,KAAK,iBAAiB;;oBAE1E,IAAI,KAAK,SAAS,YAAY,QAAQ;wBAClC,KAAK,SAAS,YAAA;4BAYV,OAZgB,MAAK,WAAW;;;;oBAGxC,KAAK,OAAO,IAAI,kCAAkC,UAAC,OAAO,MAAS;wBAC/D,IAAI,MAAK,aAAa;4BAClB;;wBAEJ,MAAK,gBAAgB,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,UAC3C,MAAK,WAAW,aAAa,MAAK,WAAW;;;oBAGrD,KAAK,OAAO,IAAI,4BAA4B,UAAC,OAAO,MAAS;wBACzD,MAAK,iBAAiB;wBACtB,MAAK,gBAAgB,KAAK;;;oBAG9B,KAAK,OAAO,IAAI,0BAA0B,YAAM;wBAC5C,IAAI,yBAAyB,MAAK;wBAClC,MAAK,iBAAiB;;;wBAGtB,IAAI,CAAC,MAAK,iBAAiB;4BACvB,MAAK,gBAAgB;;;;;;wBAMzB,MAAK,eAAe,wBAAwB;;;oBAGhD,KAAK,OAAO,IAAI,wBAAwB,UAAC,OAAO,MAAS;wBACrD,MAAK,KAAK,KAAK;;;oBAGnB,KAAK,OAAO,GAAG,aAAa,YAAM;wBAC9B,MAAK,UAAU;;oBAEnB,KAAK,OAAO,GAAG,WAAW,YAAM;wBAC5B,MAAK,UAAU;;;eAexB;gBACC,KAAK;gBACL,OAbU,SAAA,aAAG;oBACT,KAAK,OAAO,IAAI;oBAChB,KAAK,OAAO,IAAI;;eAerB;gBACC,KAAK;gBACL,OAdQ,SAAA,WAAG;oBACP,IAAI,KAAK,eAAe;wBACpB,KAAK,0BAA0B,KAAK,gBAAgB,KAAK,WAAW;;;eAiB7E;gBACC,KAAK;gBACL,OAfa,SAAA,cAAC,OAAO;oBACjB,IAAI,KAAK,SAAS;wBACd;;oBAEJ,IAAI,MAAM,SAAS,YAAY;wBAC3B,KAAK,WAAW,MAAM;wBACtB,MAAM;2BACH;wBACH,IAAI,KAAK,aAAa;4BAClB;;;;wBAIJ,KAAK,SAAS,GAAG,cAAc,kBAAkB,MAAM,OAAO,MAAM,OAAO,aACvE,MAAM,UAAU;wBACpB,IAAI,WAAW,MAAM,OAAO,aAAa,MAAM;wBAC/C,KAAK,eAAgB,WAAW,KAAK,WAAW,aAAc;;;eAiBvE;gBACC,KAAK;gBACL,OAfgB,SAAA,iBAAC,SAAS;oBACtB,OAAO;wBACH,MAAM,QAAS,YAAY,OAAO,KAAK,MAAM,QAAS;wBACtD,OAAO,QAAS,WAAW,OAAO,KAAK,MAAM,QAAS;;;eAkB/D;gBACC,KAAK;gBACL,OAhBO,SAAA,QAAC,OAAO;oBACX,KAAK,gBAAgB;oBACrB,IAAI,KAAK,SAAS;wBACd;;oBAEJ,IAAI,MAAM,YAAY,MAAM,MAAM,YAAY,IAAI;;wBAC9C,KAAK,KAAK;2BACP,IAAI,MAAM,YAAY,MAAM,MAAM,YAAY,IAAI;;wBACrD,KAAK,KAAK,CAAC;;;eAqBpB;gBACC,KAAK;gBACL,OAlBQ,SAAA,WAAG;oBACP,OAAO,KAAK,MAAM,KAAK,MAAM;;eAoBlC;gBACC,KAAK;gBACL,OAnBQ,SAAA,WAAG;oBACP,OAAO,KAAK,MAAM,KAAK,QAAQ;;eAqBpC;gBACC,KAAK;gBACL,OApBiB,SAAA,oBAAG;oBAChB,IAAI,MAAM;oBACV,IAAI,KAAM,eAAe,CAAC,KAAK,iBAAiB,CAAC,KAAK,4BACjD,KAAK,eAAe,KAAK,eAAgB;wBAC1C,MAAM;;oBAEV,OAAO;;eAqBZ;gBACC,KAAK;gBACL,OApBwB,SAAA,2BAAG;oBACvB,IAAI,CAAC,KAAK,gBAAgB;wBACtB,OAAO;4BACH,MAAQ,KAAK,QAAQ,KAAK,MAAO,MAAO;;;oBAGhD,OAAO;wBACH,MAAM,KAAK;;;eAuBpB;gBACC,KAAK;gBACL,OArBa,SAAA,gBAAG;oBACZ,IAAI,KAAK,eAAe;wBACpB,OAAO,SAAS,KAAM,gBAAgB,KAAK,WAAW,cAAe,KAAK;2BACvE;wBACH,OAAO,KAAK;;;eAwBrB;gBACC,KAAK;gBACL,OAtBgC,SAAA,mCAAG;oBAC/B,IAAI,QAAS,KAAK,QAAQ,KAAK;oBAC/B,IAAI,KAAK,kBAAkB,CAAC,KAAK,aAAa;wBAC1C,IAAI,KAAK,aAAa,KAAK,0BAA0B;4BACjD,QAAQ,KAAK,aAAa,KAAK;+BAC5B;4BACH,QAAQ,KAAK;;;oBAGrB,OAAO;;eAwBZ;gBACC,KAAK;gBACL,OAvBwB,SAAA,2BAAG;oBACvB,OAAO;wBACH,MAAM;wBACN,OAAO,KAAM,qCAAqC,MAAO;;;eA0BlE;gBACC,KAAK;gBACL,OAxBqB,SAAA,wBAAG;oBACpB,IAAI,OAAO,KAAK,2BAA2B;;;oBAEvC,QAAS,CAAE,KAAK,aAAa,KAAK,SAAS,KAAK,MAAO,MAAO;;oBAElE,IAAI,KAAK,gBAAgB;wBACrB,IAAI,KAAK,aAAa,KAAK,0BAA0B;4BACjD,QAAQ;+BACL;4BACH,IAAI,6BAA6B,KAAK,aAAa,KAAK;gCACpD,kBAAkB,6BAA6B,KAAK;4BACxD,QAAQ,kBAAkB,MAAM;;;oBAIxC,OAAO;wBACH,MAAM;wBACN,OAAO;;;eA2BhB;gBACC,KAAK;gBACL,OAzBmB,SAAA,sBAAG;oBAClB,IAAI,cAAW;wBACX,QAAQ,MAAQ,KAAM,QAAQ,KAAK,MAAO,MAAQ;oBACtD,IAAI,KAAK,kBAAkB,CAAC,KAAK,aAAa;wBAC1C,IAAI,KAAK,aAAa,KAAK,0BAA0B;4BACjD,QAAQ,MAAQ,KAAM,aAAa,KAAK,MAAO,MAAQ;+BACpD;4BACH,cAAc,KAAK,WAAW;4BAC9B,QAAQ,cAAc,KAAK,gBAAgB;;;oBAGnD,OAAO;wBACH,OAAO;wBACP,OAAO;;;eA4BhB;gBACC,KAAK;gBACL,OA1BmB,SAAA,sBAAG;;oBAElB,IAAI,eAAe,KAAK,SAAS,GAAG,cAAc,mBAAmB,cAAc;;;oBAE/E,cAAc;;;oBAEd,SAAS;wBACL,WAAW;wBACX,gBAAgB;4BACZ,MAAM,eAAe,cAAc;;;;oBAI/C,IAAI,KAAK,eAAe;wBACpB,OAAO,QAAQ,OAAO,KAAK,gBAAgB;2BACxC;wBACH,IAAI,SAAU,KAAK,QAAQ,KAAK;wBAChC,OAAO,QAAQ,OAAQ,SAAS,MAAO;;;oBAG3C,OAAO;;eA8BZ;gBACC,KAAK;gBACL,OA7BW,SAAA,YAAC,OAAO;;oBAEf,IAAI,KAAK,gBAAgB;wBACrB;;;oBAGJ,IAAI,cAAc,KAAK,WAAW;oBAClC,KAAK,gBAAgB,MAAM,OAAO,aAAa,MAAM;oBACrD,KAAK,0BACD,KAAK,SAAS,GAAG,cAAc,kBAAkB,aAAa,KAAK;oBACvE,IAAI,KAAK,gBAAgB,GAAG;wBACxB,KAAK,gBAAgB;2BAClB,IAAI,KAAK,gBAAgB,aAAa;wBACzC,KAAK,gBAAgB;;;eA+B9B;gBACC,KAAK;gBACL,OA7BY,SAAA,eAAG;oBACX,KAAK,gBAAgB;oBACrB,KAAK,kBAAkB;;eA+B5B;gBACC,KAAK;gBACL,OA9BY,SAAA,eAAG;oBACX,KAAK,kBAAkB;;;oBAGvB,IAAI,CAAC,KAAK,gBAAgB;wBACtB,KAAK,gBAAgB;wBACrB,KAAK,gBAAgB;;;eAiC9B;gBACC,KAAK;gBACL,OA/B2B,SAAA,2BAAC,MAAM;oBAC9B,IAAI,KAAK,YAAY;wBACjB,KAAK,aAAa,KAAK,cAAc;wBACrC,KAAK;;;eAkCd;gBACC,KAAK;gBACL,OAhCY,SAAA,aAAC,UAAU;oBACnB,IAAI,2BAA2B,WAAW,KAAK;oBAC/C,OAAO,KAAK,cAAc,2BAA2B,KAAK;;eAkC/D;gBACC,KAAK;gBACL,OAjCc,SAAA,eAAC,UAAU,eAAe;oBACpC,IAAI,KAAK,aAAa;wBAClB;;;oBAGJ,IAAI,iBAAc;oBAClB,WAAW,KAAK,IAAI,GAAG;;;;;oBAKvB,iBAAiB,KAAK,MAAM,WAAW,KAAK;oBAC5C,KAAK,OAAO,MAAM,oBAAoB,EAAC,aAAa,gBAAgB,eAAe;;eAmCxF;gBACC,KAAK;gBACL,OAlCI,SAAA,KAAC,YAAY;oBACb,KAAK,SAAU,KAAK,cAAc;oBAClC,KAAK,eAAe,KAAK,QAAQ,KAAK,KAAK;;;;YAsCnD,OA1UkB;;;KAwSzB","file":"ovpApp/components/player/ovp-scrubber.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.playerControls.ovpScrubber', ['ovpApp.directives.draggable'])\n        .component('ovpScrubber', {\n            templateUrl: '/js/ovpApp/components/player/ovp-scrubber.html',\n            bindings: {\n                seconds: '<',\n                adBreaks: '<',\n                max: '<',\n                value: '<',\n                ffDisabled: '<',\n                isAdPlaying: '<',\n                showBuffer: '<',\n                player: '<',\n                enlargeIcon: '='\n            },\n            controller: class Scrubber {\n                /* @ngInject */\n                constructor($scope, $element, $timeout, config, $rootScope) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.$timeout = $timeout;\n                    this.config = config;\n                    this.$rootScope = $rootScope;\n                }\n\n                $onInit() {\n                    this.player.on('player-end-position-changed', this.onPlayerEndPositionChanged);\n                    this.adBreaks = this.adBreaks || [];\n                    this.mousePosition = null;\n                    this.sliderFocused = false;\n                    this.sliderDragging = false;\n                    this.skipSeconds = parseInt(this.config.playerParameters.skipSeconds);\n                    this.mouseOverSlider = false;\n                    this.sliderElem = angular.element(this.$element[0]).find('.slider-track')[0];\n\n                    if (this.$element.focusOn === 'true') {\n                        this.$timeout(() => this.sliderElem.focus());\n                    }\n\n                    this.$scope.$on('slider-handle-position-changed', (event, data) => {\n                        if (this.isAdPlaying) {\n                            return;\n                        }\n                        this.mousePosition = Math.max(0, Math.min(data.position,\n                            this.sliderElem.offsetLeft + this.sliderElem.offsetWidth));\n                    });\n\n                    this.$scope.$on('slider-handle-drag-start', (event, data) => {\n                        this.sliderDragging = true;\n                        this.mousePosition = data.position;\n                    });\n\n                    this.$scope.$on('slider-handle-drag-end', () => {\n                        let selectionWidthFraction = this.calcSliderSelectionWidthFraction();\n                        this.sliderDragging = false;\n\n                        // Mouse moved out, but we delayed removing focus until this event.\n                        if (!this.mouseOverSlider) {\n                            this.sliderFocused = false;\n                        }\n\n                        // Use the position of the center of the drag\n                        // circle as the seek point so that the UI matches\n                        // where we are seeking.\n                        this.seekToPosition(selectionWidthFraction, 'scrubber');\n                    });\n\n                    this.$scope.$on('playerControls: skip', (event, data) => {\n                        this.skip(data.multiplier);\n                    });\n\n                    this.player.on('seekBegin', () => {\n                        this.seeking = true;\n                    });\n                    this.player.on('seekEnd', () => {\n                        this.seeking = false;\n                    });\n                }\n\n                $onDestroy() {\n                    this.player.off('seekBegin');\n                    this.player.off('seekEnd');\n                }\n\n                $doCheck() {\n                    if (this.mousePosition) {\n                        this.mousePositionAsFraction = this.mousePosition / this.sliderElem.offsetWidth;\n                    }\n                }\n\n                onSliderClick(event) {\n                    if (this.seeking) {\n                        return;\n                    }\n                    if (event.type === 'keypress') {\n                        this.$rootScope.$emit('toggle-playback');\n                        event.preventDefault();\n                    } else {\n                        if (this.isAdPlaying) {\n                            return;\n                        }\n\n                        // Use the actual click point.\n                        this.$element[0].querySelector('.slider-handle').style.left = event.target.offsetLeft +\n                            event.offsetX + 'px';\n                        let position = event.target.offsetLeft + event.offsetX;\n                        this.seekToPosition((position / this.sliderElem.offsetWidth), 'scrubber');\n                    }\n                }\n\n                calcAdBreakStyle(adBreak) {\n                    return {\n                        left: (adBreak.startTime * 100 / (this.max * 1000)) + '%',\n                        width: (adBreak.duration * 100 / (this.max * 1000)) + '%'\n                    };\n                }\n\n                onKeyUp(event) {\n                    this.mousePosition = null;\n                    if (this.seeking) {\n                        return;\n                    }\n                    if (event.keyCode === 39 || event.keyCode === 38) { // right, up\n                        this.skip(1);\n                    } else if (event.keyCode === 37 || event.keyCode === 40) { // left, down\n                        this.skip(-1);\n                    }\n                }\n\n\n                valueMax() {\n                    return Math.round(this.max / 60);\n                }\n\n                valueNow() {\n                    return Math.round(this.value / 60);\n                }\n\n                getTooltipMessage() {\n                    let msg = '';\n                    if ((this.ffDisabled && (!this.mousePosition || !this.isMouseOnSelectedSlider)) ||\n                        (this.isAdPlaying && this.mousePosition)) {\n                        msg = 'Fast forward is disabled for the duration of this content';\n                    }\n                    return msg;\n                }\n\n                calcSliderHandlePosition() {\n                    if (!this.sliderDragging) {\n                        return {\n                            left: ((this.value / this.max) * 100) + '%'\n                        };\n                    }\n                    return {\n                        left: this.mousePosition\n                    };\n                }\n\n                calcStartTime() {\n                    if (this.mousePosition) {\n                        return parseInt((this.mousePosition / this.sliderElem.offsetWidth) * this.max);\n                    } else {\n                        return this.value;\n                    }\n                }\n\n                calcSliderSelectionWidthFraction() {\n                    let width = (this.value / this.max);\n                    if (this.sliderDragging && !this.isAdPlaying) {\n                        if (this.isPastBuffer(this.mousePositionAsFraction)) {\n                            width = this.bufferTime / this.max;\n                        } else {\n                            width = this.mousePositionAsFraction;\n                        }\n                    }\n                    return width;\n                }\n\n                calcSliderSelectionStyle() {\n                    return {\n                        left: '0px',\n                        width: (this.calcSliderSelectionWidthFraction() * 100) + '%'\n                    };\n                }\n\n                calcSliderBufferStyle() {\n                    let left = this.calcSliderSelectionStyle().width,\n                        //(bufferTime - currentTime) / length of program (52 minutes - 38 minutes) / 60 minutes\n                        width = (((this.bufferTime - this.value) / this.max) * 100) + '%';\n\n                    if (this.sliderDragging) {\n                        if (this.isPastBuffer(this.mousePositionAsFraction)) {\n                            width = 0;\n                        } else {\n                            let bufferPositionAsPercentage = this.bufferTime / this.max,\n                                widthPercentage = bufferPositionAsPercentage - this.mousePositionAsFraction;\n                            width = widthPercentage * 100 + '%';\n                        }\n\n                    }\n                    return {\n                        left: left,\n                        width: width\n                    };\n                }\n\n                calcSliderHighStyle() {\n                    let sliderWidth,\n                        width = (100 - ((this.value / this.max) * 100)) + '%';\n                    if (this.sliderDragging && !this.isAdPlaying) {\n                        if (this.isPastBuffer(this.mousePositionAsFraction)) {\n                            width = (100 - ((this.bufferTime / this.max) * 100)) + '%';\n                        } else {\n                            sliderWidth = this.sliderElem.offsetWidth;\n                            width = sliderWidth - this.mousePosition + 'px';\n                        }\n                    }\n                    return {\n                        right: '0px',\n                        width: width\n                    };\n                }\n\n                calcTooltipPosition() {\n                    // Arrow at center\n                    let tooltipWidth = this.$element[0].querySelector('.slider-tooltip').offsetWidth / 2,\n                        // Tooltip Arrow width\n                        arrowCenter = 10,\n                        // Result style\n                        result = {\n                            'tooltip': {},\n                            'tooltipArrow': {\n                                left: tooltipWidth - arrowCenter + 'px'\n                            }\n                        };\n\n                    if (this.mousePosition) {\n                        result.tooltip.left = this.mousePosition + 'px';\n                    } else {\n                        let newPos = (this.value / this.max);\n                        result.tooltip.left = (newPos * 100) + '%';\n                    }\n\n                    return result;\n                }\n\n                onMouseMove(event) {\n                    // Ignore if dragging. The events from the slider move will take care of position\n                    if (this.sliderDragging) {\n                        return;\n                    }\n\n                    let sliderWidth = this.sliderElem.offsetWidth;\n                    this.mousePosition = event.target.offsetLeft + event.offsetX;\n                    this.isMouseOnSelectedSlider =\n                        this.$element[0].querySelector('.slider-handle').offsetLeft > this.mousePosition;\n                    if (this.mousePosition < 0) {\n                        this.mousePosition = 0;\n                    } else if (this.mousePosition > sliderWidth) {\n                        this.mousePosition = sliderWidth;\n                    }\n                }\n\n                onMouseEnter() {\n                    this.sliderFocused = true;\n                    this.mouseOverSlider = true;\n                }\n\n                onMouseLeave() {\n                    this.mouseOverSlider = false;\n\n                    // Keep slider focused even if mouse moved away.\n                    if (!this.sliderDragging) {\n                        this.sliderFocused = false;\n                        this.mousePosition = null;\n                    }\n                }\n\n                onPlayerEndPositionChanged (time) {\n                    if (this.showBuffer) {\n                        this.bufferTime = time.endPosition / 1000;\n                        this.calcSliderBufferStyle();\n                    }\n                }\n\n                isPastBuffer(position) {\n                    let desiredPositionInSeconds = position * this.max;\n                    return this.showBuffer && desiredPositionInSeconds > this.bufferTime;\n                }\n\n                seekToPosition(position, sourceElement) {\n                    if (this.isAdPlaying) {\n                        return;\n                    }\n\n                    let absPositionSec;\n                    position = Math.min(1, position);\n\n                    // Position at this point is percentage of the UI\n                    // width. Convert this to an absolute value of the\n                    // actual asset length.\n                    absPositionSec = Math.floor(position * this.max);\n                    this.$scope.$emit('seek-to-position', {positionSec: absPositionSec, sourceElement: sourceElement});\n                }\n\n                skip(multiplier) {\n                    this.value += (this.skipSeconds * multiplier);\n                    this.seekToPosition(this.value / this.max, 'skipButton');\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}