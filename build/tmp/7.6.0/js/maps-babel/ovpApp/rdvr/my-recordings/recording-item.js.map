{"version":3,"sources":["ovpApp/rdvr/my-recordings/recording-item.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,CAAC,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEjiB,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAJhH,CAAC,YAAY;IACT;;;;;;;;;;;;IAYA,QAAQ,OAAO,6BAA6B,CACxC,2BACA,mBACA,2BACA,8BACA,+BAEC,UAAU,yBAAyB;QAChC,UAAU;YACN,WAAW;YACX,OAAO;YACP,gBAAgB;;QAEpB,aAAa;QACb,YAAU,CAAA,YAAA;;;;YAEK,SAFG,cAEF,QAAQ,YAAY,aAAa,YAAY,UAAU,OAAO,mBAAmB;gBAC7F,gBAAgB,MAHF;;gBAGV,QAAQ,OAAO,MAAM,EAAC,QAAA,QAAQ,YAAA,YAAY,aAAA,aAAa,YAAA,YAAY,UAAA,UAAU,OAAA;oBACzE,mBAAA;;;YAKZ,aATkB,eAAa,CAAA;gBAU3B,KAAK;gBACL,OAJU,SAAA,WAAC,SAAS;oBAChB,IAAI,QAAQ,SAAS,OAAO,KAAK,UAAU,WAAW;wBAClD,KAAK,QAAQ;;;eAOtB;gBACC,KAAK;gBACL,OALuB,SAAA,0BAAG;oBACtB,IAAI,CAAC,KAAK,aAAa,KAAK,UAAU,SAAS,GAAG,SAAS;wBACvD,OAAO;2BACJ;wBACH,IAAM,eAAe,KAAK,UAAU,SAAS;wBAC7C,IAAI,iBAAiB,GAAG;4BACpB,OAAO,KAAK,UAAU,SAAS,GAAG;+BAC/B;4BACH,OAAU,eAAY;;;;eASnC;gBACC,KAAK;gBACL,OANK,SAAA,QAAG;oBACJ,IAAI,WAAW,QAAQ,UAAU,KAAK,UAAU,SAAS,GAAG;oBAC5D,IAAI,UAAU,KAAK,UAAU,SAAS;oBACtC,IAAI,UAAU;wBACV,KAAK,OAAO,GAAG,kBAAkB;4BAC7B,aAAa,QAAQ;4BACrB,SAAS,QAAQ;4BACjB,WAAW,QAAQ;;2BAEpB;wBACH,KAAK,OAAO,GAAG,iBAAiB;4BAC5B,OAAO,QAAQ;4BACf,SAAS,QAAQ;4BACjB,WAAW,QAAQ;;;;;;;;;eAehC;gBACC,KAAK;gBACL,OAPY,SAAA,aAAC,QAAQ;oBACjB,OAAO;oBACP,KAAK,eAAe,EAAC,WAAW,KAAK,WAAW,OAAO,KAAK;;eASjE;gBACC,KAAK;gBACL,OARc,SAAA,iBAAG;oBASb,IAAI,QAAQ;;;;;;;;;;;;;oBAIZ,IAAI,UAAU,KAAK,WAAW,gBACzB,KAAK,UAAA,KAAO;wBACT,OAAO,MAAK,YAAY,yBAAyB,KAAK,MAAK,UAAU,SAAS;uBAEjF,KACG,YAAM,IACN,YAAM;wBACF,MAAK,MAAM,KAAK,MAAK,kBAAkB,gBAAgB;;;oBAInE,KAAK,WAAW,WACZ,mBACA,SACA,WACA,KAAK,UAAU,SAAS,GAAG;;;;YAIvC,OAtFkB;;;KAuFzB","file":"ovpApp/rdvr/my-recordings/recording-item.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * rdvrRecordingListItem\n     *\n     * Example Usage:\n     * <component-name recording=\"someInputValue\" on-selected=\"outputCallback(param)\"></component-name>\n     *\n     * Bindings:\n     *    recording: ([type]) [description]\n     *    onStateChanged: (function) callback when the selection state changes\n     */\n    angular.module('ovpApp.rdvr.recordingItem', [\n        'ovpApp.components.alert',\n        'ovpApp.messages',\n        'ovpApp.rdvr.rdvrService',\n        'ovpApp.services.stbService',\n        'ovpApp.services.errorCodes'\n        ])\n        .component('rdvrRecordingListItem', {\n            bindings: {\n                recording: '<',\n                state: '<',\n                onStateChanged: '&'\n            },\n            templateUrl: '/js/ovpApp/rdvr/my-recordings/recording-item.html',\n            controller: class ComponentName {\n                /* @ngInject */\n                constructor($state, stbService, rdvrService, $rootScope, messages, alert, errorCodesService) {\n                    angular.extend(this, {$state, stbService, rdvrService, $rootScope, messages, alert,\n                        errorCodesService});\n                }\n\n                $onChanges(changes) {\n                    if (changes.state && typeof this.state !== 'boolean') {\n                        this.state = false;\n                    }\n                }\n\n                episodeTitleDescription() {\n                    if (!this.recording || this.recording.episodes[0].isMovie) {\n                        return '';\n                    } else {\n                        const episodeCount = this.recording.episodes.length;\n                        if (episodeCount === 1) {\n                            return this.recording.episodes[0].episodeTitle;\n                        } else {\n                            return `${episodeCount} Episodes`;\n                        }\n                    }\n                }\n\n                click() {\n                    let isSeries = angular.isDefined(this.recording.episodes[0].tmsSeriesId);\n                    let episode = this.recording.episodes[0];\n                    if (isSeries) {\n                        this.$state.go('product.series', {\n                            tmsSeriesId: episode.tmsSeriesId,\n                            airtime: episode.startTime,\n                            serviceId: episode.mystroServiceId\n                        });\n                    } else {\n                        this.$state.go('product.event', {\n                            tmsId: episode.tmsProgramId,\n                            airtime: episode.startTime,\n                            serviceId: episode.mystroServiceId\n                        });\n                    }\n\n                    // eventGatewayProductPageService.viewShown('contentDetails', 'modalPopup', 'plain', {\n                    //     category: 'My Recordings',\n                    //     contentType: 'linear'\n                    // });\n                }\n\n                stateToggled($event) {\n                    $event.stopPropagation();\n                    this.onStateChanged({recording: this.recording, state: this.state});\n                }\n\n                watchRecording() {\n                    // $rootScope.$emit('EG:sendSwitchScreen', {\n                    //     playerType: 'dvr',\n                    //     assetMetadata: {\n                    //         airingTime: episode.startUnixTimestampSeconds * 1000,\n                    //         channelNumber: episode.displayChannel.toString(),\n                    //         tmsGuideId: episode.mystroServiceId.toString()\n                    //     },\n                    //     direction: 'to',\n                    //     otherDevice: 'stb'\n                    // });\n\n\n                    let promise = this.stbService.getCurrentStb()\n                        .then(stb => {\n                            return this.rdvrService.resumeCompletedRecording(stb, this.recording.episodes[0]);\n                        })\n                        .then(\n                            () => {},\n                            () => {\n                                this.alert.open(this.errorCodesService.getAlertForCode('WCM-1603'));\n                            }\n                        );\n\n                    this.$rootScope.$broadcast(\n                        'message:loading',\n                        promise,\n                        undefined,\n                        this.recording.episodes[0].title\n                    );\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}