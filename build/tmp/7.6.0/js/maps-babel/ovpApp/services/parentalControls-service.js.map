{"version":3,"sources":["ovpApp/services/parentalControls-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/parentalControls-service.js","sourcesContent":["/* globals md5 */\n(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.parentalControlsService', [\n        'ovpApp.config',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.services.rxUtils',\n        'ovpApp.services.profileService'\n    ])\n    .constant('TV_RATINGS', [\n        'TV-Y',\n        'TV-Y7',\n        'TV-G',\n        'TV-PG',\n        'TV-14',\n        'TV-MA'\n    ])\n    .constant('MOVIE_RATINGS', [\n        'G',\n        'PG',\n        'PG-13',\n        'R',\n        'NC-17',\n        'ADULT'\n        //'NR'\n    ])\n    .constant('TV_RATINGS_TYPE', 'TVRatings')\n    .constant('MOVIE_RATINGS_TYPE', 'MovieRatings')\n    .constant('DEFAULT_TV_RATING', 'TV-PG')\n    .constant('DEFAULT_MOVIE_RATING', 'PG-13')\n    .constant('PC_BLOCK_REASON', {\n        rating: 'rating',\n        channel: 'channel'\n    })\n    .constant('PC_UNBLOCK_REASON', {\n        settings: 'settings'\n    })\n    .factory('parentalControlsService', parentalControlsService);\n\n    /* @ngInject */\n    function parentalControlsService($http, $q, config, ovpStorage, storageKeys, $window, TV_RATINGS,\n              MOVIE_RATINGS, TV_RATINGS_TYPE, MOVIE_RATINGS_TYPE, DEFAULT_MOVIE_RATING, DEFAULT_TV_RATING,\n              $timeout, $rootScope, PC_BLOCK_REASON, createObservableFunction, profileService) {\n\n        var getPcDeferred,\n            loggedInUsername = null,\n            adminUsername = null,\n            channelsDefer = null,\n            ratingsDefer = null,\n            service = {\n                getParentalControlsForUser: function () {\n                    if (!getPcDeferred) {\n                        getPcDeferred = $q.defer();\n                        return $http({\n                            method: 'GET',\n                            url: config.parentalControls.parentalControlsForUserUrl(),\n                            withCredentials: true\n                        }).then(function (response) {\n                            var data = response.data;\n                            loggedInUsername = data.loggedInUsername;\n                            adminUsername = data.adminUsername;\n                            getPcDeferred.resolve(data);\n                        }, function (error) {\n                            getPcDeferred.reject(error);\n                            getPcDeferred = null;\n                        });\n                    }\n                    return getPcDeferred.promise;\n                },\n                getRatingsForUser: function () {\n                    if (!ratingsDefer) {\n                        ratingsDefer = $q.defer();\n                        service.getParentalControlsForUser().then(() => {\n                            return $http({\n                                method: 'GET',\n                                url: config.parentalControls.parentalControlsByRatingUrl(),\n                                withCredentials: true\n                            })\n                            .then(function (response) {\n                                //BLATENT Hack to remove NR\n                                var ratings = response.data,\n                                    movieRatings = ratings.parentalControls.MovieRatings,\n                                    nrIndex = movieRatings.findIndex((r) => r.rating === 'NR');\n\n                                if (nrIndex > -1) {\n                                    ratings.parentalControls.MovieRatings.splice(nrIndex, 1);\n                                }\n                                //END BLATENT HACK\n                                ratingsDefer.resolve(ratings);\n                            }, function (error) {\n                                ratingsDefer.reject(error);\n                                ratingsDefer = null;\n                            });\n                        });\n                    }\n                    return ratingsDefer.promise;\n                },\n                updateRatingForUser: function (json) {\n                    return $http({\n                        method: 'PUT',\n                        url: config.parentalControls.parentalControlsByRatingUrl(),\n                        data: JSON.stringify(json),\n                        withCredentials: true,\n                        contentType: 'application/json'\n                    })\n                    .then(() => {\n                        ratingsDefer = null;\n                        return this.getRatingsForUser()\n                            .then(() => {\n                                $rootScope.$emit('ParentalControls:updated');\n                            });\n                    });\n                },\n                getLoggedInUsername: function () {\n                    return service.getParentalControlsForUser().then(() => {\n                        return loggedInUsername;\n                    });\n                },\n                setDefaultRatings: function () {\n                    return this.unblockRating(DEFAULT_MOVIE_RATING, DEFAULT_TV_RATING);\n                },\n                isPrimaryAccount: function () {\n                    return service.getParentalControlsForUser().then(() => {\n                        return loggedInUsername === adminUsername;\n                    });\n                },\n                getParentalControlsDomainKey: function () {\n                    return service.getLoggedInUsername().then(username => {\n                        return 'ovpApp.pc.' + username;\n                    });\n                },\n                clearAllChannelBlocks: function () {\n                    return this.updateParentalControlsByChannel([]);\n                },\n                isParentalControlsDisabledForClient: function () {\n                    let disabled = ovpStorage.getItem(storageKeys.parentalControlsDisabled);\n                    // May be undefined or false\n                    if (!disabled) {\n                        disabled = false;\n                    }\n                    if (profileService.isSpecUOrBulkMDU()) {\n                        return $q.resolve(true);\n                    } else {\n                        return this.isPINSet().then((hasSavedPin) => {\n                            return disabled || !hasSavedPin; // disable parental controls if no pin is set\n                        });\n                    }\n                },\n                isBlocked: function (ratings, tmsGuideServiceIds, providerIds) {\n                    var rating,\n                        guide,\n                        provider,\n                        blockResponse = {\n                            isBlocked: false,\n                            reason: null\n                        };\n\n                    return this.isParentalControlsDisabledForClient().then(isDisabled => {\n                        if (isDisabled) {\n                            return blockResponse;\n                        } else {\n                            if (ratings && ratings.length) {\n                                rating = this.isBlockedByRating(ratings);\n                            } else {\n                                rating = false;\n                            }\n\n                            if (tmsGuideServiceIds && tmsGuideServiceIds.length) {\n                                guide = this.isChannelBlockedByTmsGuideServiceId(tmsGuideServiceIds);\n                            } else {\n                                guide = false;\n                            }\n\n                            if (providerIds && providerIds.length) {\n                                provider = this.isChannelBlockedByProviderIds(providerIds);\n                            } else {\n                                provider = false;\n                            }\n\n                            return $q.all([rating, guide, provider]).then(blocks => {\n                                let [isRatingBlocked, isGuideIdBlocked, isProviderIdBlocked] = blocks;\n                                if (isRatingBlocked) {\n                                    blockResponse.isBlocked = true;\n                                    blockResponse.reason = PC_BLOCK_REASON.rating;\n                                } else if (isGuideIdBlocked || isProviderIdBlocked) {\n                                    blockResponse.isBlocked = true;\n                                    blockResponse.reason = PC_BLOCK_REASON.channel;\n                                }\n                                return blockResponse;\n                            });\n                        }\n                    });\n                },\n\n                disableParentalControlsForClient: function () {\n                    ovpStorage.setItem(storageKeys.parentalControlsDisabled, true);\n                    $rootScope.$emit('ParentalControls:updated');\n\n                    // TODO: Analytics Event\n                    // $rootScope.$emit('EG:settingParentalControlsToggled', {\n                    //     enabled: false\n                    // });\n                },\n                enableParentalControlsForClient: function () {\n                    ovpStorage.setItem(storageKeys.parentalControlsDisabled, false);\n                    $rootScope.$emit('ParentalControls:updated');\n\n                    // TODO: Analytics Event\n                    // $rootScope.$emit('EG:settingParentalControlsToggled', {\n                    //     enabled: true\n                    // });\n                },\n                hasChannelBlockingEnabled: function () {\n                    // TBD check callers and change to synchronous\n                    return $q.resolve(!!ovpStorage.getItem(storageKeys.parentalControlsChannelEnabled));\n                },\n                clearSession: function () {\n                    // TBD check callers and change to synchronous\n                    return $q.resolve(ovpStorage.removeItem(storageKeys.parentalControlsUnlocked));\n                },\n                savePINLocally: function (pin) {\n                    return $q.resolve(ovpStorage.setItem(storageKeys.parentalControlsLocalPin, md5(pin)));\n                },\n                getLocalPin: function () {\n                    return $q.resolve(ovpStorage.getItem(storageKeys.parentalControlsLocalPin));\n                },\n                createRatingsUpdateJson: function (movieRating, tvRating) {\n                    var unblockedMovieRatingIndex = MOVIE_RATINGS.indexOf(movieRating),\n                        unblockedTvRatingIndex = TV_RATINGS.indexOf(tvRating),\n                        ratingsJson =\n                        {\n                            parentalControls: {\n                                blockedTVRatings: [],\n                                blockedMovieRatings: [],\n                                blockUnrated: false\n                            }\n                        };\n\n                    for (var i = unblockedMovieRatingIndex + 1; i < MOVIE_RATINGS.length; i++) {\n                        ratingsJson.parentalControls.blockedMovieRatings.push(MOVIE_RATINGS[i]);\n                    }\n\n                    for (i = unblockedTvRatingIndex + 1; i < TV_RATINGS.length; i++) {\n                        ratingsJson.parentalControls.blockedTVRatings.push(TV_RATINGS[i]);\n                    }\n                    return ratingsJson;\n                },\n                compareRatingOrdinalLevel: function (ratingA, ratingB) {\n                    //compare the ratings and return -1 if rating a is\n                    //less than b,0 if equal and 1 otherwise\n                    //Array.sort compatible for a list of rating strings\n                    var idxA = TV_RATINGS.indexOf(ratingA), idxB = TV_RATINGS.indexOf(ratingB);\n                    if (idxA < 0 || idxB < 0) {\n                        idxA = MOVIE_RATINGS.indexOf(ratingA);\n                        idxB = MOVIE_RATINGS.indexOf(ratingB);\n                    }\n                    if (idxA < 0 || idxB < 0) {\n                        throw 'Unable to determine rating system: ' +\n                            ratingA + ', ' + ratingB;\n                    }\n                    return (idxA < idxB) ? (idxA === idxB) ? 0 : -1 : 1;\n                },\n                sortRatingList: function (ratings) {\n                    //In place sort\n                    return ratings.sort(this.compareRatingOrdinalLevel);\n                },\n                getHighestRatingFromList: function (ratings) {\n                    return this.sortRatingList(ratings.slice()).pop();\n                },\n                getHighestUnblockedRatingByType: function (type) {\n                    return this.getRatingsForUser().then(ratings => {\n                        var ratingsByType = ratings.parentalControls[type],\n                            i;\n                        for (i = 0; i < ratingsByType.length; i++) {\n                            if (config.getBool(ratingsByType[i].blocked)) {\n                                break;\n                            }\n                        }\n                        if (i === 0) {\n                            return '';\n                        } else {\n                            return ratingsByType[i - 1].rating;\n                        }\n                    });\n                },\n                unblockRating: function (movieRating, tvRating) {\n                    return this.updateRatingForUser(this.createRatingsUpdateJson(movieRating, tvRating));\n                },\n                isBlockedByRating: function (ratings) {\n                    if (!angular.isArray(ratings)) {\n                        ratings = [ratings];\n                    }\n                    let promises = [];\n                    ratings.forEach(tvOrMovieRating => {\n                        let isTvRating = TV_RATINGS.includes(tvOrMovieRating);\n                        let isMovieRating = MOVIE_RATINGS.includes(tvOrMovieRating);\n                        if (isTvRating) {\n                            promises[promises.length] = this.isTvShowBlockedByRating(tvOrMovieRating);\n                        } else if (isMovieRating) {\n                            promises[promises.length] = this.isMovieBlockedByRating(tvOrMovieRating);\n                        } else {\n                            let defer = $q.defer();\n                            defer.resolve(false);\n                            promises[promises.length] = defer.promise;\n                        }\n                    });\n\n                    return $q.all(promises)\n                        .then(results => results.every(r => r));\n                },\n                isMovieRating: function (rating) {\n                    return MOVIE_RATINGS.includes(rating);\n                },\n                isTvShowBlockedByRating: function (rating) {\n                    return service.isParentalControlsDisabledForClient().then(value => {\n                        if (value) {\n                            return false;\n                        } else {\n                            return service.getUnblockedTvRating()\n                                .then(currentUnBlockedRating => {\n                                    if (!currentUnBlockedRating) {\n                                        return true;\n                                    } else {\n                                        if (TV_RATINGS.indexOf(rating) > -1 &&\n                                            TV_RATINGS.indexOf(currentUnBlockedRating) > -1) {\n                                            return TV_RATINGS.indexOf(currentUnBlockedRating) <\n                                                TV_RATINGS.indexOf(rating);\n                                        } else {\n                                            return false;\n                                        }\n                                    }\n                                });\n                        }\n                    });\n                },\n                isMovieBlockedByRating: function (rating) {\n                    return service.isParentalControlsDisabledForClient().then(value => {\n                        if (value) {\n                            return false;\n                        } else {\n                            return service.getUnblockedMovieRating()\n                                .then(currentUnBlockedRating => {\n                                    if (!currentUnBlockedRating) {\n                                        return true;\n                                    } else {\n                                        if (MOVIE_RATINGS.indexOf(rating) > -1 &&\n                                            MOVIE_RATINGS.indexOf(currentUnBlockedRating) > -1) {\n                                            return MOVIE_RATINGS.indexOf(currentUnBlockedRating) <\n                                                MOVIE_RATINGS.indexOf(rating);\n                                        } else {\n                                            return false;\n                                        }\n                                    }\n                                });\n                        }\n                    });\n                },\n                getUnblockedTvRating: function () {\n                    return this.getHighestUnblockedRatingByType(TV_RATINGS_TYPE);\n                },\n                getUnblockedMovieRating: function () {\n                    return this.getHighestUnblockedRatingByType(MOVIE_RATINGS_TYPE);\n                },\n                isPINSet: function () {\n                    return service.getParentalControlsForUser().then(json => {\n                        return json ? config.getBool(json.pinSet) : false;\n                    });\n                },\n                shouldSetDefaults: function () {\n                    return this.isPINSet().then(hasSavedPin => {\n                        if (!hasSavedPin) {\n                            return this.parentalControlsByChannel().then(channels => {\n                                let foundChannel =\n                                    channels.find(channel => channel.services.find(s => s.blocked === true));\n                                return foundChannel === undefined;\n                            });\n                        } else {\n                            return false;\n                        }\n                    });\n                },\n                validatePIN: function (pin) {\n                    var pinJson = {parentalControlPIN: md5(pin)};\n                    return $http({\n                        method: 'POST',\n                        url: config.parentalControls.validatePINUrl(),\n                        data: JSON.stringify(pinJson),\n                        withCredentials: true,\n                        bypassRefresh: true //Do not attempt to refresh authentication on 401 of 403\n                    })\n                    .then(function () {\n                        service.savePINLocally(pin);\n                    });\n                },\n                setPIN: function (pin, password) {\n                    var defer = $q.defer();\n                    let postData = {parentalControlPIN: pin};\n                    if (password !== undefined && password !== '') {\n                        postData.adminPassword = password;\n                    }\n                    $http({\n                        method: 'POST',\n                        url: config.parentalControls.setPINUrl(),\n                        data: JSON.stringify(postData),\n                        withCredentials: true\n                    }).then(() => {\n                        //needs a delay for pinSet\n                        $timeout(function () {\n                            getPcDeferred = null;\n                            service.savePINLocally(pin);\n                            defer.resolve();\n                        }, 1000);\n                    });\n                    return defer.promise;\n                },\n                setPINForFirstTimeWithDefaultRatings: function (pin, password) {\n                    return service.setPIN(pin, password).then(() => {\n                        return service.setDefaultRatings().then(() => {\n                            return service.getParentalControlsForUser();\n                        });\n                    });\n                },\n                parentalControlsByChannel: function () {\n                    if (!channelsDefer) {\n                        channelsDefer = $q.defer();\n                        $http({\n                            method: 'GET',\n                            url: config.parentalControls.parentalControlsByChannelUrl(),\n                            withCredentials: true\n                        })\n                        .then(response => {\n                            channelsDefer.resolve(response.data);\n                        }, error => {\n                            channelsDefer.reject(error);\n                        });\n                    }\n                    return channelsDefer.promise;\n                },\n                isChannelBlockedByTmsGuideServiceId: function (tmsGuideServiceIds) {\n                    return service.isParentalControlsDisabledForClient().then(value => {\n                        if (value) {\n                            return false;\n                        } else {\n                            if (!angular.isArray(tmsGuideServiceIds)) {\n                                tmsGuideServiceIds = [tmsGuideServiceIds];\n                            }\n                            tmsGuideServiceIds = tmsGuideServiceIds.map(id => parseInt(id));\n                            return this.parentalControlsByChannel().then(channels => {\n                                let foundService = [];\n                                channels.forEach(function (channel) {\n                                    channel.services.forEach(function (service) {\n                                        if (service.tmsGuideId &&\n                                            tmsGuideServiceIds.includes(parseInt(service.tmsGuideId))) {\n                                            foundService.push(service);\n                                        }\n                                    });\n                                });\n                                //If all are blocked\n                                if (foundService.length > 0 &&\n                                    foundService.length === tmsGuideServiceIds.length &&\n                                    foundService.every(service => service.blocked)) {\n                                    return true;\n                                } else {\n                                    return false;\n                                }\n                            });\n                        }\n                    });\n                },\n                isChannelBlockedByProviderIds: function (providerIds) {\n                    return service.isParentalControlsDisabledForClient().then(value => {\n                        if (value || !(providerIds && providerIds.length > 0)) {\n                            return false;\n                        } else {\n                            return this.parentalControlsByChannel().then(channels => {\n                                //Reduce to only services, filter to providers that provide this product\n                                //check that all providers are blocked\n                                let matchedServices =\n                                    //Reduce to just the services\n                                    channels.reduce((memo, channel) => memo.concat(channel.services), []).\n                                    //Get only the services we have matching provider ids\n                                    filter(srvc => srvc.productProviders &&\n                                        srvc.productProviders.some(id => providerIds.includes(id)));\n\n                                //Make sure that we matched at least one service and\n                                //all the services are blocked\n                                return matchedServices.length > 0 && matchedServices.every(srvc => srvc.blocked);\n                            });\n                        }\n                    });\n                },\n                createChannelUpdateJson: function (channels) {\n                    var channelUpdateJson = {\n                        parentalControls: {\n                            blockedChannels: []\n                        }\n                    };\n\n                    channels.forEach(channel => {\n                        channel.services.forEach(service => {\n                            if (service.blocked) {\n                                channelUpdateJson.parentalControls\n                                    .blockedChannels.push({ncsServiceId: parseInt(service.ncsServiceId)});\n                            }\n                        });\n                    });\n                    return channelUpdateJson;\n                },\n                validateAdminPassword: function (password) {\n                    return $http({\n                        method: 'POST',\n                        url: config.parentalControls.validateAdminPasswordUrl(),\n                        data: JSON.stringify({'adminPassword': password}),\n                        withCredentials: true\n                    });\n                },\n                updateParentalControlsByChannel: function (channels) {\n                    return $http({\n                        method: 'POST',\n                        url: config.parentalControls.updateParentalControlsByChannelUrl(),\n                        contentType: 'application/json',\n                        data: JSON.stringify(service.createChannelUpdateJson(channels)),\n                        withCredentials: true\n                    })\n                    .then(() => {\n                        channelsDefer = null;\n                    });\n                }\n            };\n\n        service.debounceUnblockRating = createObservableFunction();\n        service.debounceUnblockRating\n            .debounce(1000)\n            .subscribe(params => service.unblockRating(...params));\n\n        return service;\n    }\n}());\n"],"sourceRoot":"/source/"}