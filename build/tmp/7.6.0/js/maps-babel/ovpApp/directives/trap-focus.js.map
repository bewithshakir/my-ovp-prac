{"version":3,"sources":["ovpApp/directives/trap-focus.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,+BAA+B,IACtC,UAAU,aAAa;;;IAG5B,SAAS,UAAU,WAAW;QAC1B,IAAM,YAAY;YACd,MAAM;YACN,UAAU;;QAEd,OAAO;;QAEP,SAAS,KAAK,OAAO,SAAS;YAC1B,IAAM,SAAS;YACf,IAAM,mBAAmB,wEACrB,kGACA,sDACA;;YAEJ,QAAQ,GAAG,WAAW;;YAEtB,MAAM,IAAI,YAAY,YAAA;gBAFlB,OAEwB,QAAQ,IAAI,WAAW;;;YAEnD,SAAS,gBAAgB,OAAO;gBAC5B,IAAI,MAAM,sBAAsB;oBAC5B,OAAO;;;gBAGX,IAAI,eAAe;gBACnB,IAAI,MAAM,UAAU,QAAQ;oBACxB,IAAM,OAAO;oBACb,IAAI,MAAM,YAAY,WAAW,KAAK,KAAK;wBACvC,eAAe,SAAS,KAAK,KAAK,SAAS;2BACxC,IAAI,CAAC,MAAM,YAAY,WAAW,KAAK,KAAK,SAAS,KAAK;wBAC7D,eAAe,SAAS,KAAK;;;oBAGjC,IAAI,cAAc;wBACd,MAAM;wBACN,MAAM;;;;;YAKlB,SAAS,eAAe;gBACpB,IAAI,WAAW,QAAQ,KAAK;gBAC5B,OAAO,WAAW,MAAM,UAAU,OAAO,KAAK,UAAU,UAAA,IAAE;oBAAtD,OAA0D,UAAU;qBAAO;;;YAGnF,SAAS,UAAU,SAAS;gBACxB,OAAO,CAAC,EAAE,QAAQ,eAChB,QAAQ,gBACR,QAAQ,iBAAiB;;;YAG/B,SAAS,WAAW,SAAS;gBACzB,OAAO,YAAY,UAAU,GAAG;;;YAGpC,SAAS,SAAS,SAAS;gBACvB,IAAI,SAAS;oBACT,QAAQ;oBACR,OAAO;;gBAEX,OAAO;;;;KAIlB","file":"ovpApp/directives/trap-focus.js","sourcesContent":["/**\n * trap focus\n *\n * Catches tab and shift-tab keys and loops them around the navigable items inside the element, rather than letting\n * it move on to other elements.\n *\n * Typically this directive should be used in conjunction with some way of dismissing the element, such as an exit\n * button or a listener for the escape key. Such exit behavior is not built in to the trapFocus directive.\n *\n * usage:\n * <div trap-focus>\n *    <a href=\"#\">first link</a>\n *    <a href=\"#\">second link</a>\n * </div>\n *\n * In the above example, tab and shift tab will bounce between the first and second link.\n */\n\n(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.directives.trapFocus', [])\n        .directive('trapFocus', trapFocus);\n\n    /* @ngInject */\n    function trapFocus($document) {\n        const directive = {\n            link: link,\n            restrict: 'A'\n        };\n        return directive;\n\n        function link(scope, element) {\n            const tabKey = 9;\n            const tabbableSelector = 'a[href], area[href], input:not([disabled]):not([tabindex=\\'-1\\']), ' +\n                'button:not([disabled]):not([tabindex=\\'-1\\']),select:not([disabled]):not([tabindex=\\'-1\\']), ' +\n                'textarea:not([disabled]):not([tabindex=\\'-1\\']), ' +\n                'iframe, object, embed, *[tabindex]:not([tabindex=\\'-1\\']), *[contenteditable=true]';\n\n            element.on('keydown', keyDownListener);\n\n            scope.$on('$destroy', () => element.off('keydown', keyDownListener));\n\n            function keyDownListener(event) {\n                if (event.isDefaultPrevented()) {\n                    return event;\n                }\n\n                let focusChanged = false;\n                if (event.which === tabKey) {\n                    const list = getFocusList();\n                    if (event.shiftKey && isFocussed(list[0])) {\n                        focusChanged = setFocus(list[list.length - 1]);\n                    } else if (!event.shiftKey && isFocussed(list[list.length - 1])) {\n                        focusChanged = setFocus(list[0]);\n                    }\n\n                    if (focusChanged) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }\n            }\n\n            function getFocusList() {\n                let elements = element.find(tabbableSelector);\n                return elements ? Array.prototype.filter.call(elements, el => isVisible(el)) : elements;\n            }\n\n            function isVisible(element) {\n                return !!(element.offsetWidth ||\n                  element.offsetHeight ||\n                  element.getClientRects().length);\n            }\n\n            function isFocussed(element) {\n                return element === $document[0].activeElement;\n            }\n\n            function setFocus(element) {\n                if (element) {\n                    element.focus();\n                    return true;\n                }\n                return false;\n            }\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}