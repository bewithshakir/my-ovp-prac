{"version":3,"sources":["ovpApp/product/actions/product-action-map.js"],"names":[],"mappings":"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","file":"ovpApp/product/actions/product-action-map.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.product.productActionService')\n    .factory('actionTypeMap', actionTypeMap);\n\n    /* @ngInject */\n    function actionTypeMap(dateFormat, messages, productService) {\n        return {\n            watchOnDemandIP: {\n                id: 'watchOnDemandIP',\n                icon: playOrStartOver,\n                label: function (asset, action) {\n                    // 'On Demand',\n                    let stream =  asset.streamList[action.streamIndex];\n                    if (stream.streamProperties.ondemandStreamType === 'TOD') {\n                        return 'Play';\n                    } else {\n                        return 'Watch On\\xa0Demand';\n                    }\n                },\n                otherWaysWatchOnTVLabel: 'On Demand',\n                oohRestricted: true,\n                hoverText: getRentPlayHoverText,\n                otherWaysToWatchSrOnlyLabel: function () {\n                    return 'Watch On\\xa0Demand';\n                }\n            },\n            resumeOnDemandIP: {\n                id: 'resumeOnDemandIP',\n                icon: playOrStartOver,\n                label: 'Resume',\n                oohRestricted: true,\n                hoverText: function (asset) {\n                    var position, bm = asset.bookmark;\n                    if (!bm) {\n                        return '';\n                    } else {\n                        position = dateFormat.elapsedAndDuration(bm.playMarkerSeconds, bm.runtimeSeconds);\n                        return `Continue watching at ${position}`;\n                    }\n                },\n                otherWaysWatchOnTVLabel: 'On Demand'\n            },\n            addToWatchList: {\n                id: 'addToWatchList',\n                icon: 'plus-icon',\n                label: 'Watch Later',\n                hoverText: messages.getMessageForCode('MSG-9064')\n            },\n            removeFromWatchList: {\n                id: 'removeFromWatchList',\n                icon: 'remove-icon',\n                label: 'Remove',\n                hoverText: messages.getMessageForCode('MSG-9065')\n            },\n            otherWaysToWatch: {\n                id: 'otherWaysToWatch',\n                icon: 'ellipsis-horizontal-icon',\n                label: 'Other Ways To Watch'\n            },\n            scheduleRecording: {\n                id: 'scheduleRecording',\n                icon: 'record-icon',\n                label: function (asset) {\n                    return asset.isEpisode ? 'Record Episode' : 'Record';\n                },\n                otherWaysWatchOnTVLabel: 'Live TV',\n                hoverText: function (asset, action) {\n                    //This is only to schedule a single recording\n                    if (action.streamIndex >= 0 && asset && asset.streamList) {\n                        let recordStream = asset.streamList[action.streamIndex];\n                        let dateString = dateFormat.absolute.expanded.atTime(\n                            new Date(parseInt(recordStream.streamProperties.startTime, 10))\n                        );\n\n                        return `Record this show on ${dateString}`;\n\n                    }\n                }\n            },\n            watchLiveIP: {\n                id: 'watchLiveIP',\n                icon: 'play-large-icon',\n                label: 'Watch Live',\n                otherWaysWatchOnTVLabel: 'On Now',\n                oohRestricted: true,\n                hoverText: function (asset, action) {\n                    if (action.streamIndex >= 0 && asset && asset.streamList) {\n                        let recordStream = asset.streamList[action.streamIndex];\n                        let streamStart = parseInt(recordStream.streamProperties.startTime, 10);\n                        let streamEnd = parseInt(recordStream.streamProperties.endTime, 10);\n                        let dateString;\n\n                        if (isOnNow(recordStream)) {\n                            dateString = 'On now';\n                        } else {\n                            dateString = dateFormat.absolute.expanded(streamStart);\n                        }\n\n                        let timeString = `${dateFormat.timeOfDay(streamStart)} - ${dateFormat.timeOfDay(streamEnd)}`;\n\n                        return `${dateString}, ${timeString} on ${recordStream.network.name}`;\n                    }\n                }\n            },\n            watchOnDemandOnTv: {\n                id: 'watchOnDemandOnTv',\n                icon: 'flick-icon',\n                label: 'Watch on TV',\n                hoverText: messages.getMessageForCode('MSG-9074'),\n                otherWaysWatchOnTVLabel: 'On Demand'\n            },\n            resumeOnDemandOnTv: {\n                id: 'resumeOnDemandOnTv',\n                icon: 'flick-icon',\n                label: 'Resume On TV',\n                hoverText: messages.getMessageForCode('MSG-9075'),\n                otherWaysWatchOnTVLabel: 'Resume On TV'\n            },\n            scheduleSeriesRecording: {\n                id: 'scheduleSeriesRecording',\n                icon: 'record-series-icon',\n                label: 'Record',\n                hoverText: messages.getMessageForCode('MSG-9077')\n            },\n            editSeriesRecording: {\n                id: 'editSeriesRecording',\n                icon: 'wrench-icon',\n                label: 'Options',\n                hoverText: messages.getMessageForCode('MSG-9063')\n            },\n            editRecording: {\n                id: 'editRecording',\n                icon: 'wrench-icon',\n                label: 'Options',\n                hoverText: messages.getMessageForCode('MSG-9063')\n            },\n            futureAiring: {\n                id: 'futureAiring',\n                icon: '',\n                label: '',\n                otherWaysWatchOnTVLabel: 'Future Airing'\n            },\n            deleteRecording: {\n                id: 'deleteRecording',\n                icon: 'trash-icon',\n                label: 'Delete',\n                hoverText: messages.getMessageForCode('MSG-9062')\n            },\n            playRecordingOnTv: {\n                id: 'playRecordingOnTv',\n                icon: 'flick-icon',\n                label: 'Watch on TV',\n                hoverText: messages.getMessageForCode('MSG-9076'),\n                otherWaysWatchOnTVLabel: 'DVR'\n            },\n            watchLiveOnTv: {\n                id: 'watchLiveOnTv',\n                icon: 'flick-icon',\n                label: 'Watch on TV',\n                hoverText: messages.getMessageForCode('MSG-9073'),\n                otherWaysWatchOnTVLabel: 'On Now'\n            },\n            cancelSeriesRecording: {\n                id: 'cancelSeriesRecording',\n                icon: 'remove-icon',\n                label: 'Cancel',\n                hoverText: messages.getMessageForCode('MSG-9078')\n            },\n            cancelRecording: {\n                id: 'cancelRecording',\n                icon: 'remove-icon',\n                label: 'Cancel',\n                hoverText: function (asset, action) {\n                    //This is only to cancel a single recording\n                    if (action.streamIndex >= 0 && asset && asset.streamList) {\n                        let recordStream = asset.streamList[action.streamIndex];\n                        let dateString = dateFormat.absolute.expanded.atTime(\n                            new Date(parseInt(recordStream.streamProperties.startTime, 10))\n                        );\n\n                        return `Cancel the scheduled recording on ${dateString}`;\n\n                    }\n                }\n            },\n            cdvrPlayRecording: {\n                id: 'cdvrPlayRecording',\n                icon: playOrStartOver,\n                label: 'Watch Recording',   // UNISTR DVR\n                otherWaysLabel: 'Watch',   // UNISTR WATCH\n                hoverText: function (asset, action) {\n                    if (asset && asset.isOnNow && !asset.bookmark) {\n                        // UNISTR BUTTON_ROLLOVER_RESTART_DVR\n                        return 'Watch your recording from the beginning on your DVR';\n                    } else {\n                        // UNISTR BUTTON_ROLLOVER_PLAY\n                        return 'Recorded on ' + productService.getCdvrDateText(asset, action);\n                    }\n                },\n                otherWaysToWatchSrOnlyLabel: function () {\n                    return 'Watch your recording';\n                },\n                otherWaysWatchOnTVLabel: 'DVR'  // UNISTR DVR\n            },\n            cdvrResumeRecording: {\n                id: 'cdvrResumeRecording',\n                icon: 'play-large-icon',\n                label: 'Resume',    // UNISTR RESUME\n                hoverText: function (asset, action) {\n                    let recordedStream = asset.streamList[action.streamIndex];\n                    let bm = recordedStream.bookmark;\n                    let position;\n\n                    if (!bm) {\n                        return '';\n                    } else {\n                        position = dateFormat.elapsedAndDuration(bm.playMarkerSeconds, bm.runtimeSeconds);\n                        // UNISTR BUTTON_ROLLOVER_RESUME\n                        return `Resume watching at ${position}`;\n                    }\n                },\n                otherWaysWatchOnTVLabel: 'DVR'  // UNISTR DVR\n            },\n            cdvrScheduleRecording: {\n                id: 'cdvrScheduleRecording',\n                icon: 'record-icon',\n                label: function (asset) {\n                    return asset.isEpisode ? 'Record Episode' : 'Record'; // UNISTR RECORD\n                },\n                hoverText: function (asset, action) {\n                    // UNISTR BUTTON_ROLLOVER_RECORD_SINGLE\n                    return 'Record this show on ' + productService.getCdvrDateText(asset, action);\n                },\n                otherWaysWatchOnTVLabel: 'Live TV'\n            },\n            cdvrScheduleRecordingNotAvailable: {\n                id: 'cdvrScheduleRecordingNotAvailable',\n                icon: 'record-icon',\n                label: 'Record',    // UNISTR RECORD\n                // UNISTR BUTTON_ROLLOVER_RECORD_INACTIVE\n                hoverText: 'Recording is currently unavailable for programs on this network',\n                disabled: true  // Shows but in a disabled state\n            },\n            cdvrCancelRecording: {\n                id: 'cdvrCancelRecording',\n                icon: 'remove-icon',\n                label: 'Cancel',   // UNISTR CANCEL\n                hoverText: function (asset, action) {\n                    // UNISTR BUTTON_ROLLOVER_RECORD_CANCEL\n                    return 'Cancel the scheduled recording on ' + productService.getCdvrDateText(asset, action);\n                },\n                otherWaysWatchOnTVLabel: 'Live TV'\n            },\n            cdvrScheduleSeriesRecording: {\n                id: 'cdvrScheduleSeriesRecording',\n                icon: 'record-series-icon',\n                label: 'Record Series',    // UNISTR SERIES_RECORD\n                hoverText: 'Record the series' // BUTTON_ROLLOVER_RECORD_SERIES\n            },\n            cdvrScheduleSeriesRecordingNotAvailable: {\n                id: 'cdvrScheduleSeriesRecordingNotAvailable',\n                icon: 'record-series-icon',\n                label: 'Record',    // UNISTR RECORD\n                // UNISTR BUTTON_ROLLOVER_RECORD_INACTIVE\n                hoverText: 'Recording is currently unavailable for programs on this network',\n                disabled: true  // Shows but in a disabled state\n            },\n            cdvrCancelSeriesRecording: {\n                id: 'cdvrCancelSeriesRecording',\n                icon: 'remove-icon',\n                label: 'Cancel Series',    // UNISTR SERIES_CANCEL\n                hoverText: 'Cancel recording for the series' // BUTTON_ROLLOVER_RECORD_CANCEL_SERIES\n            },\n            cdvrDeleteRecording: {\n                id: 'cdvrDeleteRecording',\n                icon: 'trash-icon',\n                label: 'Delete Recording',   // UNISTR DELETE\n                hoverText: 'Permanently delete this recorded show', // UNISTR BUTTON_ROLLOVER_RECORD_DELETE\n                otherWaysWatchOnTVLabel: 'DVR'  // UNISTR DVR\n            },\n            rentOnDemand: {\n                id: 'rentOnDemand',\n                icon: 'ticket-icon',\n                label: function (asset, action) {\n                    if (asset && action && action.streamIndex >= 0 && !asset.isComplexOffering) {\n                        let stream = asset.streamList[action.streamIndex];\n                        if (stream.streamProperties.tvodEntitlement) {\n                            return 'Play';\n                        } else if (asset.price === 0 || asset.price === 0.00) {\n                            return 'Free';\n                        } else {\n                            return 'Rent $' + asset.price;\n                        }\n                    }\n                    return 'Rent';\n                },\n                hoverText: getRentPlayHoverText\n            },\n            watchTrailerIP: {\n                id: 'watchTrailerIP',\n                icon: 'play-large-icon',\n                label: 'Play Trailer',\n                hoverText: messages.getMessageForCode('MSG-9061')\n            },\n\n            //Unhandled events\n            watchTrailerOnTV: {}, //Not used yet\n            subscribeUpSell: {}\n        };\n\n        /////////\n\n        function isOnNow(stream) {\n            let now = Date.now();\n            return stream && stream.streamProperties.startTime <= now && stream.streamProperties.endTime > now;\n        }\n\n        function getRentPlayHoverText(asset, action) {\n            if (asset && action && action.streamIndex >= 0) {\n                let stream = asset.streamList[action.streamIndex];\n                if (stream.streamProperties.ondemandStreamType === 'TOD') {\n                    if (stream.streamProperties.tvodEntitlement) {\n                        //dateFormat.relative.standard(new Date())\n                        let endTime = stream.streamProperties\n                            .tvodEntitlement.rentalEndTimeUtcSeconds;\n                        let time = dateFormat.relative.expanded.atTime(new Date(endTime * 1000));\n                        return `Watch rental until ${time}`;\n                    } else {\n                        if (!asset.isComplexOffering) {\n                            return 'Rent for $' + asset.price +\n                                '. Available for ' + stream.streamProperties.rentalWindowInHours +\n                                ' hours.';\n                        } else {\n                            let cheapestStream = asset.streamList\n                                .filter(str => str.streamProperties.ondemandStreamType === 'TOD')\n                                .filter(str => str.streamProperties.price > 0)\n                                .sort((a, b) => a.streamProperties.price - b.streamProperties.price)\n                                .shift();\n                            return 'Rent from $' + cheapestStream.streamProperties.price +\n                                '. Available for ' + cheapestStream.streamProperties.rentalWindowInHours +\n                                ' hours.';\n                        }\n                    }\n                } else {\n                    //Free OnDemand\n                    let d = new Date(0);\n                    d.setUTCSeconds(stream.streamProperties.endTime / 1000);\n                    return 'Available until ' + dateFormat.relative.short(d);\n                }\n            }\n        }\n\n        function playOrStartOver(asset) {\n            if (asset && asset.isOnNow && !asset.bookmark) {\n                return 'restart-icon';\n            } else {\n                return 'play-large-icon';\n            }\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}