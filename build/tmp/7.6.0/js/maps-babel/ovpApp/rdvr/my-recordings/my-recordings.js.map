{"version":3,"sources":["ovpApp/rdvr/my-recordings/my-recordings.js"],"names":[],"mappings":"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","file":"ovpApp/rdvr/my-recordings/my-recordings.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * myRecordings\n     *\n     * My Recordings subpage for Remote DVR\n     *\n     * Example Usage:\n     * <my-recordings></my-recordings>\n     *\n     */\n    angular.module('ovpApp.rdvr.myRecordings', [\n            'ovpApp.rdvr.recordingItem',\n            'ovpApp.rdvr.rdvrService',\n            'ovpApp.services.rxUtils',\n            'ovpApp.components.alert',\n            'ovpApp.components.confirm',\n            'ovpApp.messages',\n            'ovpApp.components.confirm',\n            'ovpApp.services.errorCodes'\n        ])\n        .component('myRecordings', {\n            templateUrl: '/js/ovpApp/rdvr/my-recordings/my-recordings.html',\n            controller: class MyRecordings {\n                /* @ngInject */\n                constructor(rdvrService, stbService, rx, createObservableFunction, $q, $rootScope, messages,\n                    alert, modal, CONFIRM_BUTTON_TYPE, $state, errorCodesService) {\n                    angular.extend(this, {rdvrService, stbService, rx, createObservableFunction, $q,\n                        $rootScope, messages, alert, modal, CONFIRM_BUTTON_TYPE, $state, errorCodesService});\n                }\n\n                $onInit() {\n                    this.recordingGroups = [];\n                    this.teardown = this.createObservableFunction();\n\n                    this.stbService.currentStbSource\n                        .do(stb => this.stb = stb)\n                        .filter(stb => this.hasRdvrVersion2(stb))\n                        .flatMap(stb => this.getMyRecordingGroups(stb))\n                        .takeUntil(this.teardown)\n                        .subscribe(\n                            result => {\n                                this.processRecordings(result);\n\n                                this.updateLoadingIndicator(result);\n\n                                this.updateSubheader(result);\n\n                                this.handleError(result);\n                            }\n                        );\n                }\n\n                $onDestroy() {\n                    this.teardown();\n                }\n\n                getMyRecordingGroups(stb) {\n                    const stbChanged = this.stbService.currentStbSource.skip(1);\n\n                    return this.rdvrService.getMyRecordingGroups(stb)\n                        .takeUntil(stbChanged);\n                }\n\n                processRecordings({data, isComplete}) {\n                    if (isComplete) {\n                        // My recordings needs the full set of data before showing it to the user\n                        this.recordingGroups = data;\n                        this.recordingGroups.forEach(r => r.deleteGroupSelection = false);\n                    } else {\n                        this.recordingGroups = [];\n                    }\n                }\n\n                updateLoadingIndicator({data, isComplete, error}) {\n                    if (error) {\n                        if (this.loading) {\n                            this.loading.reject();\n                            this.loading = undefined;\n                        }\n                        this.$rootScope.$broadcast('pageChangeComplete', this.$state.current);\n                    } else if (data.length === 0 && !isComplete) {\n                        //Start of Fetch\n                        if (this.loading) {\n                            this.loading.reject();\n                        }\n\n                        this.loading = this.$q.defer();\n                        this.$rootScope.$broadcast(\n                            'message:loading',\n                            this.loading.promise,\n                            undefined,\n                            'DVR Recordings'\n                        );\n                    } else if (isComplete) {\n                        // Data is fully loaded\n                        if (this.loading) {\n                            this.loading.resolve();\n                            this.loading = undefined;\n                        }\n                        this.$rootScope.$broadcast('pageChangeComplete', this.$state.current);\n                    }\n                    // My recordings doesn't display partially loaded data, so no need to handle that.\n                }\n\n                updateSubheader() {\n                    this.subheaderOptions = {\n                        showToggler: true,\n                        id: 'myRecordings'\n                    };\n                }\n\n                handleError({error}) {\n                    this.error = error;\n                    if (this.error) {\n                        this.alert.open({\n                            message: this.errorCodesService.getMessageForCode('WCM-9000'),\n                            title: this.errorCodesService.getHeaderForCode('WCM-1009'),\n                            buttonText: 'OK'\n                        });\n                    }\n                }\n\n                viewChanged(view) {\n                    this.view = view;\n                    this.updateSubheader();\n                }\n\n                onCheckboxStateChanged(recording, state) {\n                    recording.deleteGroupSelection = state;\n                    this.updateSubheader();\n                }\n\n                unselectAll() {\n                    this.recordingGroups.forEach(r => r.deleteGroupSelection = false);\n                    this.updateSubheader();\n                }\n\n                bulkDelete() {\n                    const episodesToDelete = this.recordingGroups.filter(r => r.deleteGroupSelection)\n                        .reduce((memo, group) => {\n                            memo.push(...group.episodes);\n                            return memo;\n                        }, []);\n                    const plural = (episodesToDelete.length > 1 ? 's' : '');\n                    const message = `Are you sure you want to delete ${episodesToDelete.length} recording${plural}?`;\n\n                    const options = {\n                        okLabel: this.CONFIRM_BUTTON_TYPE.YES,\n                        cancelLabel: this.CONFIRM_BUTTON_TYPE.NO,\n                        preOkMessage: message,\n                        inProgressMessage: `Deleting ${episodesToDelete.length} recording${plural}`,\n                        okAction: () => this.doDelete(episodesToDelete)\n                    };\n\n                    this.modal.open({\n                        component: 'confirm',\n                        resolve: {\n                            options: () => options\n                        }\n                    });\n                }\n\n                singleDelete(asset, group) {\n                    const plural = (group.episodes.length > 1 ? 's' : '');\n                    const message = `Are you sure you want to delete ` +\n                        `${group.episodes.length} recording${plural} of ${asset.title}?`;\n\n                    const options = {\n                        okLabel: this.CONFIRM_BUTTON_TYPE.YES,\n                        cancelLabel: this.CONFIRM_BUTTON_TYPE.NO,\n                        preOkMessage: message,\n                        inProgressMessage: `Deleting ${group.episodes.length} recording${plural}`,\n                        okAction: () => this.doDelete(group.episodes)\n                    };\n\n                    this.modal.open({\n                        component: 'confirm',\n                        resolve: {\n                            options\n                        }\n                    });\n                }\n\n                doDelete(episodesToDelete) {\n                    const promise = this.rdvrService.deleteRecordings(this.stb, episodesToDelete)\n                        .then(\n                            (response) => {\n                                if (response.data.failedDeletions > 0) {\n                                    this.alert.open({\n                                        message: this.errorCodesService.getMessageForCode('WCM-2406'),\n                                        title: this.errorCodesService.getHeaderForCode('WCM-1012'),\n                                        buttonText: 'OK'\n                                    });\n                                }\n                            },\n                            (error) => {\n                                this.alert.open({\n                                    message: error.statusCode === 404 ?\n                                        this.errorCodesService.getMessageForCode('WCM-2406') :\n                                        this.errorCodesService.getMessageForCode('WCM-9000'),\n                                    title: this.errorCodesService.getMessageForCode('WCM-1012'),\n                                    buttonText: 'OK'\n                                });\n                            }\n                        );\n                    return promise;\n                }\n\n                hasRdvrVersion2(stb = this.stb) {\n                    return stb && stb.dvr && stb.rdvrVersion > 1;\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}