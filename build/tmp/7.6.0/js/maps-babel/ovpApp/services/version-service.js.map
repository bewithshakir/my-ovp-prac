{"version":3,"sources":["ovpApp/services/version-service.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,0BAA0B,CACrC,iCACA,kBACA,cAEH,QAAQ,kBAAkB;;;;;;;;;;IAU3B,SAAS,eAAe,IAAI,SAAS,OAAO,UAAU,cAC9B,UAAU,YAAY,MAAM,SAAS,QAAQ;;QAGjE,IAAI,mCAAmC;QACvC,IAAI,YAAY;QAChB,IAAI,kBAAkB,SAAS,OAAO;QACtC;;QAEA,SAAS,mBAAmB;YACxB,IAAI,QAAQ,GAAG;;YAEf,IAAI,kCAAkC;gBAClC,MAAM,QAAQ;mBACX;gBACH,MAAM;oBACF,KAAK,mBAAmB,QAAQ,aAAa,QAAQ,QAAQ;oBAC7D,QAAQ;oBACR,SAAS,EAAE,iBAAkB;oBAC7B,OAAO;mBACR,KAAK,UAAA,KAAO;;oBAEX,IAAI,aAAa,qBAAqB,KAAK,IAAI,MAAM;oBACrD,MAAM,QAAQ,QAAQ,eAAe;oBACrC,mCAAmC;oBACnC,SAAS,YAAM;wBACX,mCAAmC;uBACpC;mBACJ,UAAA,OAAS;oBACR,MAAM,OAAO;;;YAGrB,OAAO,MAAM;;;QAGjB,SAAS,WAAW;YAChB,SAAS,mBACJ,KAAK,UAAA,QAAU;gBACZ,YAAY;;;YAGpB,aAAa,UAAU,IAAI,UAAU,YAAY;gBAC7C,IAAM,gBAAgB,UAAU,IAAI,UAAA,OAAK;oBALrC,OAKyC,MAAM;;gBACnD,IAAM,UAAU,WAAW;gBAC3B,IAAM,YAAY,WAAW;;gBAE7B,IAAM,uBAAuB,SAAvB,qBAAiC,WAAW;oBAC9C,IAAI,aAAa,UAAU,MAAM;;wBAE7B,OAAO,UAAU,KAAK,UAAA,OAAK;4BAHvB,OAG2B,UAAU,KAAK,QAAQ,MAAM,QAAQ,CAAC;+BAAO;2BACzE;wBACH,OAAO;;;;gBAIf,IAAI,cAAc,QAAQ,QAAQ,QAAQ,CAAC,KACvC,qBAAqB,YAAY;oBACjC,mBAAmB,KAAK,UAAA,kBAAoB;wBACxC,IAAI,CAAC,kBAAkB;4BACnB,KAAK,KAAK;4BACV,QAAQ,SAAS,OAAO;;;;;;;KAQ/C","file":"ovpApp/services/version-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.service.version', [\n        'ovpApp.components.header.data',\n        'ovpApp.version',\n        'ui.router'\n    ])\n    .service('versionService', versionService);\n\n    /**\n     * will refresh the app if:\n     * 1.  user is switching between menuItems and the version.txt file has been updated on the server\n     * 2.  the last time app checked the version.txt is within the versionCheckTimeout (in activityConfig)\n     * 3.  timeout is held only in memory, not in browser storage\n     */\n\n    /* @ngInject */\n    function versionService($q, version, $http, $timeout, $transitions,\n                            menuData, $rootScope, $log, $window, config) {\n\n\n        var alreadyCheckedWithinTimeInterval = false;\n        var menuItems = [];\n        var timeoutInterval = parseInt(config.versionCheckTimeoutIntervalMS);\n        activate();\n\n        function isCurrentVersion() {\n            var defer = $q.defer();\n\n            if (alreadyCheckedWithinTimeInterval) {\n                defer.resolve(true);\n            } else {\n                $http({\n                    url: '/index.html?v=' + version.appVersion + '&h=' + version.commitHash,\n                    method: 'GET',\n                    headers: { 'Cache-Control' : 'no-cache' },\n                    cache: false\n                }).then(res => {\n                    //find app version in head\n                    var appVersion = /appVersion: '(.*)'/.exec(res.data)[1];\n                    defer.resolve(version.appVersion === appVersion);\n                    alreadyCheckedWithinTimeInterval = true;\n                    $timeout(() => {\n                        alreadyCheckedWithinTimeInterval = false;\n                    }, timeoutInterval);\n                }, error => {\n                    defer.reject(error);\n                });\n            }\n            return defer.promise;\n        }\n\n        function activate() {\n            menuData.getMainMenuItems()\n                .then(models => {\n                    menuItems = models;\n                });\n\n            $transitions.onSuccess({}, function (transition) {\n                const statesToCheck = menuItems.map(model => model.link);\n                const toState = transition.to();\n                const fromState = transition.from();\n\n                const fromStateIsAMenuItem = function (fromState) {\n                    if (fromState && fromState.name) {\n                        //this will look for 'ovp.ondemand' from within 'ovp.ondemand.featured'\n                        return menuItems.find(model => fromState.name.indexOf(model.link) > -1) !== undefined;\n                    } else {\n                        return false;\n                    }\n                };\n\n                if (statesToCheck.indexOf(toState.name) > -1 &&\n                    fromStateIsAMenuItem(fromState)) {\n                    isCurrentVersion().then(isCurrentVersion => {\n                        if (!isCurrentVersion) {\n                            $log.info('version updated, refreshing page ...');\n                            $window.location.reload(true);\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n}());\n"],"sourceRoot":"/source/"}