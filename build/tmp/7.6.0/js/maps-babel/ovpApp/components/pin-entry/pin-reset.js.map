{"version":3,"sources":["ovpApp/components/pin-entry/pin-reset.js"],"names":[],"mappings":"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","file":"ovpApp/components/pin-entry/pin-reset.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.components.pinEntry')\n        .directive('comparePin', comparePin)\n        .component('pinReset', {\n            bindings: {\n                resolve: '<',\n                modalInstance: '<'\n            },\n            templateUrl: '/js/ovpApp/components/pin-entry/pin-reset.html',\n            controller: class PinReset {\n                /* @ngInject */\n                constructor(PIN_ENTRY_TYPE, parentalControlsService, $rootScope, $scope, promiseTracker,\n                    messages, Debouncer, errorCodesService) {\n                    angular.extend(this, {PIN_ENTRY_TYPE, parentalControlsService, $rootScope, $scope, promiseTracker,\n                        messages, Debouncer, errorCodesService});\n                }\n\n                $onInit() {\n                    this.tagRegex = /(<[^>]+>)/g;\n                    this.loadingTracker = this.promiseTracker();\n                    this.parentalControlsService.isPrimaryAccount()\n                        .then(isPrimaryAccount => this.isPrimaryAccount = isPrimaryAccount);\n                    this.errorDelay = new this.Debouncer(this.$scope);\n                }\n\n                $onChanges(changes) {\n                    if (changes.resolve) {\n                        const options = this.resolve.options || {};\n                        this.pinInstructions = options.pinInstructions;\n                        this.headerMessage = options.headerMessage;\n                        this.secondaryMessage = options.secondaryMessage;\n                        this.password = options.password;\n                        this.pinService = options.pinService;\n                    }\n                }\n\n                onInputChange() {\n                    this.showNumbersOnlyErrorMessage = false;\n                    this.errorDelay.debounce(() => {\n                        this.showNumbersOnlyErrorMessage = this.form.newPIN.$error.pattern;\n                    });\n                }\n\n                resetPIN() {\n                    const promise = this.pinService.shouldSetDefaults()\n                        .then(shouldSetDefaults => {\n                            if (shouldSetDefaults) {\n                                return this.pinService.setPINForFirstTimeWithDefaultRatings(this.newPIN, this.password);\n                            } else {\n                                return this.pinService.setPIN(this.newPIN, this.password);\n                            }\n                        })\n                        .then(() => {\n                            this.modalInstance.close('pinReset');\n                        }, () => {\n                            this.modalInstance.dismiss('pinValidationError');\n                            this.$rootScope.$broadcast('message:growl',\n                                this.errorCodesService.getMessageForCode('WGE-1001')\n                            );\n                        });\n\n                    this.loadingTracker.addPromise(promise);\n                }\n            }\n        });\n\n    /* @ngInject */\n    function comparePin() {\n        return {\n            require: 'ngModel',\n            scope: {\n                otherModelValue: '=comparePin'\n            },\n            link: function (scope, element, attributes, ngModel) {\n                var hasValue = function (value) {\n                    return angular.isDefined(value) && value.length == 4;\n                };\n\n                ngModel.$validators.comparePin = function (modelValue) {\n                    if (!hasValue(modelValue)) {\n                        return true;\n                    } else {\n                        return modelValue === scope.otherModelValue;\n                    }\n                };\n\n                scope.$watch('otherModelValue', function () {\n                    ngModel.$validate();\n                });\n            }\n        };\n    }\n})();\n"],"sourceRoot":"/source/"}