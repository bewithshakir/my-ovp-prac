{"version":3,"sources":["ovpApp/services/stb-settings-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/stb-settings-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.stbSettingsService', [\n        'ovpApp.config',\n        'ovpApp.services.stbService',\n        'ovpApp.services.rxUtils',\n        'rx'\n    ])\n    .constant('STB_PREFERENCES_DEFAULTS', {\n        purchases: {\n            blockingEnabled: false\n        },\n        parentalControls: {\n            titleBlock: false\n        },\n        bookmarks: {\n            sharingEnabled: true\n        }\n\n    })\n    .constant('STB_DEVICE_DEFAULTS', {\n        purchasePIN: '0000'\n    })\n    .service('StbSettingsService', StbSettingsService);\n\n    /* ngInject */\n    function StbSettingsService(stbService, $http, config, messages, $q, $rootScope, rx, rxhttp,\n        STB_PREFERENCES_DEFAULTS, STB_DEVICE_DEFAULTS) {\n        //Defaults should go away once we have a way to get this data from the spp service\n        var service,\n            stbData = {},\n            timeBlocks = []; // default value, TODO: fix me\n\n        service = {\n            setEnablePurchasePINForClient,\n            getPreferences,\n            purchasePinEnabled,\n            titleBlockingEnabled,\n            setTitleBlockForClient,\n            shareInProgressListEnabled,\n            setShareInProgressListForClient,\n            getDevice,\n            setDevice,\n            updateBlockedRatings,\n            updateBlockedContent,\n            updateBlockedChannels,\n            updateCCSettings,\n            togglePCBlocking,\n            toggleSAP,\n            getTimeBlocks,\n            deleteTimeBlock,\n            createTimeBlock,\n            getSTBProperties\n        };\n\n        return service;\n\n        function getStbState(stb) {\n            if (!stb) {\n                throw new Error('Attempted to access a STB without defining stb');\n            }\n            if (!stbData[stb.macAddress]) {\n                stbData[stb.macAddress] = {\n                    preferences: null,\n                    preferencesPromise: null,\n                    deviceData: null,\n                    devicePromise: null\n                };\n            }\n            return stbData[stb.macAddress];\n        }\n\n        function getPreferences(stb, restart = false) {\n            var stbState = getStbState(stb);\n            if (stbState.preferences) {\n                return $q.resolve(stbState.preferences);\n            } else if (!stbState.preferencesPromise || restart) {\n                stbState.preferencesPromise = rxhttp.get(config.piHost + '/spp/v1/preferences/' + stb.macAddress)\n                    .catch(err => {\n                        // TODO: STVWEB-1321: Workaround to initialize SPP\n                        // You can either set them from OVP or you can wait for them to be pushed back up from ODN.\n                        if (err.status === 404) {\n                            return setPreferences(stb, {}).then(() => {\n                                return getPreferences(stb, restart);\n                            });\n                        } else {\n                            throw err;\n                        }\n                    })\n                    .map(response => {\n                        var preferences = {};\n                        angular.merge(preferences, STB_PREFERENCES_DEFAULTS, response.data);\n                        delete preferences.timestamp; //This value is going to be INT MAX and is invalid\n                        return preferences;\n                    })\n                    .do((preferenceResult) => stbState.preferences = preferenceResult)\n                    .toPromise($q);\n            }\n            return stbState.preferencesPromise;\n        }\n\n        function setPreferences(stb, prefs) {\n            var stbState = getStbState(stb),\n                setData = {\n                networkId: stb.macAddress,\n                strTimestamp: (stbState && stbState.preferences) ?\n                    stbState.preferences.strTimestamp : (Date.now().toString()),\n                type: 'STB'\n            };\n\n            angular.merge(setData, prefs);\n\n            return $http({\n                method: 'PUT',\n                url:    config.piHost + '/spp/v1/preferences/' + stb.macAddress,\n                data:   setData\n            }).then(results => {\n                stbState.preferences = {};\n                angular.merge(stbState.preferences, STB_PREFERENCES_DEFAULTS, results.data);\n                delete stbState.preferences.timestamp;\n                return stbState.preferences;\n            }, error => {\n                if (error && error.data && error.data.message === 'Stale timestamp') {\n                    stbState.preferences = null;\n                    stbState.preferencesPromise = null;\n                }\n                return $q.reject(error);\n            });\n        }\n\n        function updateBlockedRatings(stb, ratings) {\n            return getPreferences(stb).then(() => {\n                let change = {\n                    parentalControls: {\n                        blockedRatings: ratings\n                    }\n                };\n                return setPreferences(stb, change);\n            });\n        }\n\n        function getDevice(stb, restart = false) {\n            var stbState = getStbState(stb);\n            if (stbState.deviceData) {\n                return $q.resolve(stbState.deviceData);\n            } else if (!stbState.devicePromise || restart) {\n                stbState.devicePromise = rxhttp.get(config.piHost + '/spp/v1/devices/' + stb.macAddress)\n                    .retry(3)\n                    .map(response => {\n                        var deviceData = {};\n                        angular.merge(deviceData, STB_DEVICE_DEFAULTS, response.data);\n                        delete deviceData.timestamp; //This will be beyond the range of JS Int\n                        return deviceData;\n                    })\n                    .do(deviceResult => stbState.deviceData = deviceResult)\n                    .toPromise($q);\n            }\n\n            return stbState.devicePromise;\n\n        }\n\n        function setDevice(stb, device) {\n            var stbState = getStbState(stb);\n            var setData = {\n                networkId: stb.macAddress,\n                strTimestamp: stbState.deviceData.strTimestamp,\n                type: 'STB'\n            };\n\n            angular.merge(setData, device);\n\n            return $http({\n                method: 'PUT',\n                url:    config.piHost + '/spp/v1/devices/' + stb.macAddress,\n                data:   setData\n            }).then(results => {\n                stbState.deviceData = {};\n                angular.merge(stbState.deviceData, STB_DEVICE_DEFAULTS, results.data);\n                delete stbState.deviceData.timestamp;\n            }, error => {\n                if (error && error.data && error.data.message === 'Stale timestamp') {\n                    stbState.deviceData = null;\n                    stbState.devicePromise = null;\n                }\n                return $q.reject(error);\n            });\n\n        }\n\n        function setEnablePurchasePINForClient(stb, enabled) {\n            return getPreferences(stb).then(currentPreferences => {\n                if (currentPreferences.purchases.blockingEnabled !== enabled) {\n                    let change = {\n                        purchases: {\n                            blockingEnabled: enabled\n                        }\n                    };\n                    return setPreferences(stb, change);\n                } else {\n                    return currentPreferences;\n                }\n            });\n        }\n\n        function purchasePinEnabled(stb) {\n            return getPreferences(stb).then(pref => {\n                return pref.purchases.blockingEnabled;\n            });\n        }\n\n        /* parentalControls title block interface */\n        function titleBlockingEnabled(stb) {\n            return getPreferences(stb).then(pref => {\n                return pref.parentalControls.titleBlock;\n            });\n        }\n\n        function setTitleBlockForClient(stb, state) {\n            return getPreferences(stb).then((currentPreferences) => {\n\n                if (currentPreferences.parentalControls.titleBlock !== state) {\n                    let change = {\n                        parentalControls: {\n                            titleBlock: state\n                        }\n                    };\n                    return setPreferences(stb, change);\n                } else {\n                    return currentPreferences;\n                }\n            });\n        }\n\n        /* parentalControls share-in-progress-list interface */\n        function shareInProgressListEnabled(stb) {\n            return getPreferences(stb).then(pref => {\n                return pref.bookmarks.sharingEnabled;\n            });\n        }\n\n        function setShareInProgressListForClient(stb, state) {\n            return getPreferences(stb).then(currentPreferences => {\n                if (currentPreferences.bookmarks.sharingEnabled !== state) {\n                    let change = {\n                        bookmarks: {\n                            sharingEnabled: state\n                        }\n                    };\n                    return setPreferences(stb, change);\n                } else {\n                    return currentPreferences;\n                }\n            });\n        }\n\n        /* PC blocking */\n        function togglePCBlocking(stb, value) {\n            return getPreferences(stb).then((currentPreferences) => {\n                if (currentPreferences.parentalControls.blockingEnabled !== value) {\n                    let change = {\n                        parentalControls: {\n                            blockingEnabled: value\n                        }\n                    };\n                    return setPreferences(stb, change);\n                } else {\n                    return currentPreferences;\n                }\n            });\n        }\n\n        function toggleSAP(stb, value) {\n            return getPreferences(stb).then((currentPreferences) => {\n                if (!currentPreferences.secondaryAudio ||\n                    currentPreferences.secondaryAudio.selection !== value) {\n                    let change = {\n                        secondaryAudio: {\n                            selection: value\n                        }\n                    };\n                    return setPreferences(stb, change);\n                } else {\n                    return currentPreferences;\n                }\n            });\n        }\n\n        function getSTBProperties(stb) {\n            return $http({\n                method: 'GET',\n                url:    config.piHost + '/spp/v1/preferences/properties?networkId=' + stb.macAddress\n            }).then(results => results.data);\n        }\n\n        function updateBlockedContent(stb, content) {\n            return getPreferences(stb).then(() => {\n                let change = {\n                    parentalControls: {\n                        blockedContent: content\n                    }\n                };\n                return setPreferences(stb, change);\n            });\n        }\n\n        function updateBlockedChannels(stb, channelNumbers) {\n            return getPreferences(stb).then(() => {\n                let change = {\n                    parentalControls: {\n                        blockedChannels: channelNumbers\n                    }\n                };\n                return setPreferences(stb, change);\n            });\n        }\n\n        function updateCCSettings(stb, ccSettings) {\n            return getPreferences(stb).then(() => {\n                let change = {\n                    closedCaptioning: ccSettings\n                };\n                return setPreferences(stb, change);\n            });\n        }\n\n        function getTimeBlocks() {\n            return $q.resolve(timeBlocks);\n        }\n\n        function deleteTimeBlock(timeBlock) {\n            let index = timeBlocks.indexOf(timeBlock);\n            if (index >= 0) {\n                timeBlocks.splice(index, 1);\n            }\n            return $q.resolve(timeBlocks);\n        }\n\n        function createTimeBlock(timeBlock) {\n            if (isDuplicate(timeBlock)) {\n                return $q.reject(messages.stbSettings.duplicate_timeblock);\n            }\n\n            timeBlocks.push(timeBlock);\n            return $q.resolve(timeBlocks);\n        }\n\n        function isDuplicate(timeBlock) {\n            var isDup = false;\n            timeBlocks.forEach(tb => {\n                if (angular.equals(tb, timeBlock)) {\n                    isDup = true;\n                }\n            });\n\n            return isDup;\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}