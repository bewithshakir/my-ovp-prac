{"version":3,"sources":["ovpApp/components/template-popup/edit-scheduled/edit-scheduled.js"],"names":[],"mappings":"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","file":"ovpApp/components/template-popup/edit-scheduled/edit-scheduled.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.components.templatePopup.editScheduled', [\n        'ovpApp.components.ovp.channel',\n        'ovpApp.services.stbService',\n        'ovpApp.rdvr.rdvrService',\n        'ovpApp.messages',\n        'ovpApp.components.alert',\n        'ovpApp.components.templatePopup',\n        'ovpApp.components.ovp.button',\n        'ovpApp.components.ovp.channel',\n        'ovpApp.components.ovp.selectBox',\n        'ovpApp.components.ovp.clickConfirm',\n        'ovpApp.components.modal',\n        'ovpApp.components.editConflict',\n        'ovpApp.rdvr.cacheService',\n        'ovpApp.services.dateFormat',\n        'ovpApp.services.errorCodes',\n        'ovpApp.directives.dropdownList',\n        'ajoslin.promise-tracker'\n    ])\n    .component('editScheduled', {\n        bindings: {\n            resolve: '<',\n            modalInstance: '<'\n        },\n        templateUrl: '/js/ovpApp/components/template-popup/edit-scheduled/edit-scheduled.html',\n        controller: class EditScheduled {\n            constructor($rootScope, $element, stbService, rdvrService,\n              $q, messages, dateFormat, promiseTracker,\n              recordingViewModelDefinition, alert, modal, errorCodesService) {\n                angular.extend(this, {$rootScope, $element, stbService, rdvrService,\n                    $q, messages, dateFormat, promiseTracker,\n                    recordingViewModelDefinition, alert, modal, errorCodesService});\n            }\n\n            $onChanges(changes) {\n                if (changes.resolve) {\n                    this.scheduledRecording = this.resolve.scheduledRecording;\n                    this.seriesOnly = this.resolve.seriesOnly;\n\n                    const isMovie = this.rdvrService.isMovie(this.scheduledRecording.tmsProgramId);\n                    const availableTabs = {\n                        SERIES: 'series',\n                        EPISODE: 'episode'\n                    };\n\n                    this.dvrTracker = this.promiseTracker();\n                    this.displayDate = this.dateFormat.absolute.expanded.atTime(new Date\n                        (parseInt(this.scheduledRecording.startTime * 1000)));\n\n                    this.model = {\n                        availableTabs: availableTabs,\n                        isSeries: false,\n                        isMovie: isMovie,\n                        updateDisabled: true,\n                        selectedTab: this.scheduledRecording.recordSeries ?\n                            availableTabs.SERIES : availableTabs.EPISODE,\n                        showKeepUntil: false,\n                        showSaveAtMost: false,\n                        showRecord: false,\n                        showStartTime: true,\n                        showStopTime: true,\n                        showAirTime: false,\n                        isNew: this.scheduledRecording.isNew\n                    };\n\n                    if (this.model.isNew) {\n                        this.model.updateDisabled = false;\n                    }\n\n                    this.options = {\n                        deleteWhenSpaceIsNeeded: [\n                            {label: 'Until Space Needed', value: true},\n                            {label: 'Do Not Delete', value: false}\n                        ],\n                        numEpisodesToKeep: [\n                            {label: '1 Episode', value: 1},\n                            {label: '3 Episodes', value: 3},\n                            {label: '5 Episodes', value: 5},\n                            {label: '7 Episodes', value: 7},\n                            {label: 'All Episodes', value: -1}\n                        ],\n                        recordOnlyNewEpisodes: [\n                            {label: 'All Episodes', value: false},\n                            {label: 'New Episodes', value: true}\n                        ],\n                        startAdjustMinutes: [\n                            {label: 'Original Start Time', value: 0},\n                            {label: '1 minute earlier', value: -1},\n                            {label: '2 minutes earlier', value: -2},\n                            {label: '3 minutes earlier', value: -3},\n                            {label: '4 minutes earlier', value: -4},\n                            {label: '5 minutes earlier', value: -5},\n                            {label: '15 minutes earlier', value: -15},\n                            {label: '30 minutes earlier', value: -30},\n                            {label: '1 minute later', value: 1},\n                            {label: '2 minutes later', value: 2},\n                            {label: '3 minutes later', value: 3},\n                            {label: '4 minutes later', value: 4},\n                            {label: '5 minutes later', value: 5},\n                            {label: '15 minutes later', value: 15}\n                        ],\n                        stopAdjustMinutes: [\n                            {label: 'Original Stop Time', value: 0},\n                            {label: '1 minute later', value: 1},\n                            {label: '2 minutes later', value: 2},\n                            {label: '3 minutes later', value: 3},\n                            {label: '4 minutes later', value: 4},\n                            {label: '5 minutes later', value: 5},\n                            {label: '15 minutes later', value: 15},\n                            {label: '30 minutes later', value: 30},\n                            {label: '60 minutes later', value: 60},\n                            {label: '120 minutes later', value: 120},\n                            {label: '1 minute earlier', value: -1},\n                            {label: '2 minutes earlier', value: -2},\n                            {label: '3 minutes earlier', value: -3},\n                            {label: '4 minutes earlier', value: -4},\n                            {label: '5 minutes earlier', value: -5},\n                            {label: '15 minutes earlier', value: -15}\n                        ],\n                        recordOnlyAtThisAirTime: [\n                            {label: 'All Showings', value: false},\n                            {label: 'Within Selected Time Slot', value: true}\n                        ]\n                    };\n\n                    this.form = {};\n                    this.settings = angular.copy(this.scheduledRecording.settings);\n                    angular.forEach(this.scheduledRecording.settings, (val, key) => {\n                        if (this.options[key]) {\n                            this.form[key] = this.options[key].findIndex((opt) => opt.value === val);\n                        }\n                    });\n                }\n            }\n\n            $doCheck() {\n                if (this.model && this.model.selectedTab !== this.oldSelectedTab) {\n                    const onEpisodeTab = this.model.selectedTab === this.model.availableTabs.EPISODE;\n                    const onSeriesTab = this.model.selectedTab === this.model.availableTabs.SERIES;\n\n                    this.model.showKeepUntil = this.model.isMovie || (this.model.showTabs && onEpisodeTab);\n                    this.model.showSaveAtMost = this.model.showRecord = this.model.showAirTime = onSeriesTab;\n\n                    if (this.model.isMovie) {\n                        this.cancelLabel = 'Cancel Recording';\n                    } else {\n                        this.cancelLabel = 'Cancel ' + (onEpisodeTab ? 'Episode' : 'Series');\n                    }\n\n                    this.oldSelectedTab = this.model.selectedTab;\n                }\n            }\n\n            isSeries() {\n                return this.model.selectedTab === this.model.availableTabs.SERIES;\n            }\n\n            onSelect(key) {\n                return (item) => {\n                    this.form[key] = this.options[key].findIndex((opt) => opt.value === item.value);\n                    angular.forEach(this.form, (val, key) => {\n                        this.settings[key] = this.options[key][val].value;\n                    });\n                    this.model.updateDisabled = angular.equals(this.settings, this.scheduledRecording.settings) &&\n                        !this.model.isNew;\n                };\n            }\n\n            cancelSchedule() {\n                this.stbService.getCurrentStb().then(stb => {\n                    let promise = this.rdvrService.cancelScheduled(stb, this.scheduledRecording, !this.isSeries())\n                        .then(\n                            () => {\n                                this.modalInstance.close({\n                                    reason: 'cancel-schedule',\n                                    recording: this.scheduledRecording\n                                });\n                            },\n                            () => this.unknownCancelFailure()\n                        );\n                    this.dvrTracker.addPromise(promise);\n                });\n            }\n\n            unknownCancelFailure() {\n                this.alert.open(this.errorCodesService.getAlertForCode('WCM-9000'));\n            }\n\n            getCancelConfirm() {\n                let message = 'Are you sure you want to cancel ';\n                if (this.model.selectedTab === this.model.availableTabs.EPISODE) {\n                    message += (this.model.isMovie ? 'the recording' : 'this episode') + ' of ';\n                    message += this.scheduledRecording.title;\n                } else {\n                    message += 'all recordings for this series';\n                }\n                message += '?';\n                return {\n                    title: 'Cancel Recording',\n                    message: message\n                };\n            }\n\n            updateSchedule() {\n                this.stbService.getCurrentStb().then(stb => {\n\n                    let newRecordingData = angular.copy(this.scheduledRecording._context.data);\n                    newRecordingData.settings = this.settings;\n                    newRecordingData.recordSeries = this.model.selectedTab === this.model.availableTabs.SERIES;\n\n                    const scheduleRecording = isNew => {\n                        newRecordingData.isNew = isNew;\n\n                        const recording = this.recordingViewModelDefinition.createInstance(newRecordingData);\n\n                        let scheduleRecordingPromise = this.rdvrService.scheduleRecording(stb, recording)\n                            .then(\n                                () => {\n                                    this.modalInstance.close({\n                                        reason: 'update-schedule',\n                                        recording: recording\n                                    });\n                                },\n                                (error) => {\n                                    if (error.status === 409) {\n                                        let conflicts = error.data.conflictingRecordings\n                                            .map(r => this.recordingViewModelDefinition.createInstance(r));\n\n                                        schedulingConflict(conflicts);\n                                    } else if (error.status === 439) {\n                                        this.alreadyScheduled();\n                                    } else {\n                                        this.unknownUpdateFailure();\n                                    }\n                                }\n                            );\n                        this.dvrTracker.addPromise(scheduleRecordingPromise);\n                    };\n\n                    let self = this;\n\n                    function schedulingConflict(conflictingRecordings) {\n                        self.modal.open({\n                            showCloseIcon: false,\n                            backdrop: 'static',\n                            component: 'editConflict',\n                            resolve: {\n                                model: {\n                                    scheduledRecording: self.scheduledRecording,\n                                    conflictingRecordings: conflictingRecordings,\n                                    oneTimeOnly: true,\n                                    isNotYetScheduled: true,\n                                    onKeep: scheduleRecording,\n                                    onCancel: () => self.modalInstance.close('failed to resolve conflict')\n                                }\n                            }\n                        });\n                    }\n\n                    if (!this.model.isNew) {\n                        let cancelScheduledPromise = this.rdvrService.cancelScheduled(stb, this.scheduledRecording)\n                            .then(\n                                () => scheduleRecording(false),\n                                () => this.unknownUpdateFailure()\n                            );\n                        this.dvrTracker.addPromise(cancelScheduledPromise);\n                    } else {\n                        scheduleRecording(true);\n                    }\n                });\n            }\n\n            alreadyScheduled() {\n                this.alert.open({\n                    message: this.errorCodesService.getMessageForCode('WCM-1439', {\n                        'TITLE': this.scheduledRecording.title\n                    }),\n                    title: this.errorCodesService.getHeaderForCode('WCM-1439'),\n                    buttonText: 'OK'\n                });\n            }\n\n            unknownUpdateFailure() {\n                this.alert.open({\n                    message: this.errorCodesService.getMessageForCode('WCM-1400', {\n                        'TITLE': this.scheduledRecording.title\n                    }),\n                    title: this.errorCodesService.getHeaderForCode('WCM-1400'),\n                    buttonText: 'OK'\n                });\n            }\n        }\n    });\n}());\n"],"sourceRoot":"/source/"}