{"version":3,"sources":["ovpApp/buyFlow/buyFlow-service.js"],"names":[],"mappings":"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","file":"ovpApp/buyFlow/buyFlow-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.buyFlow.service', [])\n        .factory('buyFlowService', buyFlowService);\n\n    /** @ngInject */\n    function buyFlowService(config, $http, $q, $rootScope) {\n\n        const pi = config.piHost;\n\n        const service = {\n            getBaseOffers,\n            getExtras,\n            getPremiums,\n            addBaseToCart,\n            addExtrasToCart,\n            addPremiumsToCart,\n            getSummary,\n            purchase\n        };\n        return service;\n\n        /////////\n\n        /**\n         * Starting point for the buy flow. Gets a list of offers for the user to choose from\n         * (there may be only one)\n         *\n         * @return {Promise<[Offer]>} Promise which resolves to an array of offers\n         *\n         * With an Offer being:\n         * {\n         *    channels: [Channel]\n         *    description: string\n         *    hasAdOns: boolean\n         *    id: string\n         *    imageUrl: string\n         *    name: string\n         *    price: string\n         * }\n         *\n         * With a Channel being\n         * {\n         *    id: string\n         *    networkName: string\n         *    tmsId: number\n         * }\n         *\n         */\n        function getBaseOffers() {\n            const url = `${pi}${config.streamPlus.offers}${config.streamPlus.base}`;\n            const options = {withCredentials: true};\n            return $http.get(url, options)\n                .then(result => result.data.offers,\n                    err => {\n                        $rootScope.$emit('Analytics:error', {\n                            httpError: err,\n                            errorType: 'stream2'\n                        });\n                        return $q.reject(err);\n                    });\n        }\n\n        /**\n         * Get extra offerings related to a base offering\n         *\n         * @param {string} baseOfferId\n         * @return {Promise<Offer>}\n         */\n        function getExtras(baseOfferId) {\n            return getMore(baseOfferId, 'extras');\n        }\n\n        /**\n         * Get premium offerings related to a base offering\n         *\n         * @param {string} baseOfferId\n         * @return {Promise<Offer>}\n         */\n        function getPremiums(baseOfferId) {\n            return getMore(baseOfferId, 'premiums');\n        }\n\n        // Private helper method\n        function getMore(baseOfferId, category) {\n            if (baseOfferId === undefined || category === undefined) {\n                return $q.resolve();\n            }\n\n            const url = `${pi}${config.streamPlus.offers}${config.streamPlus.base}/${baseOfferId}/${category}`;\n            const options = {withCredentials: true};\n            return $http.get(url, options)\n                .then(result => result.data.Offers,\n                    err => {\n                        $rootScope.$emit('Analytics:error', {\n                            httpError: err,\n                            errorType: 'stream2'\n                        });\n                        return $q.reject(err);\n                    });\n        }\n\n        /**\n         * Starting point for purchasing an offer.\n         *\n         * @param {string} baseId ID of the baseOffer to begin purchasing\n         *\n         * @return {Promise<Cart>} Promise which resolves to a cart object\n         *\n         * With a Cart being:\n         * {\n         *    baseOffer: [Offer]\n         *    extraOffers: [Offer]\n         *    premiumOffers: [Offer]\n         *    id: string\n         * }\n         */\n        function addBaseToCart(baseId) {\n            const url = `${pi}${config.streamPlus.offers}${config.streamPlus.cart}/base`;\n            return $http.post(url, [baseId])\n                .then(result => result.data.Cart,\n                err => {\n                    $rootScope.$emit('Analytics:error', {\n                        httpError: err,\n                        errorType: 'stream2'\n                    });\n                    return $q.reject(err);\n                });\n        }\n\n        /**\n         * Add extras offers to a cart. To get a cartID, you'll need to have started a cart using addBaseToCart.\n         *\n         * @param {string} cartId\n         * @param {string | [string]} extraIds\n         *\n         * @return {Promise<Cart>}\n         */\n        function addExtrasToCart(cartId, extraIds) {\n            if (!angular.isArray(extraIds)) {\n                extraIds = [extraIds];\n            }\n            return addToCart(cartId, extraIds, 'extras');\n        }\n\n        /**\n         * Add premium offers to a cart. To get a cartID, you'll need to have started a cart using addBaseToCart.\n         *\n         * @param {string} cartId\n         * @param {string | [string]} premiumIds\n         *\n         * @return {Promise<Cart>}\n         */\n        function addPremiumsToCart(cartId, premiumIds) {\n            if (!angular.isArray(premiumIds)) {\n                premiumIds = [premiumIds];\n            }\n            return addToCart(cartId, premiumIds, 'premiums');\n        }\n\n        //Private helper method\n        function addToCart(cartId, selectionIds, category) {\n            const url = cartUrl(cartId, category);\n            return $http.put(url, selectionIds)\n                .then(result => result.data.Cart,\n                    err => {\n                        $rootScope.$emit('Analytics:error', {\n                            httpError: err,\n                            errorType: 'stream2'\n                        });\n                        return $q.reject(err);\n                    });\n        }\n\n        /**\n         * Get a summary of the cart's contents, including prices\n         * @param {string} cartId\n         * @return {Promise<CartSummary>}\n         *\n         * With a CartSummary having all the parameters of Cart, plus:\n         * {\n         *    baseOfferCount: number\n         *    baseOfferPrice: string\n         *    extraOfferCount: number\n         *    extraOfferPrice: string\n         *    premiumOfferCount: number\n         *    premiumOfferPrice: string\n         *    price: string\n         * }\n         */\n        function getSummary(cartId) {\n            const url = cartUrl(cartId, 'summarize');\n            const options = {withCredentials: true};\n            return $http.get(url, options)\n                .then(result => result.data.Cart,\n                    err => {\n                        $rootScope.$emit('Analytics:error', {\n                            httpError: err,\n                            errorType: 'stream2'\n                        });\n                        return $q.reject(err);\n                    });\n        }\n\n        /**\n         * Purchase a cart. The final step in teh buy flow.\n         * @param {string} cartId\n         *\n         * @return {Promise}\n         */\n        function purchase(cartId) {\n            const url = cartUrl(cartId, 'purchase');\n            return $http.put(url)\n                .then(result => result.data,\n                    err => {\n                        $rootScope.$emit('Analytics:error', {\n                            httpError: err,\n                            errorType: 'stream2'\n                        });\n                        return $q.reject(err);\n                    });\n        }\n\n        //Pricate helper method\n        function cartUrl(cartId, category) {\n            return `${pi}${config.streamPlus.offers}${config.streamPlus.cart}/${cartId}/${category}`;\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}