{"version":3,"sources":["ovpApp/components/ovp/ovp-cc-settings/ovp-remote-player-cc-settings.js"],"names":[],"mappings":"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","file":"ovpApp/components/ovp/ovp-cc-settings/ovp-remote-player-cc-settings.js","sourcesContent":["(() => {\n    'use strict';\n    angular.module('ovpApp.components.ovp.remotePlayerCCSettings', ['ovpApp.version',\n            'ovpApp.services.ovpStorage',\n            'ui.bootstrap',\n            'ovpApp.directives.dropdownList',\n            'ovpApp.directives.focus',\n            'ovpApp.directives.arrowNav',\n            'ovpApp.services.stbService',\n            'ovpApp.services.stbSettingsService'\n        ])\n        .component('ovpRemotePlayerCaptionSettings', {\n            bindings: {\n                modalInstance: '<',\n                resolve: '<'\n            },\n            templateUrl: '/js/ovpApp/components/ovp/ovp-cc-settings/ovp-remote-player-cc-settings.html',\n            controller: class CCSettingsController {\n                /* @ngInject */\n                constructor(version, $rootScope, ovpStorage, storageKeys, stbService, StbSettingsService) {\n                    angular.extend(this, {\n                        version,\n                        $rootScope,\n                        ovpStorage,\n                        storageKeys,\n                        stbService,\n                        StbSettingsService\n                    });\n                }\n\n                $onInit() {\n                    this.ccSettings = this.ccSettings || {};\n                    this.isVisible = false;\n                    this.appVersion = this.version.appVersion;\n                    this.focus = {}; // Focus option used in template\n\n                    this.initSetterMethods();\n                }\n\n                $onChanges() {\n                    if (this.resolve.stb && this.resolve.allowedCCOptions && this.resolve.ccSettings) {\n                        this.stb = this.resolve.stb;\n                        let cc =  this.resolve.allowedCCOptions,\n                            indexFn = (value, index) => {\n                                return {\n                                    'text': value,\n                                    'index': index\n                                };\n                            },\n                            getDefaultOpt = (setting) => {\n                                let index = setting.defaultValue ?\n                                    setting.allowedValues.indexOf(setting.defaultValue) : 0;\n                                return (index >= 0) ? index : 0;\n                            };\n                        this.textOpacityOptions = cc.textStyle.allowedValues.map(indexFn);\n                        this.fontOptions = cc.textFont.allowedValues.map(indexFn);\n                        this.fontSizeOptions = cc.textSize.allowedValues.map(indexFn);\n                        this.backgroundOpacityOptions = cc.backgroundStyle.allowedValues.map(indexFn);\n                        this.digitalSourceOptions = cc.digitalSource.allowedValues.map(indexFn);\n                        this.formatSourceOptions = cc.formatSource.allowedValues.map(indexFn);\n                        this.textColorOptions = cc.textColor.allowedValues.map(indexFn);\n                        this.backgroundColorOptions = cc.backgroundColor.allowedValues.map(indexFn);\n\n                        this.ccDefaultSettings = {\n                            backgroundColor: getDefaultOpt(cc.backgroundColor),\n                            backgroundOpacity: getDefaultOpt(cc.backgroundStyle),\n                            font: getDefaultOpt(cc.textFont),\n                            fontSize: getDefaultOpt(cc.textSize),\n                            textColor: getDefaultOpt(cc.textColor),\n                            textOpacity: getDefaultOpt(cc.textStyle),\n                            digitalSource: getDefaultOpt(cc.digitalSource),\n                            formatSource: getDefaultOpt(cc.formatSource)\n                        };\n\n                        let settings = this.resolve.ccSettings,\n                            getIndex = (settingStr) => {\n                                let index = cc[settingStr].allowedValues.indexOf(settings[settingStr]);\n                                return (index >= 0) ? index : getDefaultOpt(cc[settingStr]);\n                            };\n                        this.ccSettings = {\n                            backgroundColor: getIndex('backgroundColor'),\n                            backgroundOpacity: getIndex('backgroundStyle'),\n                            font: getIndex('textFont'),\n                            fontSize: getIndex('textSize'),\n                            textColor: getIndex('textColor'),\n                            textOpacity: getIndex('textStyle'),\n                            digitalSource: getIndex('digitalSource'),\n                            formatSource: getIndex('formatSource')\n                        };\n                    }\n                }\n\n                hide() {\n                    this.modalInstance.dismiss();\n                }\n\n                // ***** Setter methods ******\n                // anonymous function assigned to variable so that we can pass it to child elements\n                // and reference to `this` inside function will point to CCSettingsController\n                initSetterMethods() {\n                    this.setTextOpacity = (option) => {\n                        this.setCCSettings({\n                            textOpacity: option.index\n                        });\n                    };\n                    this.setFont = (option) => {\n                        this.setCCSettings({\n                            font: option.index\n                        });\n                    };\n                    this.setFontSize = (option) => {\n                        this.setCCSettings({\n                            fontSize: option.index\n                        });\n                    };\n                    this.setBackgroundOpacity = (option) => {\n                        this.setCCSettings({\n                            backgroundOpacity: option.index\n                        });\n                    };\n\n                    // Color settings\n                    this.setTextColor = (color) => {\n                        this.setCCSettings({\n                            textColor: color.index\n                        });\n                    };\n                    this.setBackgroundColor = (color) => {\n                        this.setCCSettings({\n                            backgroundColor: color.index\n                        });\n                    };\n\n                    // Selection settings\n                    this.setDigitalSource = (src) => {\n                        this.setCCSettings({\n                            digitalSource: src.index\n                        });\n                    };\n                    this.setFormatSource = (src) => {\n                        this.setCCSettings({\n                            formatSource: src.index\n                        });\n                    };\n                }\n\n                // Restore default cc settings value\n                restoreDefault() {\n                    this.resetCCSetting();\n                }\n\n                resetCCSetting() {\n                    this.ccSettings = this.ccDefaultSettings;\n                    this.setCCSettings(this.ccSettings);\n                }\n\n                setCCSettings(setting) {\n                    angular.merge(this.ccSettings, setting);\n                    this.StbSettingsService.updateCCSettings(this.stb, {\n                        backgroundColor: this.backgroundColorOptions[this.ccSettings.backgroundColor].text,\n                        backgroundStyle: this.backgroundOpacityOptions[this.ccSettings.backgroundOpacity].text,\n                        digitalSource: this.digitalSourceOptions[this.ccSettings.digitalSource].text,\n                        formatSource: this.formatSourceOptions[this.ccSettings.formatSource].text,\n                        textColor: this.textColorOptions[this.ccSettings.textColor].text,\n                        textFont: this.fontOptions[this.ccSettings.font].text,\n                        textSize: this.fontSizeOptions[this.ccSettings.fontSize].text,\n                        textStyle: this.textOpacityOptions[this.ccSettings.textOpacity].text\n                    });\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}