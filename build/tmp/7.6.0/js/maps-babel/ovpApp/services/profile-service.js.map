{"version":3,"sources":["ovpApp/services/profile-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/profile-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.profileService', [\n        'ovpApp.config',\n        'ovpApp.services.capabilitiesService',\n        'ovpApp.services.accessibility',\n        'ovpApp.oauth',\n        'ovpApp.services.locationService'\n    ])\n    .factory('profileService', ProfileService);\n    /* @ngInject */\n    function ProfileService(config, capabilitiesService, CAPABILITIES, CAPABILITIES_STATE_MAP,\n        AccessibilityService, $q, $rootScope, OauthDataManager, locationService) {\n\n        let _postAuthUpdatePromise = null,\n            _profileRefreshed = false;\n\n        return {\n            postAuth,\n            isProfileRefreshed,\n            refreshProfile,\n            isAccessibilityEnabled,\n            isCdvrEnabled,\n            isRdvrEnabled,\n            hasCapability,\n            isHidden,\n            isTVODEnabled,\n            isTVODRentEnabled,\n            isTVODWatchEnabled,\n            isIpOnlyEnabled,\n            isRdvrHidden,\n            canUseTwctv,\n            canWatchLive,\n            canUseGuide,\n            isIptvPackage,\n            getCapabilities,\n            getCode,\n            getFirstAvailableState,\n            isAutoAuthEnabled,\n            isSpecU,\n            isBulkMDU,\n            isSpecUOrBulkMDU\n        };\n\n        /**\n         * Post Login functions are\n         * - get authenticated configuration\n         * - force refresh of capabilities\n         * - Make sure that no capabilities checks succeed until this has been run at least once\n         */\n        function postAuth() {\n            if (_postAuthUpdatePromise === null) {\n                _postAuthUpdatePromise = refreshProfile(true).then(() => _postAuthUpdatePromise = null);\n            }\n            return _postAuthUpdatePromise;\n        }\n\n        function isProfileRefreshed() {\n            return _profileRefreshed;\n        }\n\n        function refreshProfile(bypass) {\n            return $q.all([capabilitiesService.refreshCapabilities(bypass),\n                config.fetchAuthenticatedConfig()])\n                .then((/* [capabilities, config] */) => {\n                    //Update Config based on Capabilities\n                    if (isAccessibilityEnabled()) {\n                        config.ivrNumber = config._accessibilityIvrNumber;\n                    }\n                    _profileRefreshed = true;\n                    $rootScope.$broadcast('Session:profileRefreshed');\n                    return true;\n                });\n        }\n\n        function isAccessibilityEnabled() {\n            return $q.all([hasCapability(CAPABILITIES.ACCESSIBILITY), AccessibilityService.isEnabled()])\n                .then(result => {\n                    let [isAccessible, isEnabled] = result;\n                    return isAccessible && isEnabled;\n                });\n        }\n\n        function isCdvrEnabled() {\n            return $q.all([isAccessibilityEnabled(), hasCapability(CAPABILITIES.CDVR)])\n                .then(result => {\n                    let [isAccessible, hasCDVR] = result;\n                    // Disable CDVR if accessibility is not enabled\n                    return hasCDVR && config.getBool(config.cdvrEnabled) && isAccessible;\n                });\n        }\n\n        function isRdvrEnabled() {\n            return $q.all([isIpOnlyEnabled(), hasCapability(CAPABILITIES.RDVR)])\n                .then(result => {\n                    let [isIpOnly, hasRDVR] = result;\n                    return !isIpOnly && hasRDVR;\n                });\n        }\n\n        function isRdvrHidden() {\n            return isHidden(CAPABILITIES.RDVR);\n        }\n\n        function isTVODEnabled() {\n            return $q.all([\n                hasCapability(CAPABILITIES.TVOD),\n                isTVODRentEnabled(),\n                isTVODWatchEnabled()\n            ])\n            .then(result => {\n                let [\n                    hasTvodCapability,\n                    rentEnabled,\n                    watchEnabled\n                ] = result;\n\n                let tvodEnabled = rentEnabled || watchEnabled;\n\n                // TVOD might be disabled for all\n                if (!hasTvodCapability) {\n                    return false;\n                }\n\n                return tvodEnabled;\n            });\n        }\n\n        function isTVODRentEnabled() {\n            return hasCapability(CAPABILITIES.TVOD).then(hasTvodCapability => {\n                return hasTvodCapability && config.getBool(config.tvodRent);\n            });\n        }\n\n        function isTVODWatchEnabled() {\n            return hasCapability(CAPABILITIES.TVOD).then(hasTvodCapability => {\n                return hasTvodCapability && config.getBool(config.tvodWatch);\n            });\n        }\n\n        function isIpOnlyEnabled() {\n            return $q.all([\n                isCdvrEnabled(),\n                isAccessibilityEnabled(),\n                isSpecUOrBulkMDU(),\n                isIptvPackage()\n            ]).then(results => results.some(result => result));\n        }\n\n        function isAutoAuthEnabled() {\n            return (config.streamPlus.enabled || config.specU.enabled || config.bulkMDU.enabled);\n        }\n\n        /**\n         * SpecU is our service for universities\n         */\n        function isSpecU() {\n            return config.specU.enabled &&\n                OauthDataManager.get().accountType === 'SPECU';\n        }\n\n        /**\n         * Bulk MDU (where 'MDU' = 'multi-dwelling unit') is our service for\n         * things like apartment complexes\n         */\n        function isBulkMDU() {\n            let oauthParam = OauthDataManager.get();\n            return config.bulkMDU.enabled &&\n                oauthParam.accountType === 'BULK' &&\n                oauthParam.classification === 'MDU_BULK_MASTER';\n        }\n\n        function isSpecUOrBulkMDU() {\n            return isSpecU() || isBulkMDU();\n        }\n\n        function isIptvPackage() {\n            return hasCapability(CAPABILITIES.IPTVPACKAGE);\n        }\n\n        function canUseTwctv() {\n            return $q.all([hasCapability(CAPABILITIES.ONDEMAND),\n                      hasCapability(CAPABILITIES.RDVR),\n                      hasCapability(CAPABILITIES.GUIDE),\n                      hasCapability(CAPABILITIES.LIVE)\n                ])\n                .then(values => {\n                    // If any of the value is true then return true else reject promise\n                    return (values.some(v => v)) ? true : $q.reject();\n                });\n        }\n\n        function getFirstAvailableState() {\n            return capabilitiesService.getCapabilities().then((capabilities) => {\n                let state = null;\n                angular.forEach(capabilities, (value, key) => {\n                    if (value.authorized && CAPABILITIES_STATE_MAP[key]) {\n                        state = CAPABILITIES_STATE_MAP[key];\n                    }\n                });\n                return state;\n            });\n        }\n\n        function canWatchLive() {\n            return hasCapability(CAPABILITIES.LIVE);\n        }\n\n        function canUseGuide() {\n            return hasCapability(CAPABILITIES.GUIDE);\n        }\n\n        function hasCapability(capabilityId) {\n            if (_profileRefreshed) {\n                //Verify that the capabilities are accurate\n                if (capabilityId === CAPABILITIES.TVOD) {\n                    return hasTvodCapability();\n                } else if (capabilityId !== CAPABILITIES.RDVR) { // If the capability is not RDVR process normally\n                    return capabilitiesService.hasCapability(capabilityId);\n                } else {\n                    return hasRdvrCapability();\n                }\n            } else {\n                return $q.reject('Capabilities are not yet loaded');\n            }\n        }\n\n        /**\n         * Helper method for hasCapability\n         */\n        function hasTvodCapability() {\n            // STVWEB-1605: Disable Video Store when OOH\n            return locationService.getLocation()\n                .then(location => {\n                    return location.behindOwnModem ?\n                        capabilitiesService.hasCapability(CAPABILITIES.TVOD) : false;\n                }).catch(() => {\n                    // On error disable TVOD\n                    return false;\n                });\n        }\n\n        /**\n         * Helper method for hasCapability\n         */\n        function hasRdvrCapability() {\n            // If the capability is RDVR and cDVR is enabled then we will disable the RDVR capability, currently\n            // RDVR and cDVR are mutually exclusive.\n            return isCdvrEnabled().then(cdvrEnabled => {\n                if (cdvrEnabled) {\n                    return false;\n                } else {\n                    return capabilitiesService.hasCapability(CAPABILITIES.RDVR);\n                }\n            });\n        }\n\n\n        function isHidden(capabilityId) {\n            // STVWEB-844 / STVWEB-845: Hide ondemand and search if not available (only for specU)\n            // Hide DVR if not available (for all)\n            if (capabilityId === CAPABILITIES.CDVR || capabilityId === CAPABILITIES.RDVR ||\n                ((capabilityId === CAPABILITIES.ONDEMAND || capabilityId === CAPABILITIES.SEARCH) && isSpecU())) {\n                return capabilitiesService.hasCapability(capabilityId).then(enabled => !enabled);\n            } else if (capabilityId === CAPABILITIES.TVOD) {\n                // STVWEB-1605: Disable Video Store when OOH\n                // Hide Video Store it not available\n                return locationService.getLocation().then(location => {\n                    return capabilitiesService.hasCapability(capabilityId).then(enabled => {\n                        return (!location.behindOwnModem && enabled) ? false : !enabled;\n                    });\n                }).catch(() => {\n                    // On error hide TVOD\n                    return true;\n                });\n            } else {\n                return capabilitiesService.isHidden(capabilityId);\n            }\n        }\n\n        function getCapabilities() {\n            return capabilitiesService.getCapabilities();\n        }\n\n        function getCode(capability) {\n            return capabilitiesService.getCode(capability);\n        }\n\n    }\n}());\n"],"sourceRoot":"/source/"}