{"version":3,"sources":["ovpApp/services/location-service.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,mCAAmC,CAC9C,iBACA,kCACA,gBACA,4BACH,QAAQ,mBAAmB;;;IAG5B,SAAS,gBAAgB,QAAQ,QAAQ,IAAI,UAAU,WAAW,YAAY,kBAAkB,SAAS,IAAI;QACzG,IAAM,UAAU,OAAO,KAAK;QAC5B,IAAI,kBAAe;YAAE,UAAO;;QAE5B,IAAI,UAAW;YACX,YAAY,SAAA,aAAM;gBACd;;YAEJ,aAAa,SAAA,cAAM;gBACf,IAAI,CAAC,iBAAiB;oBAClB,OAAO,QAAQ,KAAK,UAAA,QAAM;wBADtB,OAC0B,OAAO;uBAAK,SACnC,YAAM;wBACT,OAAO,GAAG,OAAO;4BACb,WAAW;;;uBAGhB;oBACH,OAAO,GAAG,QAAQ;;;;;QAK9B;;QAEA,OAAO;;;;QAIP,SAAS,WAAW;;YAEhB,IAAI,WAAW,UAAU,OAAO;;YAEhC,WAAW,IAAI,qCAAqC,UAAC,OAAO,UAAa;gBACrE,IAAI,UAAU;oBACV;oBACA,WAAW,UAAU,OAAO;uBACzB;oBACH,UAAU,OAAO;oBACjB,WAAW;;;;;QAOvB,SAAS,QAAQ;YACb,IAAI,CAAC,SAAS;gBACV,UAAU,OAAO,IAAI,OAAO,eAAe,EAAC,iBAAiB,QACxD,UAAU,UAAA,QAAM;oBAHjB,OAGqB,OAAO,MAAM,MAAM,KAAK,GAAG,OAAO,GAAG,WAAU;mBACnE,UAAU;gBACf,QAAQ,KAAK,UAAA,QAAU;oBACnB,WAAW,WAAW,+BAA+B,OAAO;oBAC5D,IAAI,CAAC,QAAQ,OAAO,iBAAiB,OAAO,OAAO;wBAC/C,IAAI,OAAO,MAAM,WAAW,iBAAiB,MAAM,gBAAgB,SAAS;4BACxE,IAAI,iBAAiB;;gCACjB,QAAQ,SAAS,OAAO;;+BAEzB;gCACH,WAAW,WAAW,mCAAmC,OAAO;;;oBAGxE,kBAAkB,OAAO;mBAC3B,WAAS,YAAA;oBADP,OACa,UAAU;;;YAE/B,OAAO;;;KAGd","file":"ovpApp/services/location-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.locationService', [\n        'ovpApp.config',\n        'ovpApp.services.profileService',\n        'ovpApp.oauth',\n        'ovpApp.services.rxUtils'])\n    .factory('locationService', locationService);\n\n    /* @ngInject */\n    function locationService(rxhttp, config, $q, $timeout, $interval, $rootScope, OauthDataManager, $window, rx) {\n        const timeout = 1000 * 60 * 5;\n        let currentLocation, promise;\n\n        let service =  {\n            resetCache: () => {\n                fetch();\n            },\n            getLocation: () => {\n                if (!currentLocation) {\n                    return fetch().then(result => result.data)\n                    .catch(() => {\n                        return $q.reject({\n                            errorCode: 'WLC-1001'\n                        });\n                    });\n                } else {\n                    return $q.resolve(currentLocation);\n                }\n            }\n        };\n\n        activate();\n\n        return service;\n\n        //////////////\n\n        function activate() {\n            // Fetch location and publish location changed event\n            var interval = $interval(fetch, timeout);\n\n            $rootScope.$on('connectivityService:statusChanged', (event, isOnline) => {\n                if (isOnline) {\n                    fetch();\n                    interval = $interval(fetch, timeout);\n                } else {\n                    $interval.cancel(interval);\n                    interval = undefined;\n                }\n            });\n\n\n        }\n\n        function fetch() {\n            if (!promise) {\n                promise = rxhttp.get(config.locationUrl(), {withCredentials: true})\n                    .retryWhen(errors => errors.delay(1000).take(3).concat(rx.Observable.throw()))\n                    .toPromise($q);\n                promise.then(result => {\n                    $rootScope.$broadcast('Analytics:locationRetrieved', result.data);\n                    if (!angular.equals(currentLocation, result.data)) {\n                        if (config.specU.enabled && OauthDataManager.get().accountType === 'SPECU') {\n                            if (currentLocation) { // If we are switching from known network\n                                $window.location.reload(true); // Reload page\n                            }\n                        } else {\n                            $rootScope.$broadcast('LocationService:locationChanged', result.data);\n                        }\n                    }\n                    currentLocation = result.data;\n                }).finally(() => promise = null);\n            }\n            return promise;\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}