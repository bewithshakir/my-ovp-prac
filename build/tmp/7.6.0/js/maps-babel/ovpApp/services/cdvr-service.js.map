{"version":3,"sources":["ovpApp/services/cdvr-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/cdvr-service.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.services.cdvr', [\n        'ovpApp.config',\n        'ovpApp.dataDelegate',\n        'ovpApp.product.service',\n        'angularMoment',\n        'ovpApp.messages',\n        'ovpApp.services.entry',\n        'ovpApp.services.channel',\n        'ovpApp.services.errorCodes'\n    ])\n    .factory('cdvrService', CdvrService);\n\n    /* @ngInject */\n    function CdvrService(config, $http, $log, $q, productService, entryService, delegateFactory, moment,\n        ChannelService, errorCodesService) {\n\n        let service = {\n            getProgramList,\n            getScheduled,\n            scheduleRecording,\n            cancelRecording,\n            deleteRecording,\n            scheduleSeriesRecording,\n            cancelSeriesRecording,\n            getChannelNumber\n        };\n\n        return service;\n\n        function getProgramList() {\n            return entryService.forDefaultProfile().then(services => {\n                return $http({\n                    url: config.piHost + services.cdvr(),\n                    withCredentials: true,\n                    method: 'GET'\n                }).then(results => {\n                    if (results && results.data && results.data.results) {\n                        let recorded = results.data.results\n                            .find(pages => pages.context === 'recorded');\n                        if (recorded && recorded.media) {\n                            let recordings = recorded.media\n                                .map(delegateFactory.createInstance);\n                            return recordings;\n                        } else {\n                            return [];\n                        }\n                    } else {\n                        throw 'Unable to get the list of recordings';\n                    }\n                })\n                .catch(handleError);\n            });\n        }\n\n        function getScheduled() {\n            return entryService.forDefaultProfile().then(services => {\n                return $http({\n                    url: config.piHost + services.cdvr(),\n                    withCredentials: true,\n                    method: 'GET'\n                }).then(results => {\n                    if (results && results.data && results.data.results) {\n                        let scheduled = results.data.results\n                            .find(pages => pages.context === 'scheduled');\n                        if (scheduled && scheduled.media) {\n                            let scheduledRecordings = scheduled.media\n                                .map(delegateFactory.createInstance)\n                                .reduce((memo, scheduled) => {\n                                    let today = moment().hours(0).minutes(0).seconds(0).unix();\n                                    let stream = scheduled.nextLinearStream;\n                                    if (stream && stream.streamProperties) {\n                                        let day = moment(parseInt(stream.streamProperties.startTime));\n                                        let date = day.format('MMMM Do');\n                                        if (!memo[date]) {\n                                            memo[date] = {\n                                                label: day.format('dddd'),\n                                                date: date,\n                                                startTime: day.hours(0).minutes(0).seconds(0).unix(),\n                                                recordings: []\n                                            };\n                                            if (day.unix() < (today + 86400)) {\n                                                memo[date].label = 'Today';\n                                            } else if (day.unix() < (today + 172800)) {\n                                                memo[date].label = 'Tomorrow';\n                                            }\n                                        }\n                                        scheduled.day = memo[date];\n                                        memo[date].recordings.push(scheduled);\n                                    } else {\n                                        $log.warn('Unable to find next linear stream', scheduled);\n                                    }\n                                    return memo;\n                                }, {});\n                            scheduledRecordings = Object.keys(scheduledRecordings)\n                                .map(key => scheduledRecordings[key])\n                                .sort((a,b) => a.startTime - b.startTime);\n                            return scheduledRecordings;\n                        } else {\n                            return [];\n                        }\n                    } else {\n                        throw 'Unable to get the list of recordings';\n                    }\n                })\n                .catch(handleError);\n            });\n        }\n\n        function handleError() {\n            // We need to show the error message to the user whenever there is some\n            // error from the NNS. It could be 504 or 404 or 403 so no need to add\n            // the specific check and just show the error message.\n            return $q.reject(errorCodesService.getMessageForCode('WCD-1006'));\n        }\n\n        // Record a single instance of a program\n        function scheduleRecording(action, stream) {\n            let streamProps = stream.streamProperties;\n\n            let postParams = {\n                startTimeSec: parseInt(streamProps.startTime, 10) / 1000,\n                stopTimeSec: parseInt(streamProps.endTime, 10) / 1000\n            };\n\n            return doIpvsAction(action, postParams);\n        }\n\n\n        // Schedule a series. Options are the POST params specified by IPVS\n        function scheduleSeriesRecording(action, options) {\n            return doIpvsAction(action, options);\n        }\n\n        // Schedule a series.\n        function cancelSeriesRecording(action) {\n            return doIpvsAction(action);\n        }\n\n        // Cancel a scheduled program\n        function cancelRecording(action) {\n            return doIpvsAction(action);\n        }\n\n        // Delete a recorded program\n        function deleteRecording(action) {\n            return doIpvsAction(action);\n        }\n\n        function doIpvsAction(action, options) {\n            let ipvsAction = action.ipvsAction;\n\n            let url = config.piHost + ipvsAction.baseUri;\n\n            return $http({\n                url: url,\n                withCredentials: true,\n                method: ipvsAction.operation,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: options\n            });\n        }\n\n        function getChannelNumber(show) {\n            if (show.latestEpisode && show.latestEpisode.cdvrRecordedStream) {\n                let stream = show.latestEpisode.cdvrRecordedStream;\n                if (stream.streamProperties &&\n                    stream.streamProperties.cdvrRecording &&\n                    stream.streamProperties.cdvrRecording.tmsGuideId) {\n                    let tmsGuideId = stream.streamProperties.cdvrRecording.tmsGuideId;\n                    return ChannelService.getChannelByTmsId(tmsGuideId).then(service => {\n                        if (service && service.channels) {\n                            return service.channels[0];\n                        } else {\n                            return '';\n                        }\n                    });\n                } else {\n                    return $q.reject('Unable to find cdvrRecording');\n                }\n            } else if (show.network && show.network.callsign) {\n                return ChannelService.getChannelByNetwork(show.network).then(channels => {\n                    let chan = channels.find(channel => channel.channels && channel.channels.length > 0);\n                    if (!chan) {\n                        chan = channels.filter(channel => channel.network && channel.network.services)\n                            .reduce((channelWithNumber,channel) => {\n                                if (!channelWithNumber) {\n                                    return channel.network.services.find(\n                                        channel => channel.channels && channel.channels.length > 0);\n                                }\n                                return channelWithNumber;\n                            }, null);\n                    }\n                    if (chan) {\n                        return chan.channels[0];\n                    } else {\n                        return '';\n                    }\n                });\n            } else {\n                return $q.reject('Unable to find channel / service information');\n            }\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}