{"version":3,"sources":["ovpApp/config/messages-service.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,CAAC,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEjiB,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAJ/G,CAAA,YAAY;IACT;;IAEA,QAAQ,OAAO,mBAAmB,CAC9B,iBACA,0BACC,SAAS,YAAY;;IAK1B,IAHM,WAAQ,CAAA,YAAA;QACC,SADT,SACU,UAAU;YAIlB,gBAAgB,MALlB;;YAEE,KAAK,WAAW,SAAS,OAAO,UAAC,MAAM,SAAY;gBAC/C,KAAK,QAAQ,aAAa;gBAC1B,OAAO;eACR;;;;;;;;QAaP,aAlBE,UAAQ,CAAA;YAmBN,KAAK;YACL,OAZa,SAAA,kBAAC,MAAM,aAAa;gBACjC,IAAI,OAAQ,KAAK,SAAS;gBAC1B,IAAI,MAAM;oBACN,OAAO,KAAK,QAAQ,KAAK,uBAAuB;uBAC7C;oBACH,OAAO;;;WAeZ;YACC,KAAK;YACL,OAbY,SAAA,iBAAC,MAAM,aAAa;gBAChC,IAAI,OAAO,KAAK,SAAS;gBACzB,IAAI,MAAM;oBACN,OAAO,KAAK,QAAQ,KAAK,QAAQ;uBAC9B;oBACH,OAAO;;;WAgBZ;YACC,KAAK;YACL,OAdW,SAAA,gBAAC,MAAwB;gBAehC,IAfc,cAAW,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,KAAE,UAAA;;gBAClC,IAAI,UAAU,KAAK,SAAS;gBAC5B,YAAY,OAAO;gBACnB,OAAO;oBACH,SAAS,KAAK,QAAQ,QAAQ,uBAAuB;oBACrD,OAAQ,QAAQ,SAAU,KAAK,QAAQ,QAAQ,QAAQ,eAAe;oBACtE,YAAY;;;WAmBjB;YACC,KAAK;YACL,OAjBG,SAAA,QAAC,SAAS,aAAa;gBAC1B,IAAI,aAAa;oBACb,UAAU,OAAO,KAAK,aAAa,OAAO,UAAC,MAAM,KAAQ;wBACrD,OAAO,KAAK,QAAQ,OAAO,MAAM,MAAM,YAAY;uBACpD;;gBAEP,OAAO;;;;QAqBX,OA/DE;;;IAkDN,SAAS,mBAAmB;QACxB,IAAI,kBAAkB;;QAEtB,KAAK,2CAAO,UAAU,QAAQ,uBAAuB;YACjD,IAAI,CAAC,iBAAiB;gBAClB,kBAAkB,IAAI,SAAS;;YAEnC,OAAO;;;;KAGd","file":"ovpApp/config/messages-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.messages', [\n        'ovpApp.config',\n        'ovpApp.messages.local'])\n        .provider('messages', MessagesProvider);\n\n    class Messages {\n        constructor(messages) {\n            this.messages = messages.reduce((memo, message) => {\n                memo[message.full_code] = message;\n                return memo;\n            }, {});\n        }\n\n        getMessageForCode(code, replaceVars) {\n            let data =  this.messages[code];\n            if (data) {\n                return this.subVars(data.full_customer_message, replaceVars);\n            } else {\n                return '';\n            }\n        }\n\n        getHeaderForCode(code, replaceVars) {\n            let data = this.messages[code];\n            if (data) {\n                return this.subVars(data.header, replaceVars);\n            } else {\n                return '';\n            }\n        }\n\n        getAlertForCode(code, replaceVars = {}) {\n            let message = this.messages[code];\n            replaceVars.CODE = code;\n            return {\n                message: this.subVars(message.full_customer_message, replaceVars),\n                title: (message.header) ? this.subVars(message.header, replaceVars) : null,\n                buttonText: 'OK'\n            };\n        }\n\n        subVars(message, replaceVars) {\n            if (replaceVars) {\n                message = Object.keys(replaceVars).reduce((memo, key) => {\n                    return memo.replace('{{' + key + '}}', replaceVars[key]);\n                }, message);\n            }\n            return message;\n        }\n    }\n\n    /**\n     * MessagesProvider depends on config to store the messages, this provides help when initilizing messages through\n     * activity config.\n     */\n    function MessagesProvider() {\n        var messagesService = null;\n        /* @ngInject */\n        this.$get = function (config, OVPAPP_MESSAGES_LOCAL) {\n            if (!messagesService) {\n                messagesService = new Messages(OVPAPP_MESSAGES_LOCAL);\n            }\n            return messagesService;\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}