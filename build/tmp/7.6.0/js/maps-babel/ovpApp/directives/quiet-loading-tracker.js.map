{"version":3,"sources":["ovpApp/directives/quiet-loading-tracker.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,CAAC,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEjiB,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAJhH,CAAC,YAAY;IACT;;;;;;;;;;;;;;;IAeA,QAAQ,OAAO,2CAA2C,IACrD,UAAU,uBAAuB;QAC9B,UAAU;YACN,OAAO;YACP,SAAS;;QAEb,UAAQ;QASR,YAAU,CAAA,YAAA;;;;YAEK,SAFG,oBAEF,IAAI,UAAU;gBAD1B,gBAAgB,MADF;;gBAGV,QAAQ,OAAO,MAAM,EAAC,IAAA,IAAI,UAAA;;;YAGlC,aANkB,qBAAmB,CAAA;gBAOjC,KAAK;gBACL,OAFO,SAAA,UAAG;oBACN,KAAK,UAAU,KAAK,iBAAiB;oBACrC,KAAK,YAAY,KAAK,aAAa;;eAIxC;gBACC,KAAK;gBACL,OAHU,SAAA,WAAC,SAAS;oBAIhB,IAAI,QAAQ;;oBAHZ,IAAI,QAAQ,WAAW,CAAC,KAAK,SAAS;wBAClC,KAAK,UAAU;;;oBAGnB,IAAI,QAAQ,SAAS,KAAK,OAAO;wBAC7B,KAAK,UAAU;;wBAEf,KAAK,YAAY,KAAK;wBACtB,KAAK,iBAAiB,KAAK,iBAAiB,KAAK,iBAAiB,IAAI;wBACtE,IAAI,KAAK,iBAAiB;4BACtB,KAAK,SAAS,OAAO,KAAK;;;wBAG9B,KAAK,MAAK,WAAS,YAAM;4BACrB,MAAK;4BACL,IAAI,MAAK,iBAAiB;gCACtB,MAAK,SAAS,OAAO,MAAK;;4BAE9B,MAAK,kBAAkB,MAAK,SAAS,YAAA;gCAMjC,OANuC,MAAK;+BAAY;;;;eAWzE;gBACC,KAAK;gBACL,OARQ,SAAA,WAAG;oBACP,IAAI,KAAK,iBAAiB,GAAG;wBACzB,KAAK,UAAU;wBACf,KAAK,YAAY;;oBAErB,KAAK,kBAAkB;;;;YAY/B,OApDkB;;;KA4CzB","file":"ovpApp/directives/quiet-loading-tracker.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * quietLoadingTracker\n     *\n     * Displays an unobtrusive loading indicator, until a promise is resolved\n     *\n     * Example Usage:\n     * <quiet-loading track=\"somePromise\" message=\"'some message'\"></quiet-loading>\n     *\n     * Bindings:\n     *    track: (Promise) A promise object. When it resolves or rejects the loading will go away, provided\n     *        no other outstanding promises are waiting to be resolved/rejected.\n     *    message: (String) a message to display with the loading indicator. Defaults to 'Loading ...'\n     */\n    angular.module('ovpApp.directives.quiet-loading-tracker', [])\n        .component('quietLoadingTracker', {\n            bindings: {\n                track: '<',\n                message: '@'\n            },\n            template: `\n                <div>\n                    <div class=\"quiet-loading-tracker\" ng-show=\"$ctrl.loading\">\n                        <div class=\"spinner\"></div>\n                        {{$ctrl.message}}\n                    </div>\n                    <div class='sr-only' role='status' aria-live='polite' aria-atomic='true' ng-bind=\"$ctrl.srMessage\">\n                    </div>\n                </div>`,\n            controller: class QuietLoadingTracker {\n                /* @ngInject */\n                constructor($q, $timeout) {\n                    angular.extend(this, {$q, $timeout});\n                }\n\n                $onInit() {\n                    this.loading = this.activePromises > 0;\n                    this.srMessage = this.srMessage || '';\n                }\n\n                $onChanges(changes) {\n                    if (changes.message && !this.message) {\n                        this.message = 'Loading ...';\n                    }\n\n                    if (changes.track && this.track) {\n                        this.loading = true;\n                        //Use displayMessage to help with the a11y live\n                        this.srMessage = this.message;\n                        this.activePromises = this.activePromises ? this.activePromises + 1 : 1;\n                        if (this.debounceTimeout) {\n                            this.$timeout.cancel(this.debounceTimeout);\n                        }\n\n                        this.track.finally(() => {\n                            this.activePromises--;\n                            if (this.debounceTimeout) {\n                                this.$timeout.cancel(this.debounceTimeout);\n                            }\n                            this.debounceTimeout = this.$timeout(() => this.debounce(), 50);\n                        });\n                    }\n                }\n\n                debounce() {\n                    if (this.activePromises < 1) {\n                        this.loading = false;\n                        this.srMessage = '';\n                    }\n                    this.debounceTimeout = null;\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}