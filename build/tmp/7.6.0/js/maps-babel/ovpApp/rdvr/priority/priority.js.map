{"version":3,"sources":["ovpApp/rdvr/priority/priority.js"],"names":[],"mappings":"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","file":"ovpApp/rdvr/priority/priority.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * rdvrPriority\n     *\n     * Series priority subpage for Remote DVR\n     *\n     * Example Usage:\n     * <rdvr-priority></rdvr-priority>\n     *\n     */\n    angular.module('ovpApp.rdvr.priority', [\n            'ovpApp.rdvr.rdvrService',\n            'ovpApp.components.ovp.sortable',\n            'ovpApp.rdvr.cacheService',\n            'ovpApp.messages',\n            'ovpApp.components.alert',\n            'ovpApp.services.errorCodes'\n        ])\n        .component('rdvrPriority', {\n            templateUrl: '/js/ovpApp/rdvr/priority/priority.html',\n            controller: class RdvrPriority {\n                /* @ngInject */\n                constructor($log, alert, messages, $scope, createObservableFunction, stbService, rdvrService, $q,\n                    $rootScope, rx, $state, errorCodesService) {\n                    angular.extend(this, {$log, alert, messages, $scope, createObservableFunction, stbService,\n                        rdvrService, $q, $rootScope, rx, $state, errorCodesService});\n                }\n\n                $onInit() {\n                    this.teardown = this.createObservableFunction();\n\n                    this.stbService.currentStbSource\n                        .do(stb => this.stb = stb)\n                        .filter(stb => this.hasRdvrVersion2(stb))\n                        .flatMap(stb => this.getSeriesPriorities(stb))\n                        .takeUntil(this.teardown)\n                        .subscribe(\n                            result => {\n                                this.processSeries(result);\n\n                                this.updateLoadingIndicator(result);\n\n                                this.handleError(result);\n                            }\n                        );\n\n                    this.$scope.$on('ovp-sortable:order-change', (evt, data) => {\n                        this.$scope.$emit('Analytics:' + (data.movedUp ?\n                            'rdvr-higher-priority' : 'rdvr-lower-priority'), {});\n                        return this.updatePriorities();\n                    });\n                }\n\n                $onDestroy() {\n                    this.teardown();\n                }\n\n                getSeriesPriorities(stb) {\n                    const stbChanged = this.stbService.currentStbSource.skip(1);\n\n                    return this.rdvrService.getSeriesPriorities(stb)\n                        .takeUntil(stbChanged);\n                }\n\n                processSeries({data, isComplete}) {\n                    if (isComplete) {\n                        // Series priority needs the full set of data before showing it to the user\n                        this.seriesPriorities = data;\n                    } else {\n                        this.seriesPriorities = [];\n                    }\n                }\n\n                updateLoadingIndicator({data, isComplete, error}) {\n                    if (error) {\n                        if (this.loading) {\n                            this.loading.reject();\n                            this.loading = undefined;\n                        }\n                    } else if (data.length === 0 && !isComplete) {\n                        //Start of Fetch\n                        if (this.loading) {\n                            this.loading.reject();\n                        }\n\n                        this.loading = this.$q.defer();\n                        this.$rootScope.$broadcast(\n                            'message:loading',\n                            this.loading.promise,\n                            undefined,\n                            'DVR Priority'\n                        );\n                    } else if (isComplete) {\n                        // Data is fully loaded\n                        if (this.loading) {\n                            this.loading.resolve();\n                            this.loading = undefined;\n                        }\n                        this.$rootScope.$broadcast('pageChangeComplete', this.$state.current);\n                    }\n                    // Series priority doesn't display partially loaded data, so no need to handle that.\n                }\n\n                handleError({error}) {\n                    this.error = error;\n                    if (this.error) {\n                        this.$log.error('Series Priority: Error fetching series priority; status:- ' + error);\n                        this.alert.open({\n                            message: this.errorCodesService.getMessageForCode('WCM-9000'),\n                            title: this.errorCodesService.getHeaderForCode('WCM-1009'),\n                            buttonText: 'OK'\n                        });\n                    }\n                }\n\n                updatePriorities() {\n                    const order = this.seriesPriorities.map(p => p.settings.seriesPriority);\n\n                    this.rdvrService.setSeriesPriorities(this.stb, order)\n                        .then(\n                            () => {\n                                this.seriesPriorities.forEach((p, i) => p.settings.seriesPriority = i + 1);\n                            },\n                            error => {\n                                this.$log.error('Series Priority: Error updating series priority; status:- ' + error);\n                                this.alert.open({\n                                    message: this.errorCodesService.getMessageForCode('WCM-9000'),\n                                    title: this.errorCodesService.getMessageForCode('WCM-1013'),\n                                    buttonText: 'OK'\n                                });\n                            });\n                }\n\n                hasRdvrVersion2(stb = this.stb) {\n                    return stb.dvr && stb.dvr && stb.rdvrVersion > 1;\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}