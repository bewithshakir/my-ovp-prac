{"version":3,"sources":["ovpApp/directives/affix.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,2BAA2B,IAClC,UAAU,SAAS;;;IAGxB,SAAS,MAAM,SAAS,QAAQ;QAC5B,IAAM,YAAY;YACd,MAAA;YACA,UAAU;;QAEd,OAAO;;;;QAIP,SAAS,KAAK,OAAO,SAAS,MAAM;YAChC,IAAI,SAAS,OAAO,KAAK,OAAO,UAAU;YAC1C,IAAI,WAAW,OAAO,WAAW,QAAQ,QAAQ,OAAO,YAAY,QAAQ,QAAQ;YACpF,IAAI,YAAY,OAAO,YAAY,QAAQ,QAAQ,OAAO,aAAa,QAAQ,QAAQ;YACvF,IAAI,YAAY,OAAO,aAAa;YACpC,IAAI,SAAS;;YAEb,SAAS,KAAK,UAAU,YAAY;gBAChC,IAAM,eAAe,QAAQ,GAAG;gBAChC,IAAM,gBAAgB,UAAU,GAAG;;gBAEnC,IAAI,aAAa,SAAS,cAAc,QAAQ;;oBAE5C,UAAU,aAAa,SAAS,cAAc;uBAC3C,IAAI,aAAa,MAAM,aAAa,aAAa,SAAS,cAAc,QAAQ;;oBAEnF,UAAU,YAAY,aAAa;uBAChC,IAAI,aAAa,MAAM,WAAW;;oBAErC,UAAU,KAAK,IAAI,aAAa,MAAM,WAAW,aAAa,MAAM,cAAc;;;gBAGtF,QAAQ,IAAI,aAAW,gBAAgB,SAAM;;;;KAIxD","file":"ovpApp/directives/affix.js","sourcesContent":["/**\n * affix\n *\n * Conditionally applies the .affix class to the element, based on its position on the screen. Used for\n * switching to fixed positioning when the page scrolls far enough.\n *\n * usage:\n * <div affix=\"configObj\"></div>\n *\n * configObj = {\n *    threshold: (number) When the element is this many pixels from the top, the .affix class will be applied.\n *    scroller: (string) selector of the element that will be scrolling. If omitted, $window will be used.\n * }\n *\n * example:\n * <div affix=\"{threshold: 50, scroller: '#scrollerId'}\"></div>\n */\n\n(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.directives.affix', [])\n        .directive('affix', affix);\n\n    /* @ngInject */\n    function affix($window, $parse) {\n        const directive = {\n            link,\n            restrict: 'A'\n        };\n        return directive;\n\n        ///////////////\n\n        function link(scope, element, attr) {\n            let config = $parse(attr.affix)(scope) || {};\n            let scroller = config.scroller ? angular.element(config.scroller) : angular.element($window);\n            let container = config.container ? angular.element(config.container) : angular.element($window);\n            let threshold = config.threshold || 0;\n            let offset = 0;\n\n            scroller.bind('scroll', function () {\n                const boundingRect = element[0].getBoundingClientRect();\n                const containerRect = container[0].getBoundingClientRect();\n\n                if (boundingRect.bottom > containerRect.bottom) {\n                    // Hit the bottom of the container. Align it to the bottom of the container\n                    offset -= boundingRect.bottom - containerRect.bottom;\n                } else if (boundingRect.top < threshold && boundingRect.bottom < containerRect.bottom) {\n                    // Hit the top of the window. Align it to the top of the window\n                    offset += threshold - boundingRect.top;\n                } else if (boundingRect.top > threshold) {\n                    // Not aligned with anything. Align it to the top of the window, or the top of the container\n                    offset -= Math.min(boundingRect.top - threshold, boundingRect.top - containerRect.top);\n                }\n\n                element.css('transform', `translateY(${offset}px)`);\n            });\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}