{"version":3,"sources":["ovpApp/analytics/events/navigation.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/events/navigation.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.navigation', [\n        'ovpApp.config',\n        'ovpApp.analytics.analyticsService',\n        'ovpApp.legacy.stringUtil',\n        'ovpApp.analytics.events.navigationTimer',\n        'ovpApp.analytics.analyticsAssetHelper'\n    ])\n    .factory('navigation', navigationEvents)\n    .constant('analyticsMenuItemData', {\n        'livetv':         'liveTv',\n        'ovp.guide':      'guide',\n        'ovp.ondemand':   'onDemand',\n        'ovp.dvr':        'dvrManager',\n        'ovp.cdvr':       'cdvr',\n        'ovp.watchLater': 'myLibrary',\n        'ovp.settings':   'settings',\n        'ovp.store':      'videoStore'\n    })\n    .constant('analyticsPageViewData', {\n        'login': {\n            appSection: 'preAuthentication',\n            pageName: 'login'\n        },\n\n        'novideoservice': {\n            appSection: 'appIntro',\n            pageName: 'stream2NoVideoService'\n        },\n\n        'ovp.sadtverror': {\n            appSection: 'appIntro',\n            pageName: 'sadTvError'\n        },\n\n        'ovp.guide': {\n            appSection: 'guide',\n            pageName: 'guide',\n            isLazyLoad: true\n        },\n\n        'ovp.store': {\n            appSection: 'curatedCatalog',\n            pageName: 'curatedVideoStore',\n            isLazyLoad: true\n        },\n\n        'ovp.cdvr.recorded': {\n            appSection: 'dvrManager',\n            pageName: 'dvrRecordings',\n            isLazyLoad: true\n        },\n\n        'ovp.cdvr.scheduled': {\n            appSection: 'dvrManager',\n            pageName: 'dvrScheduled',\n            isLazyLoad: true\n        },\n\n        'ovp.livetv': {\n            appSection: 'liveTv',\n            pageName: 'playerLiveTv',\n            dependsOnFlash: true\n        },\n\n        'product.series.episodes': {\n            appSection: 'curatedCatalog',\n            pageName: 'productPage'\n        },\n\n        'product.event': {\n            appSection: 'curatedCatalog',\n            pageName: 'productPage'\n        },\n\n        'search': {\n            appSection: 'search',\n            pageName: 'search'\n        },\n\n        'search.error': {\n            appSection: 'search',\n            pageName: 'search'\n        },\n\n        'search.recent': {\n            appSection: 'search',\n            pageName: 'search',\n            pageType: 'searchResultsPage'\n        },\n\n        'search.quickresults': {\n            appSection: 'search',\n            pageName: 'search',\n            pageType: 'searchResultsPage'\n        },\n\n        'search.results': {\n            appSection: 'search',\n            pageName: 'search',\n            pageType: 'searchResultsPage'\n        },\n\n        'search.person': {\n            appSection: 'search',\n            pageName: 'curatedCastAndCrew',\n            pageType: 'curatedSearchCastAndCrew'\n        },\n\n        'search.sports': {\n            appSection: 'search',\n            pageName: 'curatedSports',\n            pageType: 'curatedSearchEvents'\n        },\n\n        'search.team': {\n            appSection: 'search',\n            pageName: 'curatedSports',\n            pageType: 'curatedSearchSports'\n        },\n\n        'ovp.watchLater': {\n            appSection: 'myLibrary',\n            pageName: 'myLibrary',\n            isLazyLoad: true\n        },\n\n        'ovp.settings.favorites': {\n            appSection: 'settings',\n            pageName: 'settingsFavorites'\n        },\n\n        'ovp.settings.accessibility': {\n            appSection: 'settings',\n            pageName: 'settingsAccessibility'\n        },\n\n        'ovp.settings.parentalControls': {\n            appSection: 'settings',\n            pageName: 'settingsParentalControls',\n            isLazyLoad: true\n        },\n\n        'ovp.settings.devices': {\n            appSection: 'settings',\n            pageName: 'settingsDevicesPage',\n            isLazyLoad: true\n        },\n\n        'ovp.settings.purchasePin': {\n            appSection: 'settings',\n            pageName: 'settingsPurchaseControls'\n        },\n\n        'ovp.settings.stb': {\n            appSection: 'settings',\n            pageName: 'settingsDevicesPage',\n            isLazyLoad: false\n        },\n\n        'ovp.settings.stb.purchasePin': {\n            appSection: 'settings',\n            pageName: 'settingsPurchaseControls'\n        },\n\n        'ovp.settings.stb.parentalControls': {\n            appSection: 'settings',\n            pageName: 'settingsParentalControls'\n        },\n\n        'ovp.dvr.my-recordings': {\n            appSection: 'dvrManager',\n            pageName: 'dvrRecordings',\n            isLazyLoad: true\n        },\n\n        'ovp.dvr.scheduled': {\n            appSection: 'dvrManager',\n            pageName: 'dvrScheduled',\n            isLazyLoad: true\n        },\n\n        'ovp.dvr.priority': {\n            appSection: 'dvrManager',\n            pageName: 'dvrSeriesManager',\n            isLazyLoad: true\n        },\n\n        'ovp.mobilelogin': {\n            appSection: 'preAuthentication',\n            pageName: 'downloadAppForm'\n        },\n\n        'buyFlow': {\n            appSection: 'stream2',\n            pageName: 'abstract',\n            context: 'stream2'\n        },\n\n        'buyFlow.welcome': {\n            appSection: 'stream2',\n            pageName: 'stream2SignUp',\n            context: 'stream2'\n        },\n\n        'buyFlow.confirmation': {\n            appSection: 'stream2',\n            pageName: 'stream2PurchaseConfirmation',\n            context: 'stream2'\n        }\n    })\n    .run(function loadHandler(navigation) {\n            return navigation;\n        });\n\n    /* @ngInject */\n    function navigationEvents($rootScope, analyticsService, $log,\n        analyticsEnums, $window, stringUtil, navigationTimer, config, $q,\n        analyticsAssetHelper, playerService, analyticsMenuItemData, analyticsPageViewData) {\n\n        // Track the timestamp of when navigation has begun. Defaults to 0\n        // to indicate \"we don't know when this started\".\n        let routeStartTime = 0;\n\n        // Collects the routing information as we receive it.\n        let routingState = null;\n\n        // Timer for detecting when a page has timed out.\n        let timeoutTimer = null;\n\n        // Variable to keep track of when the application is routing the user\n        // to a destination, instead of the user navigating themselves.\n        let triggeredByMemento = null;\n\n        // Access the analytics state so we can track when controllers\n        // are active or not.\n        let state = analyticsService.state;\n\n        // Capture timestamp of when a tracked modal dialog begins to display.\n        let modalStartTimestamp = null;\n\n        /**\n         * Capture the time at which routing has begun. This assumes a single\n         * route-start event per user navigation.\n         * @param e event\n         * @param data Data for the event.\n         */\n        function startNavigation(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: startNavigation', data, routingState);\n                }\n\n                // Capture transition data.\n                data.toState = data.transition.to();\n                data.toParams = data.transition.params('to');\n                data.wasReactivated = data.transition.wasReactivated || false;\n\n                if (angular.isDefined(data.transition.targetState) &&\n                    angular.isDefined(data.transition.targetState().params()) &&\n                    angular.isDefined(data.transition.targetState().params().analyticsAppTriggeredRouting)) {\n                    appTriggeredRouting();\n                }\n\n                // Consume the triggeredByMemento, if it has been populated.\n                let triggeredBy = triggeredByMemento || 'user';\n                triggeredByMemento = null;\n\n                // Retrieve any analytics for the current destination.\n                let pageAnalytics = analyticsPageViewData[data.transition.to().name] || data.toState.analytics;\n\n                // Nothing to do if we're routing to and from pages without analytics\n                if (!angular.isDefined(pageAnalytics)) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Routing ignored: page has no analytics:', data);\n                    }\n                    return;\n                }\n\n                // Default 'isLazyLoad' to false.\n                pageAnalytics.isLazyLoad = pageAnalytics.isLazyLoad || false;\n\n                if (state.isNavigationPaused()) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Ignoring route: navigation paused.');\n                    }\n                    return;\n                }\n\n                // Determine the 'appSection' and 'pageName' field values.\n                let appSection =  pageAnalytics.appSection;\n                let pageName = null;\n                if (angular.isDefined(pageAnalytics.pageName)) {\n                    pageName = pageAnalytics.pageName;\n                }\n\n                // Derive curatedCatalog page names.\n                let analyticSection = pageAnalytics;\n                if (angular.isDefined(analyticSection.categoryHint)) {\n                    pageName = analyticsAssetHelper.normalizeContentCategoryName(analyticSection.categoryHint);\n                }\n\n                // Generate a unique pageId for this content, utilizing the incoming\n                // parameters, if any.\n                let pageId = '';\n                if (angular.isDefined(data.toState.url)) {\n                    pageId = data.toState.url;\n                }\n                if (angular.isDefined(data.toParams)) {\n                    let str = Object.keys(data.toParams).sort().map(function (key) {\n                        return key + '=' + (data.toParams[key] ? data.toParams[key] : '');\n                    }).join('&');\n\n                    pageId += '?' + str;\n                }\n\n                // Apply given pageType, if any.\n                let pageType = null;\n                if (angular.isDefined(pageAnalytics.pageType)) {\n                    pageType = pageAnalytics.pageType;\n                }\n\n                // Does this page depend on flash, when we know flash is not available?\n                if (state.getFlashUnavailable() && pageAnalytics.dependsOnFlash) {\n                    $log.debug('Analytics: flash is unavailable', pageAnalytics);\n                    flashWarning(null, {\n                        pageName: 'adobeFlashNotAvailableWarning'\n                    });\n                    return;\n                }\n\n                // Ignore re-route to current page.\n                if (state.getCurrentPageName() === pageName &&\n                    state.getCurrentAppSection() === appSection) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: ignoring rerouting event to same page.', data);\n                    }\n                    return;\n                }\n\n                // Ignore re-route to page we are already en route to.\n                if (routingState &&\n                    routingState.appSection === appSection &&\n                    routingState.pageName === pageName &&\n                    routingState.pageId === pageId) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: ignoring duplicate routing event to same page.');\n                    }\n                    return;\n                }\n\n                // If we have a timeout timer, cancel it now.\n                if (timeoutTimer) {\n                    navigationTimer.cancelTimer();\n                    timeoutTimer = null;\n                }\n\n                // If the new destination does not have an analytics section, we can't\n                // begin tracking it as a new destination, so stop processing now.\n                if (!pageAnalytics) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('No analytics section for new destination, so halting now.');\n                    }\n                    return;\n                }\n\n                // Track the beginning of the page navigation.\n                // $log.debug('Analytics: startNavigation to ' + appSection +\n                //     ', ' + pageName, data);\n                routeStartTime = Date.now();\n\n                // Capture routing details\n                routingState = {\n                    triggeredBy: triggeredBy,\n                    renderInitTimestamp: routeStartTime,\n                    pageName: pageName,\n                    appSection: appSection,\n                    pageId: pageId,\n                    pageDisplayType: pageAnalytics.pageDisplayType || 'page',\n                    pageType: pageType || '',\n                    pageViewType: 'normal',\n                    settings: {},\n                    appliedSorts: extractSorts(appSection, pageName, data.toParams),\n                    appliedFilters: extractFilters(appSection, pageName, data.toParams),\n                    partialRenderedMs: null,\n                    partialRenderedTimestamp: null,\n                    fullyRenderedMs: null,\n                    fullyRenderedTimestamp: null,\n                    isLazyLoad: pageAnalytics.isLazyLoad,\n                    viewRenderedStatus: analyticsEnums.ViewRenderedStatus.NO_RENDER,\n                    featureName: pageAnalytics.featureName,\n                    featureType: pageAnalytics.featureType,\n                    featureCurrentStep: pageAnalytics.featureCurrentStep,\n                    featureNumberOfSteps: pageAnalytics.featureNumberOfSteps\n                };\n\n                // TVOD feature data may need to be included in some navigations.\n                if (pageAnalytics.checkForTvod) {\n                    // routingState.checkForTvod = pageAnalytics.checkForTvod;\n                    let tvodFlow = state.getTvodFlowState();\n                    if (tvodFlow) {\n                        angular.extend(routingState, tvodFlow);\n                        delete routingState.featureCurrentStep;\n                    }\n                }\n\n                // Capture pageView context, if any. Example: 'tvodFlow'\n                if (angular.isDefined(pageAnalytics.context)) {\n\n                    // Process context-specific pageView events\n                    routingState.context = pageAnalytics.context;\n\n                    // Process TVOD pageView events\n                    let tvodFlow = state.getTvodFlowState();\n                    if ('tvodFlow' === pageAnalytics.context && tvodFlow) {\n\n                        if ('rentConfirmation' === routingState.pageName) {\n                            tvodFlow.featureCurrentStep = 3;\n                            angular.extend(routingState, tvodFlow);\n                        } else if ('pinEntryPurchase' === routingState.pageName) {\n                            tvodFlow.featureCurrentStep = 5;\n                            angular.extend(routingState, tvodFlow);\n                        }\n\n                    } else if (pageAnalytics.context === 'stream2') {\n\n                        // Default field values for 'stream2' pageView actions.\n                        routingState.featureName = routingState.featureName || 'stream2';\n                        routingState.featureNumberOfSteps = 6;\n                        routingState.featureType = routingState.featureType || 'stream2BuyFlow';\n                        routingState.appSection = routingState.appSection || 'stream2';\n                    }\n                }\n\n                // Start the timeout timer.\n                timeoutTimer = navigationTimer.startTimer(\n                    routingState.appSection, routingState.pageName);\n\n                // Record new current location. (Must happen before\n                // pageChangeComplete nulls the routingState)\n                state.setCurrentPageName(routingState.pageName);\n                state.setCurrentAppSection(routingState.appSection);\n\n                // If the controller for this page is already loaded and active,\n                // we can complete the page right away, since we won't receive\n                // a 'pageChangeComplete' event. The trick here is ensuring\n                // the controller is actually loaded, and won't reload due to\n                // a parameter change.\n                if (data.wasReactivated) {\n\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Page is already loaded and active.');\n                    }\n\n                    // Turn off lazy load, since this page is ready to go.\n                    routingState.isLazyLoad = false;\n                    analyticsService.event('pageViewInit', routingState);\n                } else {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: (not already active) after startNav, routingState', routingState);\n                    }\n                    analyticsService.event('pageViewInit', routingState);\n                }\n\n                // If navigating away from a\n                if (!playerService.isValidPlayRoute()) {\n                    $rootScope.$emit('Analytics:playback-stopped', {\n                        TriggeredBy: 'exitPlayer'\n                    });\n                }\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Extract any sorting criteria for the given page.\n         *\n         * @param appSection The appSection for the given page.\n         * @param pageName The pageName for the given page.\n         * @param params The parameters for the given page.\n         * @return Array of sorts, possibly empty.\n         */\n        function extractSorts(appSection, pageName, params) {\n            try {\n                if (appSection && pageName && params) {\n                    // TODO: Expand this logic as-needed for other pages.\n                    // Do nothing. Use params to quiet the linter\n                    return [];\n                }\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n\n            // Fallthrough\n            return [];\n        }\n\n        /**\n         * Extract any filtering criteria for the given page.\n         *\n         * @param appSection The appSection for the given page.\n         * @param pageName The pageName for the given page.\n         * @param params The parameters for the given page.\n         * @return Array of filters, possibly empty.\n         */\n        function extractFilters(appSection, pageName, params) {\n\n            // Short-circuit if nothing to process.\n            if (!params) {\n                return [];\n            }\n\n            // $log.debug('Analytics: extractFilters appSection=' + appSection +\n            //     ', pageName=' + pageName + ', params' + pageName, params);\n\n            // Extract video store filter.\n            if (appSection === 'curatedCatalog' &&\n                pageName === 'curatedVideoStore') {\n                if (params.category && params.category.indexOf('&catName=') > 0) {\n\n                    let queryParameters = stringUtil.extractSingleValueParametersAsObject(params.category);\n                    return [queryParameters.catName] || [];\n                }\n            }\n\n            // Fallthrough (default value)\n            return [];\n        }\n\n        /**\n         * Capture a 'partially rendered' event from a page. Here, 'partially rendered'\n         * means the page isn't fully rendered, but has rendered enough to provide\n         * controls with which a user can interact.\n\n         * @param e event\n         * @param data eventData\n         */\n        function partiallyRendered(/*e, data*/) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: partiallyRendered');\n                }\n                if (!routingState) {\n                    // Do nothing if we've already published this pageView.\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Ignoring partiallyRendered event because ' +\n                            'not tracking a navigation event.');\n                    }\n                    return;\n                }\n\n                let now = Date.now();\n                routingState.partialRenderedTimestamp = now;\n                routingState.partialRenderedMs = now - routeStartTime;\n                routingState.viewRenderedStatus = analyticsEnums.ViewRenderedStatus.PARTIAL;\n\n                analyticsService.event('pageViewPartiallyRendered', routingState);\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Capture the end of a page change sequence.\n         * @param e event\n         * @param data eventData\n         */\n        function pageChangeComplete(/*e, data*/) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: pageChangeComplete:', routingState);\n                }\n\n                if (timeoutTimer) {\n                    navigationTimer.cancelTimer();\n                    timeoutTimer = null;\n                }\n\n                if (!routingState) {\n                    // Some pages send us multiple events in fast succession, such as\n                    // search-input.\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Ignoring pageComplete event because ' +\n                            'it has already been submitted.');\n                    }\n                    return;\n                }\n\n                let now = Date.now();\n\n                // Update routingState:\n                routingState.fullyRenderedTimestamp = now;\n                routingState.fullyRenderedMs = now - routeStartTime;\n                routingState.viewRenderedStatus = analyticsEnums.ViewRenderedStatus.COMPLETE;\n\n                // Backfill partial render time, if one doesn't exist.\n                if (!routingState.partialRenderedTimestamp) {\n                    routingState.partialRenderedTimestamp = routingState.fullyRenderedTimestamp;\n                    routingState.partialRenderedMs = routingState.fullyRenderedMs;\n                }\n\n                // Send pageView event.\n                analyticsService.event('pageViewCompleted', routingState);\n\n                // Clear our routing state, since we're no longer tracking it.\n                routingState = null;\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Capture the end of a page change sequence.\n         * @param e event\n         * @param data eventData\n         */\n        function modalStart() {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: modalStart');\n                }\n                modalStartTimestamp = Date.now();\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Capture the end of a page change sequence.\n         * @param e event\n         * @param data eventData\n         */\n        function modalView(e, data, options = null) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: modalView:', data);\n                }\n\n                // Set message defaults.\n                data.modalName = data.modalName || 'notification';\n                data.modalType = data.modalType || 'message';\n\n                let eventData = angular.copy(data);\n\n                // Global defaults for modalViews\n                eventData.triggeredBy = data.triggeredBy || 'user';\n\n                // Capture load time, with fallback to 0 if no start timestamp.\n                eventData.loadTimeMs = (modalStartTimestamp ? Date.now() - modalStartTimestamp : 0);\n\n                // If tvodFlow, add feature steps\n                let tvodFlow = state.getTvodFlowState();\n                if (tvodFlow) {\n                    if ('pinEntryPurchase' === data.modalName) {\n                        tvodFlow.featureCurrentStep = 3;\n                        angular.extend(eventData, tvodFlow);\n                        eventData.featureStepName = 'pinEntryPurchase';\n                    } else if ('pinEntryParentalControl' === data.modalName) {\n                        tvodFlow.featureCurrentStep = 3;\n                        angular.extend(eventData, tvodFlow);\n                        eventData.featureStepName = 'pinEntryParentalControl';\n                    } else if ('notification' === data.modalName) {\n                        tvodFlow.featureCurrentStep = 0;\n                        angular.extend(eventData, tvodFlow);\n                    }\n                }\n\n                // Send pageView event.\n                analyticsService.event('modalView', eventData, options);\n\n                // Clear our routing state, since we're no longer tracking it.\n                routingState = null;\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Capture when the flash warning component is displayed to the user.\n         *\n         * @param e event\n         * @param data Data for the event.\n         */\n        function flashWarning(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: flashWarning, currPage=' + state.getCurrentPageName(),\n                        data, routingState);\n                }\n\n                if (state.getCurrentPageName() === data.pageName) {\n                    // We often get two flash warnings when playing on demand content.\n                    $log.debug('Analytics: Suppressing double-routing to same flash warning page.');\n                    return;\n                }\n\n                // Track that flash is now unavailable.\n                state.setFlashUnavailable(true);\n\n                // Ignore this event if not logged in.\n                if (!state.getIsLoggedIn()) {\n                    return;\n                }\n\n                let now = Date.now();\n\n                // Ignore flash warning when destination page has no analytics.\n                if (!routingState) {\n                    $log.warn('Analytics: Received flash warning for destination page without analytics.');\n                    routeStartTime = now;\n                    routingState = {\n                        isLazyLoad: false,\n                        triggeredBy: 'application'\n                    };\n                }\n\n                // Override the ongoing page-view navigation.\n                routingState.pageName = data.pageName;\n                if (data && data.toState && data.toState.url) {\n                    routingState.pageId = data.toState.url;\n                }\n                routingState.renderInitTimestamp = routeStartTime;\n                routingState.fullyRenderedMs = now - routeStartTime;\n                routingState.fullyRenderedTimestamp = now;\n                routingState.viewRenderedStatus = analyticsEnums.ViewRenderedStatus.COMPLETE;\n\n                analyticsService.event('pageViewInit', routingState);\n                analyticsService.event('pageViewCompleted', routingState);\n\n                // Record new current location. (Must happen before\n                // we null the routingState)\n                state.setCurrentPageName(routingState.pageName);\n                state.setCurrentAppSection(routingState.appSection);\n\n                routingState = null;\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        function selectContent(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: selectContent, page=' + state.getCurrentPageName(),\n                        data);\n                }\n\n                // Determine search result facet.\n                let payload = angular.extend({}, data);\n\n                // Set default values\n                payload.triggeredBy = data.triggeredBy || 'user';\n                payload.operationType = data.operationType || 'assetSelection';\n                payload.pageSectionName = data.pageSectionName || 'contentArea';\n                payload.category = data.category || 'navigation';\n                if (data.pageSubSectionName) {\n                    payload.pageSubSectionName = data.pageSubSectionName;\n                }\n\n                // Use global accessiblity class to determine input device.\n                payload.triggeredUsing = analyticsService.getTriggeredBy();\n\n                // Override pageSubSectionName, if needed.\n                if (data.mylibCatName) {\n                    payload.pageSubSectionName = analyticsAssetHelper.toLowerCamelCase(data.mylibCatName);\n                } else if (payload.pageSubSectionName) {\n                    payload.pageSubSectionName = analyticsAssetHelper.toLowerCamelCase(payload.pageSubSectionName);\n                }\n\n                let pageName = state.getCurrentPageName();\n                if ('curatedVideoStore' === pageName) {\n\n                    // TVOD purchase\n                    payload.elementStandardizedName = 'videoStore';\n\n                } else if (['search','curatedCastAndCrew', 'curatedSports'].indexOf(pageName) >= 0 &&\n                    data.asset && data.asset.resultDisplay) {\n\n                    // Search result\n                    payload.category = 'search';\n                    payload.operationType = 'searchResultSelected';\n                    payload.selectedResultName = data.asset.title;\n                    payload.queryId = data.asset.dsQueryId;\n                    payload.elementIndex = data.asset.searchResultIndex;\n\n                    if (pageName === 'curatedSports') {\n                        payload.selectedResultFacet = 'sports';\n                    } else if (pageName === 'curatedCastAndCrew') {\n                        payload.selectedResultFacet = 'person';\n                    } else {\n                        payload.selectedResultFacet = data.asset.resultDisplay.toLowerCase();\n                    }\n                }\n\n                // Populate navPageSecondaryName.\n                if ('curatedCollections' === payload.navPagePrimaryName && !payload.navPageSecondaryName) {\n                    payload.navPageSecondaryName = pageName;\n                }\n\n                // Capture content identifiers\n                payload.elementType = data.elementType || 'link';\n                let assetOrShow = data.asset || data.showFromGuide;\n                payload.tmsProgramId = analyticsAssetHelper.getTmsProgramId(assetOrShow);\n                payload.tmsSeriesId = analyticsAssetHelper.getTmsSeriesId(assetOrShow);\n                payload.providerAssetId = analyticsAssetHelper.getProviderAssetId(assetOrShow);\n                payload.tmsGuideId =\n                    analyticsAssetHelper.getTmsGuideId(data.channel) ||\n                    analyticsAssetHelper.getTmsGuideId(assetOrShow);\n                payload.streamStartTimestamp = analyticsAssetHelper.getAirtime(assetOrShow);\n\n                // Prune deprecated/irrelevant/undefined payload values.\n                delete payload.isBlockedByRating;\n                delete payload.asset;\n                delete payload.showFromGuide;\n                delete payload.asset;\n                analyticsAssetHelper.pruneUndefinedValues(payload);\n\n                analyticsService.event('selectContent', payload);\n\n            } catch (ex) {\n                $log.error('Analytics: selectContent error', ex);\n            }\n        }\n\n        /**\n         * Generate an event when the Guide's channel filters have changed.\n         * @param e The event\n         * @param data Data for the event, including the filter name.\n         */\n        function guideUpdateFilters(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: guideUpdateFilters', data);\n                }\n                // Are we changing the filter on the Guide page, or the mini-guide\n                // on the live tv page?\n                let isMiniGuide = ('playerLiveTv' === state.getCurrentPageName());\n\n                // Drop this event if the filter hasn't actually changed.\n                let oldFilter = isMiniGuide ? state.getCurrentMiniGuideFilter() : state.getCurrentGuideFilter();\n                let newFilter = data.filter ? data.filter.label || data.filter.name : null;\n                if (oldFilter === newFilter) {\n                    return;\n                }\n\n                delete data.filter;\n\n                // Capture the filter change.\n                if (isMiniGuide) {\n                    state.setCurrentMiniGuideFilter(newFilter);\n                } else {\n                    state.setCurrentGuideFilter(newFilter);\n                }\n                data.operationType = 'filterApplied';\n                data.elementStandardizedName = 'filterChannels';\n                data.pageSectionName = 'guideOptionsSelectArea';\n                data.appliedFilters = newFilter === null ? [] : [newFilter];\n\n                if (data.triggeredBy === 'user') {\n                    data.triggeredUsing = analyticsService.getTriggeredBy();\n                }\n\n                selectAction(null, data);\n            }\n            catch (ex) {\n                $log.error('Analytics guideUpdateFilters:', ex);\n            }\n        }\n\n        /**\n         * Generate an event when the Guide's channel filters have changed.\n         * @param e The event\n         * @param data Data for the event, including the filter name.\n         */\n        function guideUpdateSort(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: guideUpdateSort', data);\n                }\n\n                data.operationType = 'sortApplied';\n                data.pageSectionName = 'guideOptionsSelectArea';\n                data.appliedSorts = [];\n\n                if (data.sort && data.sort.name) {\n                    data.appliedSorts = [data.sort.name];\n                    data.elementStandardizedName = (data.sort.id === 'networkAToZ' ?\n                        'sortByAlphabetical' :\n                        'sortByNumber');\n                }\n\n                if (data.triggeredBy === 'user') {\n                    data.triggeredUsing = analyticsService.getTriggeredBy();\n                }\n\n                delete data.sort;\n\n                selectAction(null, data);\n            }\n            catch (ex) {\n                $log.error('Analytics guideUpdateFilters:', ex);\n            }\n        }\n\n        /**\n         * Record that the application is about to route the user to a destination,\n         * instead of the user.\n         */\n        function appTriggeredRouting(/*e, data*/) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: appTriggeredRouting');\n                }\n                triggeredByMemento = 'application';\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Receive notification that the page navigation timer has fired,\n         * which may result in the publication of an event for page navigation\n         * timing out.\n         */\n        function timerTimedout(/*e, data*/) {\n            try {\n                if (routingState) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Page navigation timed out.');\n                    }\n                    routingState.viewRenderedStatus = analyticsEnums.ViewRenderedStatus.TIMEOUT;\n                    analyticsService.event('pageViewTimeout', routingState);\n                    routingState = null;\n                }\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        function selectAction(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: selectAction', data);\n                }\n\n                // Global defaults for selectActions\n                data.triggeredBy = data.triggeredBy || 'user';\n\n                // Use global accessiblity class to determine input device.\n                if (data.triggeredBy !== 'application') {\n                    data.triggeredUsing = analyticsService.getTriggeredBy();\n                }\n\n                data.category = data.category || 'navigation';\n                data.operationType = data.operationType || 'buttonClick';\n                data.pageSectionName = data.pageSectionName || 'conversionArea';\n\n                // Additional data for favoriteToggle\n                if ('favoriteToggle' === data.operationType) {\n                    data.elementStandardizedName = (data.toggleState ? 'favoriteAdd' : 'favoriteRemove');\n                    data.pageSectionName = 'guideArea';\n                }\n\n                // Special handling of pageSectionName\n                if ('DeriveFromOpType' === data.pageSectionName) {\n                    let currPage = state.getCurrentPageName();\n\n                    // Override page sectionName for the closed caption & SAP toggles\n                    if (['closedCaptionToggle', 'sapToggle'].indexOf(data.operationType) >= 0) {\n                        data.pageSectionName = (currPage === 'playerLiveTv' ? 'liveTvArea' : 'settingsSelectArea');\n                    }\n                }\n\n                // If 'cdvrSettings' is present, convert all values to strings.\n                if (data.cdvrSettings) {\n                    data.cdvrSettings = analyticsAssetHelper.convertAllValuesToStrings(data.cdvrSettings);\n                }\n\n                // Normalize the element name, if needed.\n                if (data.nonNormalizedElementStdName) {\n                    data.elementStandardizedName =\n                        analyticsAssetHelper.normalizeContentCategoryName(data.nonNormalizedElementStdName);\n                }\n\n                // Special handling for TVOD selectActions\n                if (data.context === 'tvodFlow') {\n\n                    // Retrieve the current tvod flow state.\n                    let tvodFlow = state.getTvodFlowState();\n\n                    // Drop events that can be ignored.\n                    if (tvodFlow.purchaseStopSeen === true &&\n                        data.ignoreIfPurchaseStopIsSeen === true) {\n                        if (analyticsService.isDebug()) {\n                            $log.debug('Analytics: Discarding ignorable tvod event', tvodFlow, data);\n                        }\n                        return;\n                    }\n\n                    // Update TVOD flow state\n                    tvodFlow.featureCurrentStep = data.featureCurrentStep;\n\n                    // Add tvodFlow data to event data and publish selectAction event.\n                    angular.extend(data, tvodFlow);\n\n                } else if (data.context === 'cdvr') {\n\n                    // Special handling for CDVR selectActions\n                    data.featureName = data.featureName || 'cdvr';\n                    data.pageSectionName = data.pageSectionName || 'conversionArea';\n                    data.operationType = data.operationType || 'buttonClick';\n                    data.featureNumberOfSteps = data.featureNumberOfSteps || 100;\n\n                    if (data.asset) {\n                        data.recordingOptions = analyticsAssetHelper.extractRecordingOptions(\n                            data.asset, data.cdvrSettings);\n                    }\n\n                } else if (data.context === 'stream2') {\n\n                    // For Stream2, backfill required fields with default values.\n                    data.category = data.category || 'navigation';\n                    data.pageSectionName = data.pageSectionName || 'conversionArea';\n                    data.operationType = data.operationType || 'buttonClick';\n                    data.featureName = data.featureName || 'stream2';\n                    data.featureNumberOfSteps = data.featureNumberOfSteps || 6;\n                    data.featureType = data.featureType || 'stream2BuyFlow';\n\n                    // User can jump around between steps, so record the last\n                    // step they actually performed.\n                    data.featurePreviousStep = state.getStream2BuyFlowPreviousStep();\n\n                    // User's current step becomes the next 'previous' step. No\n                    // need to reset this when they're done, since a user cannot\n                    // revisit the buyFlow after they complete it.\n                    state.setStream2BuyFlowPreviousStep(data.featureCurrentStep);\n                }\n\n                // If operationType = playButtonClicked, we need to capture all\n                // the usual playbackSelect event fields.\n                if ('playButtonClicked' === data.operationType) {\n                    analyticsAssetHelper.populateChannelData(data, data.channel);\n                    analyticsAssetHelper.populateAssetData(data, data.asset);\n                    if (data.stream) {\n                        analyticsAssetHelper.populateStreamData(data, data.stream);\n                    } else {\n                        analyticsAssetHelper.populateStreamData(data, data.asset.defaultStream);\n                    }\n                    analyticsAssetHelper.populateTvodData(data, data.asset);\n\n                    // Until DRM type changes...\n                    data.drmType = 'adobePrimeTime';\n\n                    // Delete unneeded data.\n                    delete data.asset;\n                    delete data.action;\n                }\n\n                analyticsService.event('selectAction', data);\n\n            } catch (ex) {\n                $log.error('Analytics selectAction:', ex);\n            }\n        }\n\n        function switchScreen(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: switchScreen', data);\n                }\n\n                // Apply default values for event\n                data.switchScreenDirection = data.switchScreenDirection || 'toTv';\n                data.triggeredBy = data.triggeredBy || 'user';\n                data.category = data.category || 'navigation';\n                data.switchScreenId = data.switchScreenId || 'unknown';\n                data.success = data.success || true;\n\n                if (data.error || data.errorCode) {\n\n                    data.success = false;\n                    data.errorType = 'switchScreen';\n\n                    if (!angular.isDefined(data.errorCode)) {\n                        data.errorCode = 'dvr' === state.getLastPlaybackType() ?\n                            'WCM-1603' : 'WCM-1001';\n                    }\n\n                    // Capture optional client error code.\n                    if (data.error && data.error.status) {\n                        data.clientErrorCode = data.error.status.toString();\n                    }\n                    delete data.error;\n                }\n\n                analyticsService.event('switchScreen', data);\n\n            } catch (ex) {\n                $log.error('Analytics switchScreen:', ex);\n            }\n        }\n\n        /**\n         * Record that the PIN entry dialog is being displayed, so we'll probably\n         * be receiving some pinEntry events soon. This lets us capture the reason\n         * for the upcoming pinEntry events.\n         *\n         * @param e Incoming event.\n         * @param data Data Event data, including context data for future pinEntry events.\n         */\n        function showPinDialog(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: showPinDialog', data);\n                }\n\n                let currentPage = state.getCurrentPageName();\n\n                modalStart();\n\n                if (data.context === 'parentalControlFlow') {\n                    data.modalName = 'pinEntryParentalControl';\n                    data.modalType = 'options';\n                    data.pinEntryContext = {\n                        category: 'navigation',\n                        pinType: 'parentalControl',\n                        context: data.context\n                    };\n\n                    // If we're on the settings page, we actually want a blank\n                    // context for the modal-view and the pinEntry events.\n                    if (currentPage === 'settingsParentalControls') {\n                        delete data.context;\n                        delete data.pinEntryContext.context;\n                    }\n\n                } else if (data.context === 'tvodFlow') {\n                    data.modalName = 'pinEntryPurchase';\n                    data.modalType = 'options';\n                    data.operationType = 'purchaseControl';\n                    data.pinEntryContext = {\n                        category: 'navigation',\n                        pinType: 'purchaseControl',\n                        operationType: 'purchaseControl',\n                        context: data.context\n                    };\n\n                    // If we're on the settings page, we actually want a blank context\n                    // and operationType for the modal-view and the pinEntry events.\n                    if (currentPage === 'settingsPurchaseControls') {\n                        delete data.context;\n                        delete data.pinEntryContext.context;\n                        delete data.operationType;\n                        delete data.pinEntryContext.operationType;\n                    }\n                }\n\n                modalView(null, data);\n\n                // Capture the reason for the impending PIN attempts.\n                state.setPINEntryContext(data.pinEntryContext);\n\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Record an attempt to enter a PIN.\n         *\n         * @param e Incoming event.\n         * @param data Data about the PIN entry. Mainly whether it succeeded or not.\n         */\n        function pinEntry(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: pinEntry', data);\n                }\n\n                // If no context, ignore this pin entry.\n                let pinEntryContext = state.getPINEntryContext();\n                if (null === pinEntryContext) {\n                    return;\n                }\n\n                // Retrieve the PIN entry context, and add values specific to\n                // this attempt to it before publishing it.\n                let pinData = angular.copy(pinEntryContext);\n                pinData.success = data.success;\n\n                // Attach tvod flow data\n                let tvodFlow = state.getTvodFlowState();\n                if (tvodFlow) {\n                    tvodFlow.featureCurrentStep = 6;\n                    angular.extend(pinData, tvodFlow);\n                }\n\n                analyticsService.event('pinEntry', pinData);\n\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Capture the start of the purchase process for a purchaseable asset.\n         *\n         * @param e Incoming event.\n         * @param data Data about the purchase.\n         */\n        function tvodPurchaseStart() {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: tvodPurchaseStart');\n                }\n\n                let tvodFlow = state.getTvodFlowState();\n                tvodFlow.featureCurrentStep = 2;\n                tvodFlow.featureStepName = 'purchaseStart';\n                let purchaseStartData = angular.extend({}, tvodFlow);\n\n                analyticsService.event('purchaseStart', purchaseStartData);\n\n                // Remove the featureStepName so it doesn't get repeated.\n                delete tvodFlow.featureStepName;\n\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Capture the end of the purchase process for a purchaseable asset.\n         *\n         * @param e Incoming event.\n         * @param data Data about the purchase.\n         */\n        function tvodPurchaseStop(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: tvodPurchaseStop', angular.copy(data),\n                        angular.copy(state.getTvodFlowState()));\n                }\n\n                // Retrieve and update tvodFlow state\n                let tvodFlow = state.getTvodFlowState();\n\n                // Do nothing if there's nothing to do.\n                if (!tvodFlow) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: tvodPurchaseStop - No TVOD flow to halt.');\n                    }\n                    return;\n                }\n\n                // Process errors\n                if (data.error) {\n                    data.context = 'tvodFlow';\n                    data.success = false;\n                    data.purchaseId = data.error && data.error.headers ? data.error.headers('x-trace-id') : undefined;\n                    data.triggeredBy = 'application';\n                    data.errorType = 'tvod';\n\n                    let error = data.error;\n                    if (error.data && error.data.context &&\n                        error.data.context.detailedResponseCode) {\n                        data.clientErrorCode = error.data.context.detailedResponseCode;\n                    }\n                    delete data.error;\n                }\n\n                // Drop events that can be ignored.\n                if (tvodFlow.purchaseStopSeen === true &&\n                    data.ignoreIfPurchaseStopIsSeen === true) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Discarding ignorable tvod event', tvodFlow, data);\n                    }\n                    return;\n                }\n\n                // Track that we've seen the purchaseStop.\n                tvodFlow.purchaseStopSeen = true;\n\n                // Feature step defers to whatever we were given, otherwise\n                // this is the second-to-last step in the flow.\n                if (data.featureCurrentStep) {\n                    tvodFlow.featureCurrentStep = data.featureCurrentStep;\n                } else {\n                    tvodFlow.featureCurrentStep = tvodFlow.featureNumberOfSteps - 1;\n                }\n\n                // Capture purchaseId\n                tvodFlow.purchaseId = data.purchaseId;\n                state.setTvodFlowState(tvodFlow);\n\n                // Build event data\n                let purchaseData = angular.extend({}, tvodFlow, data);\n                purchaseData.featureStepName = 'purchaseStop';\n\n                // Capture tmsProgramId so we can identify this asset's playbackSelect event.\n                if (data.asset) {\n                    purchaseData.tmsProgramId = analyticsAssetHelper.getTmsProgramId(data.asset);\n                }\n\n                // Store the purchase data for later use in playbackSelect event.\n                state.setLatestPurchase(purchaseData);\n\n                analyticsService.event('purchaseStop', purchaseData);\n\n                // If purchase stopped with a failure, clear the tvodFlow state.\n                if (!data.success) {\n                    state.setTvodFlowState(null);\n                }\n\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * The PIN entry dialog is closed, so we'll stop expecting pinEntry events.\n         * Clears the PIN entry context.\n         *\n         * @param e Incoming event.\n         */\n        function closePinDialog(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: closePinDialog', data, state.getTvodFlowState());\n                }\n\n                state.setPINEntryContext(null);\n\n                // If we're in a TVOD flow state, we need to halt it now.\n                // Additional handling for a dismissed PIN dialog.\n                if (!data.pinValidated) {\n\n                    // Halt TVOD event flow & clear flow data\n                    if (state.getTvodFlowState()) {\n                        tvodPurchaseStop({}, { // cancelled\n                            context: 'tvodFlow',\n                            triggeredBy: 'user',\n                            success: false\n                        });\n\n                        state.setTvodFlowState(null);\n                    }\n                }\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        function pauseNavigation(/* e */) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: pauseNavigation');\n                }\n\n                state.pauseNavigation();\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        function unpauseNavigation(/* e */) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: unpauseNavigation');\n                }\n\n                state.unpauseNavigation();\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        function goToDesktopVersionClicked() {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: goToDesktopVersionClicked');\n                }\n\n                let eventData = {\n                    elementStandardizedName: 'goToDesktopVersion'\n                };\n\n                // We know we're about to go offline.\n                $rootScope.$emit('Analytics:prepareForRefresh');\n\n                selectAction(null, eventData);\n\n            } catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        function rdvrPrioritization(evt, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: rdvrPrioritization', evt, data);\n                }\n\n                let eventData = {\n                    elementStandardizedName: 'changePriority',\n                    operationType: evt.name === 'Analytics:rdvr-higher-priority' ?\n                        'increasePriority' : 'decreasePriority'\n                };\n\n                selectAction(null, eventData);\n\n            } catch (ex) {\n                $log.error('Analytics rdvrPrioritization:', ex);\n            }\n        }\n\n        function selectChannel(e, data) {\n\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: selectChannel', data);\n                }\n\n                selectAction(null, {\n                    operationType: 'playButtonClicked',\n                    asset: data.channel.asset,\n                    channel: data.channel,\n                    triggeredBy: data.triggeredBy,\n                    playbackType: 'linear',\n                    scrubbingCapability: 'none',\n                    pageSectionName: 'conversionArea',\n                    elementStandardizedName: 'watch'\n                });\n\n            } catch (ex) {\n                $log.error('Analytics: ', ex);\n            }\n        }\n\n        function selectChannelCard(e, data) {\n\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: selectChannelCard', data);\n                }\n\n                selectAction(null, {\n                    operationType: 'networkSelection',\n                    pageSectionName: 'networkArea',\n                    navPagePrimaryName: 'curatedCollections',\n                    navPageSecondaryName: 'curatedNetworks'\n                });\n\n            } catch (ex) {\n                $log.error('Analytics: ', ex);\n            }\n        }\n\n\n        function menuItemClick(e, menuItem) {\n\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: menuItemClick', menuItem);\n                }\n\n                // Special handling for 'search' menu item\n                if (menuItem.id === 'search') {\n                    $rootScope.$emit('Analytics:search-start');\n                    return;\n                }\n\n                // Only send event if there's something to work with.\n                let elementName = analyticsMenuItemData[menuItem.link];\n                if (elementName) {\n                    selectAction(null, {\n                        pageSectionName: 'navGlobal',\n                        elementStandardizedName: elementName,\n                        operationType: 'navigationClick'\n                    });\n                }\n            } catch (ex) {\n                $log.error('Analytics: ', ex);\n            }\n        }\n\n        /**\n         * Function for attaching all navigation event listeners.\n         */\n        function attachEventListeners() {\n            try {\n                $rootScope.$on('Analytics:route-start', startNavigation);\n                $rootScope.$on('Analytics:flash-warning', flashWarning);\n                $rootScope.$on('Analytics:partial-render', partiallyRendered);\n\n                // Modal view navigation events\n                $rootScope.$on('Analytics:modal-start', modalStart);\n                $rootScope.$on('Analytics:modal-view', modalView);\n\n                // Handle pageChangeComplete events. The one with the \"Analytics:\"\n                // prefix allows the rest of the app to ignore them.\n                $rootScope.$on('pageChangeComplete', pageChangeComplete);\n                $rootScope.$on('Analytics:pageChangeComplete', pageChangeComplete);\n\n                $rootScope.$on('Analytics:applicationTriggeredRouting', appTriggeredRouting);\n\n                $rootScope.$on('Analytics:pauseNavigation', pauseNavigation);\n                $rootScope.$on('Analytics:unpauseNavigation', unpauseNavigation);\n\n                $rootScope.$on('Analytics:timeout', timerTimedout);\n\n                $rootScope.$on('Analytics:select', selectAction);\n                $rootScope.$on('Analytics:selectContent', selectContent);\n                $rootScope.$on('Analytics:switchScreen', switchScreen);\n                $rootScope.$on('Analytics:guide:updateFilter', guideUpdateFilters);\n                $rootScope.$on('Analytics:guide:updateSort', guideUpdateSort);\n\n                $rootScope.$on('Analytics:rdvr-higher-priority', rdvrPrioritization);\n                $rootScope.$on('Analytics:rdvr-lower-priority', rdvrPrioritization);\n\n                // TVOD\n                $rootScope.$on('Analytics:tvod-purchase-stop', tvodPurchaseStop);\n\n                // PIN entry events\n                $rootScope.$on('Analytics:showPinDialog', showPinDialog);\n                $rootScope.$on('Analytics:pinEntry', pinEntry);\n                $rootScope.$on('Analytics:closePinDialog', closePinDialog);\n\n                $rootScope.$on('goToDesktopVersionClicked', goToDesktopVersionClicked);\n\n                $rootScope.$on('Analytics:select-channel', selectChannel);\n                $rootScope.$on('Analytics:select-channel-card', selectChannelCard);\n                $rootScope.$on('Analytics:menu-item-click', menuItemClick);\n\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        // Now attach the event listeners.\n        attachEventListeners();\n\n        return {\n            appTriggeredRouting,\n            attachEventListeners,\n            closePinDialog,\n            extractFilters,\n            extractSorts,\n            flashWarning,\n            goToDesktopVersionClicked,\n            guideUpdateFilters,\n            guideUpdateSort,\n            modalStart,\n            modalView,\n            pageChangeComplete,\n            partiallyRendered,\n            pauseNavigation,\n            pinEntry,\n            selectAction,\n            selectContent,\n            showPinDialog,\n            startNavigation,\n            switchScreen,\n            timerTimedout,\n            tvodPurchaseStart,\n            tvodPurchaseStop,\n            unpauseNavigation\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}