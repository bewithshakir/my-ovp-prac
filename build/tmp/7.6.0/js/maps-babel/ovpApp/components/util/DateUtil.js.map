{"version":3,"sources":["ovpApp/components/util/DateUtil.js"],"names":[],"mappings":"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","file":"ovpApp/components/util/DateUtil.js","sourcesContent":["(function () {\n    'use strict';\n    // define(function (require, exports) {\n    angular.module('ovpApp.legacy.DateUtil', [])\n        .factory('dateUtil', LegacyDateUtil)\n        .constant('DATE_EXTENTION', ['st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n            'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st'])\n        .constant('DAY_NAMES', ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])\n        .constant('MONTH_NAMES', ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n            'September', 'October', 'November', 'December']);\n\n    /**\n     * Returns a formatted date string according to the provided pattern\n     *\n     * @param {Date} date The date\n     * @param {String} format The format string. The following table describes\n     * valid patterns:\n     * <table>\n     * <tr><th align='left'> Pattern </th><th align='left'> Description </th></tr>\n     * <tr><td valign='top'> y </td><td> Year. Accepts two- or four-digit years, as in the following examples:\n     *                      <ul><li> yy = 08 </li>\n     *                          <li> yyyy = 2008 </li>\n     *                      </ul>\n     *                      </td></tr>\n     * <tr><td valign='top'> m </td><td> Month in year. Examples:\n     *                  <ul><li> m = 1 </li>\n     *                      <li> mm = 01 </li>\n     *                      <li> mmm = Jan </li>\n     *                      <li> mmmm = January </li></ul>\n     *                      </td></tr>\n     * <tr><td valign='top'> e </td><td> Day in week. Examples:\n     *                  <ul><li> e = 2 </li>\n     *                      <li> ee = 02 </li>\n     *                      <li> eee = Tue </li>\n     *                      <li> eeee = Tuesday </li>\n     *                      </ul> </td></tr>\n     * <tr><td valign='top'> d </td><td> Day in month. Either one or two digits. </td></tr>\n     * <tr><td valign='top'> j </td><td> Hour in day (0-23). Either one or two digits. </td></tr>\n     * <tr><td valign='top'> h </td><td> Hour in day (1-12). Either one or two digits. </td></tr>\n     * <tr><td valign='top'> n </td><td> Minutes in hour (one or two digits). </td></tr>\n     * <tr><td valign='top'> s </td><td> Seconds in minute (one or two digits). </td></tr>\n     * <tr><td valign='top'> a </td><td> AM or PM </td></tr>\n     * </table>\n     *\n     * @return {String}\n     */\n    function LegacyDateUtil(DATE_EXTENTION, MONTH_NAMES, DAY_NAMES) {\n        var service = {};\n        service.formatDate = function (date, format) {\n\n            return format.replace(\n                /(yyyy|yy|mmmm|mmm|mm|m|eeee|eee|ee|e|dd|d|x|tttt|ttt|jj|j|hh|h|nn|n|ss|s|_|a)/gi,\n            function ($1) {\n                var h; // used below\n                switch ($1.toLowerCase()) {\n                    case 'yyyy':\n                        return date.getFullYear();\n                    case 'yy':\n                        return date.getFullYear().toString().substring(2);\n                    case 'mmmm':\n                        return MONTH_NAMES[date.getMonth()];\n                    case 'mmm':\n                        return MONTH_NAMES[date.getMonth()].substr(0, 3);\n                    case 'mm':\n                        return toPaddedString(date.getMonth() + 1, 2);\n                    case 'm':\n                        return date.getMonth() + 1;\n                    case 'eeee':\n                        return DAY_NAMES[date.getDay()];\n                    case 'eee':\n                        return DAY_NAMES[date.getDay()].substr(0, 3);\n                    case 'ee':\n                        return toPaddedString(date.getDay(), 2);\n                    case 'e':\n                        return date.getDay();\n                    case 'dd':\n                        return toPaddedString(date.getDate(), 2);\n                    case 'd':\n                        return date.getDate();\n                    case 'x':\n                        return DATE_EXTENTION[ date.getDate() - 1 ];\n                    case 'jj':\n                        return toPaddedString(date.getHours(), 2);\n                    case 'j':\n                        return date.getHours();\n                    case 'hh':\n                        return toPaddedString(((h = date.getHours() % 12) ? h : 12), 2);\n                    case 'h':\n                        return ((h = date.getHours() % 12) ? h : 12);\n                    case 'nn':\n                        return toPaddedString(date.getMinutes(), 2);\n                    case 'n':\n                        return date.getMinutes();\n                    case 'ss':\n                        return toPaddedString(date.getSeconds(), 2);\n                    case 's':\n                        return date.getSeconds();\n                    case '_':\n                        return ' ';\n                    case 'a':\n                        return date.getHours() < 12 ? 'am' : 'pm';\n                }\n            });\n        };\n\n        /**\n         * Determines if the date given is equal to today's date\n         *\n         * @param {Date} date\n         * @return {Boolean}\n         */\n        service.isToday = function (referenceDate, itemDate) {\n            var eodToday = referenceDate;\n            eodToday.setHours(23, 59, 59, 999);\n\n            let timeDiff = eodToday.getTime() - itemDate.getTime();\n            let msInDay = 24 * 60 * 60 * 1000;\n\n            return timeDiff > 0 && timeDiff < msInDay;\n        };\n\n        /**\n         * Determines if the date given is tomorrow's date\n         *\n         * @param {Date} date\n         * @return {Boolean}\n         */\n        service.isTomorrow = function (referenceDate, itemDate) {\n            var eodToday = new Date(referenceDate.getTime());\n            eodToday.setHours(23, 59, 59, 999);\n\n            let eodTomorrow = new Date(referenceDate.getTime());\n            let msInDay = 24 * 60 * 60 * 1000;\n            eodTomorrow.setTime(eodTomorrow.getTime() + msInDay);\n            eodTomorrow.setHours(23, 59, 59, 999);\n\n            return itemDate.getTime() > eodToday.getTime() &&\n                itemDate.getTime() <= eodTomorrow.getTime();\n        };\n\n        /**\n         * Determines if the date given is yesterday's date\n         *\n         * @param {Date} date\n         * @return {Boolean}\n         */\n        service.isYesterday = function (referenceDate, itemDate) {\n            var today = new Date(referenceDate.getTime());\n            today.setHours(0, 0, 0, 0);\n\n            let bodYesterday = new Date(referenceDate.getTime());\n            bodYesterday.setHours(0, 0, 0, 0);\n            bodYesterday.setDate(bodYesterday.getDate() - 1);\n\n            return itemDate.getTime() > bodYesterday.getTime() &&\n                itemDate.getTime() <= today;\n        };\n\n        /**\n         * @param {Date} date\n         * @return {Date}\n         */\n        service.copy = function (date) {\n            return new Date(date.getFullYear(), date.getMonth(), date.getDate(),\n                date.getHours(), date.getMinutes(), date.getSeconds(),\n                date.getMilliseconds());\n        };\n\n        /**\n         * Returns a new Date with the added days\n         *\n         * @param {Date} date\n         * @param {Number} days\n         * @return {Date}\n         */\n        service.addDays = function (date, days) {\n            return this.addHours(date, days * 24);\n        };\n\n        /**\n         * Returns a new Date with the added hours\n         *\n         * @param {Date} date\n         * @param {Number} hours\n         * @return {Date}\n         */\n        service.addHours = function (date, hours) {\n            return this.addMinutes(date, hours * 60);\n        };\n\n        /**\n         * Returns a new Date with the added minutes\n         *\n         * @param {Date} date\n         * @param {Number} minutes\n         * @return {Date}\n         */\n        service.addMinutes = function (date, minutes) {\n            return this.addSeconds(date, minutes * 60);\n        };\n\n        /**\n         * Returns a new Date with the added seconds\n         *\n         * @param {Date} date\n         * @param {Number} seconds\n         * @return {Date}\n         */\n        service.addSeconds = function (date, seconds) {\n            return this.addMilliseconds(date, seconds * 1000);\n        };\n\n        /**\n         * Returns a new Date with the added milliseconds\n         *\n         * @param {Date} date\n         * @param {Number} ms\n         * @return {Date}\n         */\n        service.addMilliseconds = function (date, ms) {\n            return new Date(date.getTime() + ms);\n        };\n\n        /**\n         * Rounds the minutes, seconds, and milliseconds <em>down</em> to the nearest\n         * half hour.\n         * @param {Date} date\n         * @return {Date}\n         */\n        service.roundHalfHour = function (date) {\n            if (date.getMinutes() >= 30) {\n                return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), 30);\n            } else {\n                return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours());\n            }\n        };\n\n        /**\n         * Rounds the minutes, seconds, and milliseconds <em>down</em> to the nearest\n         * hour.\n         * @param {Date} date\n         * @return {Date}\n         */\n        service.roundHour = function (date) {\n            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours());\n        };\n\n        /**\n         * Parses a date and time string in YYYYMMDD or YYYYMMDDHHMM format.\n         *\n         * @param {String} dateTimeStr\n         * @return {Date}\n         */\n        service.parseDateTime = function (dateTimeStr) {\n            var year = parseInt(dateTimeStr.substr(0, 4), 10);\n            var month  = parseInt(dateTimeStr.substr(4, 2), 10);\n            var day = parseInt(dateTimeStr.substr(6, 2), 10);\n            var hours;\n            var minutes;\n            if (dateTimeStr.length > 8) {\n                hours = parseInt(dateTimeStr.substr(8, 2), 10);\n                minutes = parseInt(dateTimeStr.substr(10, 2), 10);\n            } else {\n                hours = 0;\n                minutes = 0;\n            }\n            if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hours) || isNaN(minutes)) {\n                throw new Error('Invalid date format: ' + dateTimeStr);\n            }\n            return new Date(year, month - 1, day, hours, minutes);\n        };\n\n        /**\n         * Parses a date and time string in DAY MM/DD, HH:MM[am/pm] (12 hour) format.\n         * Will dynamically figure out the year based on today's date.\n         *\n         * @param {String} dateTimeStr\n         * @return {Date}\n         */\n        service.parseDateTimeFeedLiteral = function (dateTimeStr) {\n            var today = new Date();\n            var parsedSpace = dateTimeStr.split(' ');\n            var month = parseInt(parsedSpace[1].split('/')[0], 10);\n            var day = parseInt(parsedSpace[1].split('/')[1], 10);\n            var time = parsedSpace[2].split(':');\n            var hours = parseInt(time[0], 10) + (time[1].toLowerCase().indexOf('pm') > -1 ? 12 : 0);\n            var minutes = parseInt(time[1], 10);\n            var year = month < today.getMonth() + 1 ? today.getFullYear() + 1 : today.getFullYear();\n            if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hours) || isNaN(minutes)) {\n                throw new Error('Invalid date format: ' + dateTimeStr);\n            }\n            return new Date(year, month - 1, day, hours, minutes);\n        };\n\n        /**\n         * Calculates the difference in time from date1 to date2.\n         *\n         * Example:\n          <pre>\n            dateDiff(new Date(2010,3,1), new Date(2010,4,1), 'd') --> 31\n            dateDiff(new Date(2010,3,1), new Date(2010,2,1), 'd') --> -28\n          </pre>\n         * @param {Date} date1\n         * @param {Date} date2\n         * @param {String} datePart (Optional) A character indicating which increment the difference\n         * is calculated in. The result will be rounded down to whole units. If omitted, the\n         * result is in MS. The supported date parts are:\n         * <dl>\n         * \t\t<dt>d</dt><dd>Days</dd>\n         * \t\t<dt>h</dt><dd>Hours</dd>\n         * \t\t<dt>n</dt><dd>Minutes</dd>\n         * \t\t<dt>s</dt><dd>Minutes</dd>\n         * \t\t<dt>default</dt><dd>Milliseconds</dd>\n         * </dl>\n         */\n        service.dateDiff = function (date1, date2, datePart) {\n            var msDiff = date2.getTime() - date1.getTime();\n            switch (datePart){\n                case 'd':\n                    return Math.round(msDiff / 1000 / 60 / 60 / 24);\n                case 'h':\n                    return Math.round(msDiff / 1000 / 60 / 60);\n                case 'n':\n                    return Math.round(msDiff / 1000 / 60);\n                case 's':\n                    return Math.round(msDiff / 1000);\n                default:\n                    return msDiff;\n            }\n        };\n\n        service.getTimeFromGmt = function (gmTime, gmtOffset) {\n            if (!gmTime || typeof gmtOffset !== 'number' || isNaN(gmTime) || isNaN(gmtOffset)) {\n                return;\n            }\n\n            // this is the timezone that the date from the server was returned as\n            let serverOffsetSeconds = gmtOffset * 60 * 60;\n\n            // this is the local timezone on the user's machine\n            let localOffsetSeconds = new Date().getTimezoneOffset() * 60;\n\n            // add the two together to get the offset for the show\n            let offsetSeconds = serverOffsetSeconds + localOffsetSeconds;\n\n            return gmTime + offsetSeconds;\n        };\n\n        service.getAirDate = function (gmTime, gmtOffset) {\n            var time = this.getTimeFromGmt(gmTime, gmtOffset) * 1000;\n            var airDate = new Date(time);\n\n            return airDate;\n        };\n\n        service.getFormattedAirDate = function (airTime, gmtOffset) {\n            var airDate = this.getAirDate(airTime, gmtOffset);\n\n            return this.formatDate(airDate, 'yyyymmddjjnn');\n        };\n\n\n        function toPaddedString(num, length, radix) {\n            var str = num.toString(radix || 10);\n            while (str.length < length) {\n                str = '0' + str;\n            }\n            return str;\n        }\n\n        return service;\n    }\n\n}());\n"],"sourceRoot":"/source/"}