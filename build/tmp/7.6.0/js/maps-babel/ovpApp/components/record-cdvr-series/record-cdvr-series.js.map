{"version":3,"sources":["ovpApp/components/record-cdvr-series/record-cdvr-series.js"],"names":[],"mappings":"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","file":"ovpApp/components/record-cdvr-series/record-cdvr-series.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.components.recordCdvrSeries', [\n        'ovpApp.components.ovp.channel',\n        'ovpApp.messages',\n        'ovpApp.components.alert',\n        'ovpApp.components.ovp.button',\n        'ovpApp.components.ovp.selectBox',\n        'ovpApp.components.ovp.clickConfirm',\n        'ovpApp.services.dateFormat',\n        'ovpApp.directives.dropdownList',\n        'ovpApp.services.cdvr',\n        'ajoslin.promise-tracker'\n    ])\n\n    .component('recordCdvrSeries', {\n        bindings: {\n            resolve: '<',\n            modalInstance: '<'\n        },\n        templateUrl: '/js/ovpApp/components/record-cdvr-series/record-cdvr-series.html',\n        controller: class RecordCdvrSeries {\n            constructor (promiseTracker, $rootScope, cdvrService, ChannelService, $q,\n                $element, $timeout, $log, errorCodesService) {\n                angular.extend(this, {promiseTracker, $rootScope, cdvrService, ChannelService,\n                    $q, $element, $timeout, $log, errorCodesService});\n            }\n\n            $onInit() {\n                this.asset = this.resolve.asset;\n                this.action = this.resolve.action;\n                this.preferredTmsGuideId = this.resolve.preferredTmsGuideId;\n                this.settings = {\n                    recordOnlyNew: true,\n                    tmsGuideId: this.preferredTmsGuideId\n                };\n\n                this.loadingTracker = this.promiseTracker();\n\n                this.channels = [];\n                this.getChannels()\n                    .then(channels => {\n                        this.channels.splice(0, this.channels.length, ...channels);\n\n                        this.initForm();\n\n                        this.setSelectedChannel();\n                    });\n\n                // Options use same property names as settings to help link the form\n                // entry fields of the dialog to the settings we save.\n                this.options = {\n                    recordOnlyNew: [\n                        {label: 'All Episodes', value: false},\n                        {label: 'New Episodes', value: true}\n                    ],\n                    tmsGuideId: this.channels\n                };\n            }\n\n            $postLink() {\n                this.$timeout(() => {\n                    this.$element.find('ovp-dropdown-list button:visible')[0].focus();\n                }, 0, false);\n            }\n\n            onSelect(key) {\n                return (item) => {\n                    this.form[key] = this.options[key].findIndex((opt) => opt.value === item.value);\n                    angular.forEach(this.form, (val, key) => {\n                        this.settings[key] = this.options[key][val].value;\n                    });\n\n                    if (key === 'tmsGuideId') {\n                        this.setSelectedChannel();\n                    }\n                };\n            }\n\n            confirm() {\n\n                // Analytics\n                this.$rootScope.$emit('Analytics:select', {\n                    context: 'cdvr',\n                    featureType: 'cdvrRequestToRecord',\n                    featureCurrentStep: 3,\n                    featureNumberOfSteps: 100,\n                    elementStandardizedName: 'confirm',\n                    operationType: 'buttonClick',\n                    modalName: 'cdvrConfirmRecord',\n                    modalType: 'options',\n                    asset: this.asset,\n                    cdvrSettings: this.settings\n                });\n\n                const promise = this.cdvrService.scheduleSeriesRecording(this.action, this.settings)\n                    .then(() => {\n                        this.$rootScope.$broadcast('update-dvr',\n                            {} /* no schedule options at this point */,\n                            this.asset, this.action);\n                        this.$rootScope.$broadcast('message:growl',\n                            'Recording for ' + this.asset.title + ' successfully set');\n                        this.modalInstance.close('success');\n\n                        // Analytics\n                        this.$rootScope.$emit('Analytics:cdvr-schedule-series-recording',\n                            this.asset,\n                            this.action,\n                            {\n                                recordOnlyNew: this.settings.recordOnlyNew,\n                                tmsGuideId: this.settings.tmsGuideId\n                            }\n                        );\n\n                    }, (error) => {\n                        this.$log.error(error);\n                        this.modalInstance.dismiss('error');\n                        // UNISTR - CDVR_ERROR_RECORDING_FAIL\n                        this.$rootScope.$broadcast('message:growl',\n                            'Weâ€™re sorry, we were unable to schedule your recording. Please try again later.');\n\n                        // Analytics\n                        this.$rootScope.$emit('Analytics:cdvr-record-failed',\n                            this.asset,\n                            this.action,\n                            {\n                                recordOnlyNew: this.settings.recordOnlyNew,\n                                tmsGuideId: this.settings.tmsGuideId\n                            },\n                            {\n                                error: error,\n                                errorCode: 'WCD-1400',\n                                errorMessage: this.errorCodesService.getMessageForCode('WCD-1400', {\n                                    TITLE: this.asset.title\n                                })\n                            }\n                        );\n                    });\n\n                this.loadingTracker.addPromise(promise);\n            }\n\n            cancel() {\n\n                // Analytics\n                this.$rootScope.$emit('Analytics:select', {\n                    context: 'cdvr',\n                    featureType: 'cdvrRequestToRecord',\n                    featureCurrentStep: 3,\n                    featureNumberOfSteps: 4,\n                    modalName: 'cdvrConfirmRecord',\n                    modalType: 'options',\n                    elementStandardizedName: 'cancel',\n                    operationType: 'buttonClick',\n                    asset: this.asset,\n                    cdvrSettings: this.settings\n                });\n\n                this.modalInstance.dismiss('cancelled');\n            }\n\n            getChannels() {\n                let promises = this.asset.cdvrChannelPickerTmsGuideIds\n                    .map((guideId) => {\n                        return this.ChannelService.getChannelByTmsId(guideId)\n                            .then((chanInfo) => {\n                                if (chanInfo && chanInfo.channels) {\n                                    // Create drop up list item for channel\n                                    let channel = {\n                                        callSign: chanInfo.callsign,\n                                        // Default to first channel number in array\n                                        chanNum: chanInfo.channels.includes(this.asset.displayChannel) ?\n                                            this.asset.displayChannel : chanInfo.channels[0],\n                                        value: chanInfo.tmsGuideId\n                                    };\n                                    channel.label = chanInfo.callsign + ' | ' + channel.chanNum;\n                                    return channel;\n                                }\n                            });\n                    });\n\n                const byCallsign = (a, b) => {\n                    const callSignA = a.callSign.toUpperCase();\n                    const callSignB = b.callSign.toUpperCase();\n\n                    if (callSignA < callSignB) {\n                        return -1;\n                    }\n\n                    if (callSignA > callSignB) {\n                        return 1;\n                    }\n                    return 0;\n                };\n\n                return this.$q.all(promises)\n                    .then(channels => {\n                        return channels.filter(channel => !!channel)\n                            .sort(byCallsign);\n                    });\n            }\n\n            initForm() {\n                this.form = {};\n                angular.forEach(this.settings, (val, key)=> {\n                    if (this.options[key]) {\n                        this.form[key] = this.options[key].findIndex(opt => opt.value == val);\n                    }\n                });\n            }\n\n            setSelectedChannel() {\n                this.displayChannel = this.channels[this.form.tmsGuideId].chanNum;\n                this.tmsGuideId = this.channels[this.form.tmsGuideId].value;\n            }\n        }\n    });\n}());\n"],"sourceRoot":"/source/"}