{"version":3,"sources":["ovpApp/directives/grid-list-toggler-service.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,6CAA6C,CACjD,OAEH,QAAQ,0BAA0B;;;;;;IAMvC,SAAS,uBAAuB,IAAI,YAAY,MAAM;QAClD,IAAM,aAAa;QACnB,IAAM,gBAAgB;;QAEtB,IAAI,WAAW;;QAEf,IAAI,UAAU;YACV,UAAA;YACA,UAAA;;QAEJ,OAAO;;;;QAIP,SAAS,IAAI,SAAS;YAClB,IAAI,eAAe;gBACf,KAAK,MAAM;;;;;;;;;;;QAWnB,SAAS,SAAS,eAAgC;YAD9C,IAC6B,KAAE,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,aAAU,UAAA;;YAC5C,IAAG,uBAAsB,gBAAa,OAAK,KAAE;YAC7C,IAAI,CAAC,SAAS,KAAK;gBACf,IAAG,cAAa,KAAE;gBAClB,SAAS,MAAM;oBACX,OAAO;oBACP,QAAQ;oBACR,WAAW;;mBAEZ;gBACH,IAAG,cAAa,KAAE,mCAAiC,SAAS,IAAI;;;YAGpE,IAAI,iBAAiB,CAAC,SAAS,IAAI,OAAO;gBACtC,IAAG,+BAA8B;gBACjC,SAAS,eAAe;;;YAG5B,IAAI,CAAC,SAAS,IAAI,QAAQ;gBACtB,SAAS,IAAI,SAAS,aAAa;;;YAGvC,IAAG,sBAAqB,gBAAa,OAAK,KAAE;YAC5C,OAAO,EAAC,OAAO,SAAS,IAAI,OAAO,QAAQ,SAAS,IAAI;;;QAG5D,SAAS,eAA8B;YACnC,IADkB,KAAE,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,aAAU,UAAA;;YACjC,IAAG,2CAA0C;YAC7C,IAAI,SAAS,GAAG,WAAW,OAAO,UAAU,UAAU;gBAClD,SAAS,IAAI,UAAU,KAAK;;gBAE5B,OAAO,GAAG,WAAW,OAAO,YAAY;oBACpC,IAAG,gCAA+B;oBAClC,SAAS,IAAI,UAAU,OAAO,SAAS,IAAI,UAAU,QAAQ,WAAW;oBACxE,IAAI,SAAS,IAAI,UAAU,WAAW,GAAG;wBACrC,IAAO,KAAE;wBACT,SAAS,IAAI,QAAQ;;;;;YAKjC,OAAO;;;;;;;;QAQX,SAAS,SAAS,UAA2B;YAGzC,IAHwB,KAAE,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,aAAU,UAAA;;YACvC,IAAG,uBAAsB,WAAQ,OAAK,KAAE;YACxC,IAAI,CAAC,SAAS,KAAK;gBACf,IAAG,cAAa,KAAE;gBAClB,SAAS,MAAM;oBACX,OAAO;oBACP,QAAQ;oBACR,WAAW;;;;YAInB,SAAS,IAAI,QAAQ;YACrB,IAAG,eAAc,SAAS,IAAI,UAAU,SAAM;YAC9C,SAAS,IAAI,UAAU,QAAQ,UAAA,GAAC;gBAK5B,OALgC,EAAE,OAAO;;YAC7C,IAAG,sBAAqB,WAAQ,OAAK,KAAE;;;KAG9C","file":"ovpApp/directives/grid-list-toggler-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.directives.gridList.togglerService', [\n            'rx'\n        ])\n        .factory('gridListTogglerService', gridListTogglerService);\n\n    //Intended for use only by ovp-grid-list and grid-list-toggler, to facilitate\n    //   communication between the two. Not intended for use by other components.\n\n    /* @ngInject */\n    function gridListTogglerService(rx, $rootScope, $log) {\n        const DEFAULT_ID = '__default';\n        const DEBUG_LOGGING = false;\n\n        let contexts = {};\n\n        let service = {\n            register,\n            setState\n        };\n        return service;\n\n        ////////////////\n\n        function log(message) {\n            if (DEBUG_LOGGING) {\n                $log.debug(message);\n            }\n        }\n\n        /**\n         * Creates a new grouping of gridlists and gridlist togglers, or joins the existing one.\n         * @param  {string} proposedState state that the group will begin in if it doesn't exist yet\n         * @param  {string} id            (optional) identifier of the group\n         * @return {object}               Object containing the starting state, and an observable that\n         *                                will emit changes to the state of the group.\n         */\n        function register(proposedState, id = DEFAULT_ID) {\n            log(`>> enter register(${proposedState}, ${id})`);\n            if (!contexts[id]) {\n                log(`context \"${id}\" doesn't yet exist. Creating it`);\n                contexts[id] = {\n                    state: null,\n                    source: null,\n                    observers: []\n                };\n            } else {\n                log(`context \"${id}\" already eists, with state = ${contexts[id].state}`);\n            }\n\n            if (proposedState && !contexts[id].state) {\n                log(`accepting proposed state: ${proposedState}`);\n                setState(proposedState, id);\n            }\n\n            if (!contexts[id].source) {\n                contexts[id].source = createSource(id);\n            }\n\n            log(`<< exit register(${proposedState}, ${id})`);\n            return {state: contexts[id].state, source: contexts[id].source};\n        }\n\n        function createSource(id = DEFAULT_ID) {\n            log(`creating a new observable for context ${id}`);\n            let source = rx.Observable.create(function (observer) {\n                contexts[id].observers.push(observer);\n\n                return rx.Disposable.create(function () {\n                    log(`disposing one observer for ${id}`);\n                    contexts[id].observers.splice(contexts[id].observers.indexOf(observer), 1);\n                    if (contexts[id].observers.length === 0) {\n                        log(`${id} has no more observers; clearing state`);\n                        contexts[id].state = null;\n                    }\n                });\n            });\n\n            return source;\n        }\n\n        /**\n         * Toggles a group to a new state, and notifies all listeners\n         * @param {string} newState new state of the group (eg, 'list' or 'grid')\n         * @param {string} id       (optional) identifier of the group\n         */\n        function setState(newState, id = DEFAULT_ID) {\n            log(`>> enter setState(${newState}, ${id})`);\n            if (!contexts[id]) {\n                log(`context \"${id}\" doesn't yet exist. Creating it`);\n                contexts[id] = {\n                    state: null,\n                    source: null,\n                    observers: []\n                };\n            }\n\n            contexts[id].state = newState;\n            log(`notifying ${contexts[id].observers.length} observers`);\n            contexts[id].observers.forEach(o => o.onNext(newState));\n            log(`<< exit setState(${newState}, ${id})`);\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}