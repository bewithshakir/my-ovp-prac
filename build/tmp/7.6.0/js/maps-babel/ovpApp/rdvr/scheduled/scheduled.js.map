{"version":3,"sources":["ovpApp/rdvr/scheduled/scheduled.js"],"names":[],"mappings":"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","file":"ovpApp/rdvr/scheduled/scheduled.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * rdvrScheduled\n     *\n     * Scheduled recordings subpage for Remote DVR\n     *\n     * Example Usage:\n     * <rdvr-scheduled></rdvr-scheduled>\n     */\n    angular.module('ovpApp.rdvr.scheduled', [\n            'ovpApp.components.alert',\n            'ovpApp.messages',\n            'ovpApp.rdvr.scheduledItem',\n            'ovpApp.directives.quiet-loading-tracker',\n            'ovpApp.services.rxUtils',\n            'ovpApp.components.confirm',\n            'ovpApp.services.errorCodes',\n            'ovpApp.dataDelegate',\n            'angularMoment'\n        ])\n        .component('rdvrScheduled', {\n            templateUrl: '/js/ovpApp/rdvr/scheduled/scheduled.html',\n            controller: class RdvrScheduled {\n                /* @ngInject */\n                constructor(stbService, rdvrService, $rootScope, rx, createObservableFunction, $q,\n                    modal, CONFIRM_BUTTON_TYPE, dateUtil, messages, alert, $state, errorCodesService,\n                    delegateFactory, moment) {\n                    angular.extend(this, {stbService, rdvrService, $rootScope, rx, createObservableFunction, $q,\n                        modal, CONFIRM_BUTTON_TYPE, dateUtil, messages, alert, $state, errorCodesService,\n                        delegateFactory, moment});\n                }\n\n                $onInit() {\n                    this.teardown = this.createObservableFunction();\n\n                    this.stbService.currentStbSource\n                        .filter(stb => stb.dvr)\n                        .do(stb => this.stb = stb)\n                        .flatMap(stb => this.getScheduledRecordings(stb))\n                        .takeUntil(this.teardown)\n                        .subscribe(\n                            result => {\n                                this.processRecordings(result);\n\n                                this.updateLoadingIndicators(result);\n\n                                this.handleError(result);\n                            }\n                        );\n                }\n\n                $onDestroy() {\n                    this.teardown();\n                }\n\n                getScheduledRecordings(stb) {\n                    const stbChanged = this.stbService.currentStbSource.skip(1);\n\n                    return this.rdvrService.getScheduledRecordings(stb)\n                        .takeUntil(stbChanged);\n                }\n\n                processRecordings({data}) {\n                    if (data && data.length > 0) {\n                        this.recordings = data\n                        .map(this.delegateFactory.createInstance)\n                        .reduce((rec, obj) => {\n                            let today = this.moment().hours(0).minutes(0).seconds(0).unix();\n                            if (obj && obj.startTime) {\n                                let day = this.moment(parseInt(obj.startTime * 1000));\n                                let date = day.format('MMMM Do');\n                                if (!rec[date]) {\n                                    rec[date] = {\n                                        label: day.format('dddd'),\n                                        date: date,\n                                        startTime: day.hours(0).minutes(0).seconds(0).unix(),\n                                        recordings: []\n                                    };\n                                    if (day.unix() < (today + 86400)) {\n                                        rec[date].label = 'Today';\n                                    } else if (day.unix() < (today + 172800)) {\n                                        rec[date].label = 'Tomorrow';\n                                    }\n                                }\n                                if (obj.cancelScheduledSelection === undefined) {\n                                    obj.cancelScheduledSelection = false;\n                                }\n                                // obj.day = rec[date];\n                                rec[date].recordings.push(obj);\n                            }\n                            return rec;\n                        }, {});\n                        this.recordings = Object.keys(this.recordings)\n                        .map(key => this.recordings[key])\n                        .sort((a,b) => a.startTime - b.startTime);\n                    } else {\n                        this.recordings = [];\n                    }\n                }\n\n                updateLoadingIndicators({data, isComplete, error}) {\n                    if (error) {\n                        if (this.loadingFirstBatch) {\n                            this.loadingFirstBatch.reject();\n                            this.loadingFirstBatch = undefined;\n                        }\n\n                        if (this.loadingRemainingBatches) {\n                            this.loadingRemainingBatches.reject();\n                            this.loadingRemainingBatches = undefined;\n                        }\n                        this.$rootScope.$broadcast('pageChangeComplete', this.$state.current);\n                    } else if (data.length === 0 && !isComplete) {\n                        // Start of fetch; show full loading indicator\n                        if (this.loadingFirstBatch) {\n                            this.loadingFirstBatch.reject();\n                        }\n                        if (this.loadingRemainingBatches) {\n                            this.loadingRemainingBatches.reject();\n                            this.loadingRemainingBatches = undefined;\n                        }\n                        this.loadingFirstBatch = this.$q.defer();\n                        this.$rootScope.$broadcast(\n                            'message:loading',\n                            this.loadingFirstBatch.promise,\n                            undefined,\n                            'DVR Scheduled'\n                        );\n                    } else if (data.length > 0 && !isComplete) {\n                        // Data is partially loaded. Show partial loading indicator\n                        if (this.loadingFirstBatch) {\n                            this.loadingFirstBatch.resolve();\n                            this.loadingFirstBatch = undefined;\n                        }\n\n                        if (!this.loadingRemainingBatches) {\n                            this.loadingRemainingBatches = this.$q.defer();\n                        }\n                    } else {\n                        // Data is fully loaded.\n                        if (this.loadingFirstBatch) {\n                            this.loadingFirstBatch.resolve();\n                            this.loadingFirstBatch = undefined;\n                        }\n\n                        if (this.loadingRemainingBatches) {\n                            this.loadingRemainingBatches.resolve();\n                            this.loadingRemainingBatches = undefined;\n                        }\n                        this.$rootScope.$broadcast('pageChangeComplete', this.$state.current);\n                    }\n                }\n\n                handleError({data, error}) {\n                    this.error = error;\n                    if (this.error) {\n                        if (!data || data.length === 0) {\n                            // Failed to get first chunk\n                            this.alert.open({\n                                message: this.errorCodesService.getMessageForCode('WCM-9000'),\n                                title: this.errorCodesService.getHeaderForCode('WCM-1009'),\n                                buttonText: 'OK'\n                            });\n                        }\n                        // else, partial failure\n                    }\n                }\n\n                dayLabel(recording) {\n                    if (recording && recording.startTime) {\n                        return this.stbService.getDayLabel(new Date(recording.startTime * 1000));\n                    }\n                }\n\n                dayDisplay(recording) {\n                    if (recording && recording.startTime) {\n                        return this.stbService.formatUnix(recording.startTime, 'mmmm dx');\n                    }\n                }\n\n                onCheckboxStateChanged(recording, state) {\n                    recording.cancelScheduledSelection = state;\n                }\n\n                unselectAll() {\n                    this.recordings.forEach(r => r.cancelScheduledSelection = false);\n                }\n\n                cancelRecordings() {\n                    let recordingsArray = [];\n                    this.recordings.filter((day) => {\n                        day.recordings.filter(recording => {\n                            if (recording.cancelScheduledSelection === true) {\n                                recordingsArray.push(recording);\n                            }\n                        });\n                    });\n                    const count = recordingsArray.length;\n                    const plural = (count > 1 ? 's' : '');\n                    const message = `Are you sure you want to cancel ${count} recording${plural}?`;\n\n                    const options = {\n                        okLabel: this.CONFIRM_BUTTON_TYPE.YES,\n                        cancelLabel: this.CONFIRM_BUTTON_TYPE.NO,\n                        preOkMessage: message,\n                        inProgressMessage: `Cancelling ${count} recording${plural}`,\n                        okAction: () => {\n                            let promises = recordingsArray.forEach(r => \n                                this.rdvrService.cancelScheduled(this.stb, r, true));\n\n                            return this.$q.all(promises)\n                                .then(\n                                    () => {},\n                                    () => {\n                                        this.alert.open(this.errorCodesService.getAlertForCode('WCM-2405'));\n                                    }\n                                );\n                        }\n                    };\n\n                    this.modal.open({\n                        component: 'confirm',\n                        resolve: {\n                            options\n                        }\n                    });\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}