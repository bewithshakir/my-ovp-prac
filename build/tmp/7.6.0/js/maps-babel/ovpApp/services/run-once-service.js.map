{"version":3,"sources":["ovpApp/services/run-once-service.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;IAEA,QAAQ,OAAO,kCAAkC,IAChD,QAAQ,WAAW;;;IAGpB,SAAS,QAAQ,SAAS;QACtB,IAAI,kBAAkB;;QAEtB,IAAI,UAAU;;;;;;;;;YASV,UAAU,SAAA,SAAU,MAAM,MAAM;gBAC5B,OAAO,gBAAgB,MAAM;;YAEjC,QAAQ;;;QAGZ,OAAO;;;;QAIP,SAAS,iBAAiB,MAAM;YAC5B,IAAI,UAAU,KAAK;;YAEnB,OAAO,gBAAgB,KAAK,UAAU,MAAM;gBACxC,OAAO,SAAS;;;;QAIxB,SAAS,gBAAgB,MAAM,MAAM;YACjC,IAAI,iBAAiB;;YAErB,IAAI,CAAC,iBAAiB,OAAO;;gBAEzB,gBAAgB,KAAK,KAAK;mBACvB;;gBAEH,iBAAiB,YAAY;;;YAGjC,OAAO,eAAe,MAAM,SAAS;;;KAG5C","file":"ovpApp/services/run-once-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.runOnceService', [])\n    .factory('runOnce', runOnce);\n\n    /* @ngInject */\n    function runOnce($window) {\n        let calledFunctions = [];\n\n        let service = {\n            /**\n             * Delegate function calling to the functionManager\n             * If the function has never been called, it is cached and called\n             * If the function is in the cache a noOp is called instead\n             * @param func {function} The function to run once\n             * @param [args] {array}\n             * @returns {*} The return of the original function or undefined if noOp\n             */\n            delegate: function (func, args) {\n                return functionManager(func, args);\n            },\n            cached: functionIsCached\n        };\n\n        return service;\n\n        //////////////////\n\n        function functionIsCached(func) {\n            let funcStr = func.toString();\n\n            return calledFunctions.some(function (item) {\n                return item === funcStr;\n            });\n        }\n\n        function functionManager(func, args) {\n            let functionToCall = func;\n\n            if (!functionIsCached(func)) {\n                // function has never been called, so cache it\n                calledFunctions.push(func.toString());\n            } else {\n                // previously called, assign noOp\n                functionToCall = function () {};\n            }\n\n            return functionToCall.apply($window, args);\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}