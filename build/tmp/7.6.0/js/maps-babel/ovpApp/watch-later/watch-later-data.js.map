{"version":3,"sources":["ovpApp/watch-later/watch-later-data.js"],"names":[],"mappings":"AAAA;;AAEA,SAAS,mBAAmB,KAAK,EAAE,IAAI,MAAM,QAAQ,MAAM,EAAE,KAAK,IAAI,IAAI,GAAG,OAAO,MAAM,IAAI,SAAS,IAAI,IAAI,QAAQ,KAAK,KAAK,KAAK,IAAI,IAAI,OAAO,aAAa,EAAE,OAAO,MAAM,KAAK;;AAFtL,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,0BAA0B,CAC9B,uBACA,4BACA,4BACH,QAAQ,kBAAkB;;;IAG/B,SAAS,eAAe,YAAY,iBAAiB,iBACjD,YAAY,cAAc,QAAQ,IAAI,QAAQ;QAC9C,IAAI,kBAAe;;QAEnB,IAAI,UAAU;YACV,eAAA;;YAEA,UAAU;;gBAEN,OAAA;gBACA,UAAA;gBACA,SAAA;;;;QAIR;;QAEA,OAAO;;;;QAIP,SAAS,WAAW;YAChB,WAAW,IAAI,kBAAkB,MAAM;YACvC,WAAW,IAAI,qBAAqB,SAAS;YAC7C,WAAW,IAAI,oBAAoB,QAAQ;YAC3C,WAAW,IAAI,kBAAkB,MAAM,cAAc;YACrD,WAAW,IAAI,qBAAqB,SAAS;YAC7C,WAAW,IAAI,oBAAoB,QAAQ;;;QAG/C,SAAS,MAAM,iBAAqC;YADhD,IAC4B,aAAU,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,QAAK,UAAA;;YAC9C,OAAO,UAAU,OAAO,OAAO;gBAC3B,IAAI,MAAM,YAAY;gBACtB,IAAI,KAAK;oBACL,IAAI,YAAY;wBACZ,OAAO,WAAW,eAAe,OAC5B,KAAK,UAAA,GAAC;4BAAP,OAAW,MAAM,GAAG,IAAI;;2BACzB;wBACH,MAAM,OAAO,IAAI;;;;;;QAMjC,SAAS,SAAS,iBAAiB;YAC/B,OAAO,UAAU,OAAO,OAAO;gBAC3B,IAAI,MAAM,YAAY;gBACtB,IAAI,KAAK;oBACL,SAAS,OAAO,IAAI;;;;;QAKhC,SAAS,QAAQ,iBAAiB;YAC9B,OAAO,YAAY;gBACf,IAAI,MAAM,YAAY;gBACtB,IAAI,KAAK;oBACL,qBAAqB,IAAI,OAAO;;;;;QAK5C,SAAS,YAAY,SAAS;YAC1B,OAAO,mBAAmB,gBAAgB,KAAK,UAAA,GAAC;gBAE5C,OAFgD,EAAE,YAAY;;;;QAGtE,SAAS,MAAM,OAAO,UAAU;YAC5B,SAAS,OAAO;YAChB,SAAS,QAAQ;;;QAGrB,SAAS,SAAS,OAAO,UAAU;YAC/B,IAAI,QAAQ,SAAS,UAAU,UAAA,KAAO;gBAClC,IAAI,IAAI,eAAe;oBACnB,OAAO,QAAQ,OAAO,IAAI,eAAe,MAAM;uBAC5C;oBACH,OAAO,IAAI,eAAe,MAAM;;;;YAIxC,IAAI,SAAS,GAAG;gBACZ,SAAS,OAAO,OAAO;;;;QAI/B,SAAS,qBAAqB,UAAU,aAAa;YACjD,SAAS,OAAM,MAAf,UAAQ,CAAQ,GAAG,SAAS,QAAM,OAAA,mBAAK;;;QAG3C,SAAS,gBAAgB;YACrB,OAAO,aAAa,oBACf,KAAK,UAAA,UAAQ;gBAGd,OAFI,OAAO,IAAI,OAAO,SAAS,SAAS,cAAc,EAAC,iBAAiB,QAC/D,MAAM,GACN,IAAI,UAAA,UAAQ;oBACjB,OADqB,SAAS,KAAK,QAAQ,IAAI,gBAAgB;mBAAgB,MACvE,UAAA,YAAU;oBAElB,OAFsB,kBAAkB;mBACnC,UAAU;;;;KAI9B","file":"ovpApp/watch-later/watch-later-data.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.watchlater.data', [\n            'ovpApp.dataDelegate',\n            'ovpApp.services.bookmark',\n            'ovpApp.services.rxUtils'])\n        .factory('watchLaterData', watchLaterData);\n\n    /* @ngInject */\n    function watchLaterData(NNSService, BookmarkService, delegateFactory,\n        $rootScope, entryService, rxhttp, $q, config) {\n        let savedCategories;\n\n        let service = {\n            getCategories,\n\n            _private: {\n                //exposed for unit testing\n                onAdd,\n                onDelete,\n                onClear\n            }\n        };\n\n        activate();\n\n        return service;\n\n        ////////////////\n\n        function activate() {\n            $rootScope.$on('watchlater:add', onAdd('saved'));\n            $rootScope.$on('watchlater:delete', onDelete('saved'));\n            $rootScope.$on('watchlater:clear', onClear('saved'));\n            $rootScope.$on('inprogress:add', onAdd('inProgress', true));\n            $rootScope.$on('inprogress:delete', onDelete('inProgress'));\n            $rootScope.$on('inprogress:clear', onClear('inProgress'));\n        }\n\n        function onAdd(categoryContext, needsFetch = false) {\n            return function (event, asset) {\n                let cat = getCategory(categoryContext);\n                if (cat) {\n                    if (needsFetch) {\n                        return NNSService.fetchAssetData(asset)\n                            .then(a => doAdd(a, cat.media));\n                    } else {\n                        doAdd(asset, cat.media);\n                    }\n                }\n            };\n        }\n\n        function onDelete(categoryContext) {\n            return function (event, asset) {\n                let cat = getCategory(categoryContext);\n                if (cat) {\n                    doDelete(asset, cat.media);\n                }\n            };\n        }\n\n        function onClear(categoryContext) {\n            return function () {\n                let cat = getCategory(categoryContext);\n                if (cat) {\n                    replaceArrayContents(cat.media, []);\n                }\n            };\n        }\n\n        function getCategory(context) {\n            return savedCategories && savedCategories.find(c => c.context === context);\n        }\n\n        function doAdd(asset, arrayRef) {\n            doDelete(asset, arrayRef); // in case it's already there, we want to move it to the front\n            arrayRef.unshift(asset);\n        }\n\n        function doDelete(asset, arrayRef) {\n            let index = arrayRef.findIndex(ast => {\n                if (ast.tmsProgramIds) {\n                    return angular.equals(ast.tmsProgramIds, asset.tmsProgramIds);\n                } else {\n                    return ast.tmsSeriesId == asset.tmsSeriesId;\n                }\n            });\n\n            if (index >= 0) {\n                arrayRef.splice(index, 1);\n            }\n        }\n\n        function replaceArrayContents(arrayRef, newContents) {\n            arrayRef.splice(0, arrayRef.length, ...newContents);\n        }\n\n        function getCategories() {\n            return entryService.forDefaultProfile()\n                .then(services =>\n                    rxhttp.get(config.piHost + services.watchLater(), {withCredentials: true})\n                        .retry(3)\n                        .map(response => response.data.results.map(delegateFactory.createInstance))\n                        .do(categories => savedCategories = categories)\n                        .toPromise($q)\n                );\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}