{"version":3,"sources":["ovpApp/parental-controls-dialog/parental-controls-dialog.js"],"names":[],"mappings":"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","file":"ovpApp/parental-controls-dialog/parental-controls-dialog.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.parentalControlsDialog', [\n        'ovpApp.services.parentalControlsService',\n        'ovpApp.components.authForm',\n        'ovpApp.components.modal',\n        'ovpApp.components.pinEntry',\n        'ovpApp.components.pinEntry.message',\n        'ovpApp.services.stbPCPin',\n        'ovpApp.services.errorCodes',\n        'ovpApp.messages'])\n    .constant('parentalControlsContext', {\n        PLAYBACK: 'playback',\n        WEB_SETTINGS: 'websettings',\n        STB_SETTINGS: 'stbsettings'\n    })\n    .factory('parentalControlsDialog', ParentalControlsDialog);\n\n    /* @ngInject */\n    function ParentalControlsDialog(parentalControlsService, modal, PIN_ENTRY_TYPE,\n        messages, $rootScope, $q, $log, TV_RATINGS, PC_BLOCK_REASON, PC_UNBLOCK_REASON,\n        StbPCPinFactory, StbSettingsService, parentalControlsContext, errorCodesService) {\n\n        let config = initConfig();\n\n        return {\n            withContext: function (context, stb) {\n                let conf;\n                if (angular.isFunction(config[context])) {\n                    conf = config[context](stb);\n                } else {\n                    conf = config[context];\n                }\n\n                return {\n                    unlock: function () {\n                        return unlockParentalControls(conf);\n                    },\n                    changePIN: function () {\n                        return changePIN(conf);\n                    }\n                };\n            }\n        };\n\n        //////////\n\n        function initConfig() {\n            return {\n                [parentalControlsContext.PLAYBACK]: {\n                    pinService: parentalControlsService,\n                    disablePC: function () {\n                        parentalControlsService.disableParentalControlsForClient();\n                    },\n                    [PIN_ENTRY_TYPE.TOGGLE]: {\n                        pinInstructions: errorCodesService.getMessageForCode('WPC-1000'),\n                        pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n                        pinService: parentalControlsService\n                    },\n                    [PIN_ENTRY_TYPE.SAVE]: {\n                        headerMessage: messages.getMessageForCode('MSG-9048'),\n                        secondaryMessage: messages.getMessageForCode('MSG-9050'),\n                        pinInstructions: 'Please enter new PIN',\n                        pinService: parentalControlsService\n                    }\n                },\n                [parentalControlsContext.WEB_SETTINGS]: {\n                    pinService: parentalControlsService,\n                    disablePC: function () {\n                        parentalControlsService.disableParentalControlsForClient();\n                    },\n                    [PIN_ENTRY_TYPE.TOGGLE]: {\n                        pinInstructions: messages.getMessageForCode('MSG-9045'),\n                        pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n                        pinService: parentalControlsService\n                    },\n                    [PIN_ENTRY_TYPE.SAVE]: {\n                        headerMessage: messages.getMessageForCode('MSG-9048'),\n                        secondaryMessage: messages.getMessageForCode('MSG-9050'),\n                        pinInstructions: messages.getMessageForCode('MSG-9057'),\n                        pinService: parentalControlsService\n                    }\n                },\n                [parentalControlsContext.STB_SETTINGS]: function (stb) {\n                    const pinService = StbPCPinFactory.create(stb);\n                    const checkPrimaryAccount = pinService.isPrimaryAccount();\n                    return {\n                        pinService,\n                        checkPrimaryAccount,\n                        disablePC: function () {\n                            StbSettingsService.togglePCBlocking(stb, false);\n                        },\n                        [PIN_ENTRY_TYPE.TOGGLE]: {\n                            pinInstructions: messages.getMessageForCode('MSG-9046'),\n                            pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n                            pinService\n                        },\n                        [PIN_ENTRY_TYPE.SAVE]: {\n                            headerMessage: messages.getMessageForCode('MSG-9047'),\n                            pinInstructions: messages.getMessageForCode('MSG-9057'),\n                            pinService\n                        }\n                    };\n                }\n            };\n        }\n\n        function authenticateMasterPassword() {\n            return modal.open({\n                windowClass: 'productPopup-temp',\n                component: 'authForm'\n            }).result;\n        }\n\n        function showMasterPasswordMessage() {\n            const options = {\n                headerMessage: errorCodesService.getHeaderForCode('TMP-9060'),\n                secondaryMessage: errorCodesService.getMessageForCode('TMP-9060')\n            };\n            return modal.open({\n                component: 'pinEntryMessage',\n                resolve: {options}\n            }).result;\n        }\n\n        function unlockParentalControls(config) {\n            return config.pinService.isPINSet()\n                .then(pinIsSet => {\n                    if (pinIsSet) {\n                        return validatePin(config);\n                    } else {\n                        return config.pinService.isPrimaryAccount()\n                            .then(isPrimaryAccount => {\n                                if (isPrimaryAccount) {\n                                    return undefined;\n                                } else {\n                                    return authenticateMasterPassword();\n                                }\n                            })\n                            .then(password => resetPin(config, password));\n                    }\n                });\n        }\n\n        function validatePin(config) {\n            const options = config[PIN_ENTRY_TYPE.TOGGLE];\n\n            // Analytics\n            $rootScope.$emit('Analytics:showPinDialog', {\n                context: 'parentalControlFlow'\n            });\n\n            return modal.open({\n                component: 'pinValidate',\n                resolve: {options}\n            }).result.then(\n                result => {\n                    if (result === 'pinValidated') {\n                        config.disablePC();\n                    }\n                },\n                dismissReason => {\n                    if (dismissReason === 'forgotPIN') {\n                        let checkPrimaryAccount = angular.isDefined(config.checkPrimaryAccount) ?\n                            config.checkPrimaryAccount : true;\n                        return $q.when(checkPrimaryAccount).then(enabled => {\n                            if (enabled) {\n                                return authenticateMasterPassword()\n                                    .then(password => resetPin(config, password));\n                            } else {\n                                return showMasterPasswordMessage();\n                            }\n                        });\n                    } else {\n                        return $q.reject(dismissReason);\n                    }\n                }\n            );\n        }\n\n        function changePIN(config) {\n            //TODO: have a configuration option for whether changing the password is restricted to the master account\n            return authenticateMasterPassword(config)\n                .then(password => resetPin(config, password));\n        }\n\n        function resetPin(config, password) {\n            const options = angular.extend({}, config[PIN_ENTRY_TYPE.SAVE], {password});\n\n            return modal.open({\n                component: 'pinReset',\n                resolve: {options}\n            }).result.then(\n                result => {\n                    if (result === 'pinReset') {\n                        config.disablePC();\n                    }\n                }\n            );\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}