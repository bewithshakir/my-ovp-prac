{"version":3,"sources":["ovpApp/components/header/header-toggler.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,oCAAoC,CACxC,MACA,cAEH,QAAQ,iBAAiB;;;IAG9B,SAAS,cAAc,cAAc,IAAI;QACrC,IAAM,SAAS,GAAG,WACb,OAAO,UAAU,UAAU;YACxB,IAAM,UAAU,aAAa,UAAU,IAAI,UAAU,YAAY;gBAC7D,SAAS,OAAO;;;YAGpB,OAAO;WAEV,IAAI,eACJ,uBACA,YAAY;;QAEjB,IAAM,UAAU;YACZ,QAAQ;;;QAGZ,OAAO;;;;QAIP,SAAS,cAAc,YAAY;YAC/B,OAAO,WAAW,KAAK,KAAK,WAAW;;;KAG9C","file":"ovpApp/components/header/header-toggler.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.components.header.toggler', [\n            'rx',\n            'ui.router'\n        ])\n        .factory('headerToggler', headerToggler);\n\n    /* @ngInject */\n    function headerToggler($transitions, rx) {\n        const source = rx.Observable\n            .create(function (observer) {\n                const dispose = $transitions.onSuccess({}, function (transition) {\n                    observer.onNext(transition);\n                });\n\n                return dispose;\n            })\n            .map(isSearchState)\n            .distinctUntilChanged()\n            .shareReplay(1);\n\n        const service = {\n            source: source // Emits booleans indicating whether the header is in search mode\n        };\n\n        return service;\n\n        ////////////////\n\n        function isSearchState(transition) {\n            return transition.to().name.startsWith('search');\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}