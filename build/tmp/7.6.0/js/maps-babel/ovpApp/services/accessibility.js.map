{"version":3,"sources":["ovpApp/services/accessibility.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;;IAEA,QACK,OAAO,iCAAiC,CAAC,+BACzC,QAAQ,wBAAwB,sBAChC,IAAI;;;IAGT,SAAS,qBAAqB,YAAY,aAAa,IAAI,SAAS;QAChE,OAAO;YACH,WAAW,SAAA,YAAM;gBACb,IAAI,oBAAoB,WAAW,QAAQ,YAAY;;;gBAGvD,OAAO,GAAG,QAAQ,sBAAsB;;YAE5C,QAAQ,SAAA,SAAM;gBACV,WAAW,QAAQ,YAAY,sBAAsB;;;;;gBAKrD,QAAQ,SAAS;gBACjB,OAAO,GAAG;;YAEd,SAAS,SAAA,UAAM;gBACX,WAAW,QAAQ,YAAY,sBAAsB;gBACrD,QAAQ,SAAS;gBACjB,OAAO,GAAG;;;;;IAKtB,SAAS,KAAK,YAAY,WAAW;;QAEjC,IAAI,iBAAiB;YACjB,mBAAmB,SAAnB,iBAAoB,OAAU;;;YAG1B,OAAQ,MAAM,SAAS,gBACtB,CAAC,kBAAkB,MAAM,YAAY,eAAe,WACrD,MAAM,YAAY,eAAe;;YAErC,oBAAoB,SAApB,kBAAqB,OAAU;;;;;;YAM3B,IAAI,CAAC,WAAW,eAAe,iBAAiB,UAAU,MAAM,UAAU,IAAI;gBAC1E,WAAW,YAAY,YAAM;oBACzB,WAAW,aAAa;;;;YAIhC,iBAAiB;;YAErB,kBAAkB,SAAlB,gBAAmB,OAAU;YACzB,IAAM,UAAU,MAAM,SAAS,MAAM;;;YAGrC,IAAI,YAAY,KAAK,MAAM,OAAO,aAAa,WACvC,WAAW,eAAe,sBAAsB;gBACpD;;YAEJ,IAAI,WAAW,YAAY;;gBACvB,WAAW,YAAY,YAAM;oBACzB,WAAW,aAAa;;;;;QAKxC,UAAU,GAAG,KAAK,iBAAiB,aAAa,UAAC,OAAU;YACvD,kBAAkB;WACnB;QACH,UAAU,GAAG,KAAK,iBAAiB,aAAa,UAAC,OAAU;YACvD,kBAAkB;WACnB;QACH,UAAU,GAAG,KAAK,iBAAiB,WAAW,UAAC,OAAU;YACrD,gBAAgB;WACjB;;KAEN","file":"ovpApp/services/accessibility.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.services.accessibility', ['ovpApp.services.ovpStorage'])\n        .factory('AccessibilityService', AccessibilityService)\n        .run(init);\n\n    /* @ngInject */\n    function AccessibilityService(ovpStorage, storageKeys, $q, $window) {\n        return {\n            isEnabled: () => {\n                let explicitlyEnabled = ovpStorage.getItem(storageKeys.accessibilityEnabled);\n\n                // Return true if not set at all or is explicitly enabled.\n                return $q.resolve(explicitlyEnabled !== false);\n            },\n            enable: () => {\n                ovpStorage.setItem(storageKeys.accessibilityEnabled, true);\n                // TODO: Analytics Event\n                // $rootScope.$emit('EG:accessibilityToggled', {\n                //     enabled: true\n                // });\n                $window.location.reload();\n                return $q.resolve();\n            },\n            disable: () => {\n                ovpStorage.setItem(storageKeys.accessibilityEnabled, false);\n                $window.location.reload();\n                return $q.resolve();\n            }\n        };\n    }\n\n    function init($rootScope, $document) {\n        // Private function to remove focus outline on mousedown and mousemove event\n        let lastMouseEvent = null,\n            isMouseMoveEvent = (event) => {\n                // STVWEB-1407: mousemove event is triggered onscroll even when mouse was not moved\n                // To avoid this mouse event check whether mouse really moved or not\n                return (event.type === 'mousemove' &&\n                (!lastMouseEvent || event.screenX !== lastMouseEvent.screenX ||\n                event.screenY !== lastMouseEvent.screenY));\n            },\n            mouseEventHandler = (event) => {\n                // NVDA + window combination\n                // Application will raise mouse event even when\n                // user presses enter or spacebar key on any link or button\n                // To check this case we need to check event.buttons\n                // API reference: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n                if (!$rootScope.focusClass && (isMouseMoveEvent(event) || event.buttons > 0)) {\n                    $rootScope.$applyAsync(() => {\n                        $rootScope.focusClass = 'focus-outline-none';\n                    });\n                }\n                // Store last event to check for mouse move\n                lastMouseEvent = event;\n            },\n            keyEventHandler = (event) => {\n                const keyCode = event.which || event.keyCode;\n\n                // ignore keyEvents on input other than the tab key.\n                if (keyCode !== 9 && event.target.nodeName === 'INPUT' &&\n                        $rootScope.focusClass === 'focus-outline-none') {\n                    return;\n                }\n                if ($rootScope.focusClass) { // has 'focus-outline-none' class\n                    $rootScope.$applyAsync(() => {\n                        $rootScope.focusClass = '';\n                    });\n                }\n            };\n        // Used addEventListener to process events during the capturing phase\n        $document[0].body.addEventListener('mousedown', (event) => {\n            mouseEventHandler(event);\n        }, true);\n        $document[0].body.addEventListener('mousemove', (event) => {\n            mouseEventHandler(event);\n        }, true);\n        $document[0].body.addEventListener('keydown', (event) => {\n            keyEventHandler(event);\n        }, true);\n    }\n})();\n"],"sourceRoot":"/source/"}