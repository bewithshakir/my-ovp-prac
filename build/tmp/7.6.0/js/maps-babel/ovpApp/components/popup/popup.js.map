{"version":3,"sources":["ovpApp/components/popup/popup.js"],"names":[],"mappings":"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","file":"ovpApp/components/popup/popup.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.components.popup', ['ui.bootstrap', 'ui.router'])\n        .factory('popUpService', popUpService)\n        .controller('PopupController', PopupController)\n        .run(run);\n\n    /* @ngInject */\n    function run($transitions, popUpService) {\n        // Hide the popup while navigating away from a page(e.g; backbutton navigation)\n        $transitions.onSuccess({}, function () {\n            popUpService.hide({all: true});\n        });\n    }\n\n    /**\n     * Service to show/hide uibModal popup.\n     *\n     * DEPRECATED -- Use modal.js instead. Once popup.js is no longer being used, it should be\n     * deleted.\n     *\n     * @param {$uibModal} - bootstrap uibModal service\n     *        {$document} - angualr document service\n     *        {$templateRequest} - angular template request service\n     *        {$compile} -  angular's template compile service\n     *\n     * @return {Object} - service Object that contains show and hide methods\n     */\n    /* @ngInject */\n    function popUpService($uibModal, $templateRequest, $compile, $log,\n                          $document, $rootScope, $timeout, $q) {\n        let service, alertModalInstance, alertModalOptionsArray = [], modalInstance, modalInstanceArray = [],\n            previousActiveElementList = [];\n\n        service = {\n            show: show,\n            addClass: addClass,\n            removeClass: removeClass,\n            hide: hide,\n            close: hide\n        };\n\n        return service;\n\n        /////////////\n\n        function addClass(className) {\n            $document.find('.window-splash').addClass(className);\n        }\n\n        function removeClass(className) {\n            $document.find('.window-splash').removeClass(className);\n        }\n\n        // Open uibModal Instance\n        function show(attrs, passedScope) {\n            $log.warn('popup.js is deprecated. Migrate this dialog over to modal.js');\n            // Ui Modal Popup must be provided a parent scope\n            // that contains template to be appended to the content div\n            let scope = passedScope || $rootScope.$new();\n\n            angular.extend(scope, attrs);\n\n            // Wait until we fetch the base template and container\n            // to which the popup needs to append.\n            $q.all([scope.parentContainer(), $templateRequest('/js/ovpApp/components/popup/popup.html')])\n                .then((result) => {\n                    let [parentContainer, template] = result;\n\n                    let modalOptions = {\n                        scope: scope, // scope containing the attributes passed for configuring the popup\n                        windowClass: '',\n                        appendTo: parentContainer || angular.element('body'),\n                        openedClass: 'popup-open', //This is to differentiate it from 'modal-open' used by modals\n                        windowTemplateUrl: '/js/ovpApp/components/popup/window-frame.html',\n                        backdrop: false, // do not show backdrop\n                        keyboard: false, // set to false, since we have defined custom handler for key events\n                        controller: 'PopupController as vm'\n                    };\n\n                    let element = $compile(template)(scope);\n                    element.find('.content').append(scope.template);\n                    modalOptions.template = element[0];\n                    modalOptions.windowClass += (' ' + scope.className);\n                    // Initially popups must be kept hidden and\n                    // Dom elements have been positioned centrally, to avoid visual flickers\n                    modalOptions.scope.isVisible = 'hidden';\n                    modalOptions.scope.popupCss = 'defaultPosition';\n\n                    previousActiveElementList.push($document[0].activeElement);\n\n                    if (scope.config && scope.config.type === 'ALERT') {\n                        if (alertModalOptionsArray.length === 0) {\n                            alertModalInstance = $uibModal.open(modalOptions);\n                            alertModalInstance.scope = scope;\n                        }\n                        alertModalOptionsArray.push(modalOptions);\n                    } else if (!scope.config || !scope.config.type) {\n                        modalInstance = $uibModal.open(modalOptions);\n                        modalInstance.scope = scope;\n                        modalInstanceArray.push(modalInstance);\n                    }\n\n                    $timeout(function () {\n                        setUpBackgroundFramePosition();\n                        modalOptions.scope.popupCss = 'default';\n                        modalOptions.scope.isVisible = 'visible';\n                    });\n                });\n\n            // key evt handler.\n            $document.on('keyup', handleEvent);\n            $document.on('click', handleEvent);\n\n            return service;\n        }\n\n        // centrally position the background-frame for all popups.\n        function setUpBackgroundFramePosition() {\n            $document.find('.background-frame').css({\n                left: Math.abs(($document.find('body').outerWidth() -\n                    $document.find('#alertBox').outerWidth()) / 2),\n                top: Math.abs(($document.find('body').outerHeight() -\n                    $document.find('#alertBox').outerHeight()) / 2)\n            });\n        }\n\n        // Perform evt validations before closing popup.\n        function handleEvent(evt) {\n            if (modalInstanceArray.length === 0 && !alertModalInstance) {\n                return;\n            }\n\n            let lastArrayIndex = modalInstanceArray.length - 1,\n                validTarget = evt.target && angular.isFunction(evt.target.className.search);\n\n            // Do not register click for HTML elements that do not have classNames as String.\n            // E.g; svg icons.\n            if (!validTarget) {\n                return;\n            }\n\n            // Return if the none of the below mentioned events occurred:\n            // 1) user has clicked on ok button on an alertModal.\n            // 2) user has clicked outside the alertModal/popUpModal.\n            // 3) user has clicked outside a popUp and overlayClick\n            //    for popUp is set as true[ovp-click-confirm sets overlayClick as false]\n            // 4) user has pressed the ESC key\n            if ((validTarget &&\n                evt.keyCode !== 27 &&\n                evt.target.className.search('popUp popupHolder') < 0) ||\n                (modalInstanceArray.length > 0 && modalInstanceArray[lastArrayIndex].scope &&\n                !modalInstanceArray[lastArrayIndex].scope.overlayClickClosesPopup)) {\n                return;\n            }\n\n            hide();\n        }\n\n        // Close the Modal Popup.\n        function hide(options) {\n            if (alertModalInstance) {\n                alertModalInstance.close();\n\n                if (alertModalInstance.scope && alertModalInstance.scope.deferred) {\n                    if (options && options.all) {\n                        alertModalInstance.scope.deferred.reject();\n                        alertModalOptionsArray = [];\n                    } else {\n                        alertModalInstance.scope.deferred.resolve();\n                    }\n                }\n\n                let oldConfig = alertModalInstance.scope && alertModalInstance.scope.config;\n                alertModalInstance = null;\n                alertModalOptionsArray.splice(0, 1);\n\n                if (alertModalOptionsArray.length > 0 &&\n                    !angular.equals(oldConfig, alertModalOptionsArray[0].scope.config)) {\n                    alertModalOptionsArray[0].scope.isVisible = 'hidden';\n                    // we need to add this timeout so we always have\n                    // the correct alertModalInstance reference.\n                    $timeout(function () {\n                        alertModalInstance = $uibModal.open(alertModalOptionsArray[0]);\n                        alertModalInstance.scope = alertModalOptionsArray[0].scope;\n                        // we need to wait for the popup to openup\n                        // before modifying the positions/css\n                        $timeout(function () {\n                            setUpBackgroundFramePosition();\n                            alertModalOptionsArray[0].scope.isVisible = 'visible';\n                        });\n                    }, 0);\n                }\n            } else {\n                //close only the topMost modalInstance.\n                let currentModalInstance = modalInstanceArray[modalInstanceArray.length - 1];\n                if (currentModalInstance) {\n                    currentModalInstance.close();\n                    if (currentModalInstance.scope && currentModalInstance.scope.deferred) {\n                        currentModalInstance.scope.deferred.resolve();\n                    }\n                    modalInstanceArray.pop();\n                }\n            }\n            if (previousActiveElementList.length > 0) {\n                angular.element(previousActiveElementList[previousActiveElementList.length - 1]).focus();\n                previousActiveElementList.pop();\n            }\n            cleanup();\n        }\n\n        // Cleanup Modal Instance and other cleanup operations\n        function cleanup() {\n            if (!alertModalInstance && modalInstanceArray.length === 0) {\n                $document.off('keyup', handleEvent);\n                $document.off('click', handleEvent);\n            }\n        }\n    }\n\n    /* @ngInject */\n    function PopupController(popUpService) {\n        let vm = this;\n\n        vm.hide = function () {\n            popUpService.hide();\n        };\n\n        return vm;\n    }\n\n}());\n"],"sourceRoot":"/source/"}