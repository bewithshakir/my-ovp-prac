{"version":3,"sources":["ovpApp/data-delegates/stream.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,uBACd,QAAQ,6BAA6B,2BACrC,SAAS,cAAc;QAChB,WAAW;QACX,aAAa;QACb,WAAW;;;;IAInB,SAAS,0BAA0B,cAAc,eAAe,YAAY;QACxE,IAAI,SAAS,cAAc;;QAE3B,OAAO,IAAI,aAAa;YACpB,WAAW,OAAO,YAAY;gBAC1B,IAAI,KAAK,eAAe;oBACpB,OAAO,KAAK,cAAc;;;YAGlC,gBAAgB,OAAO,YAAY;gBAC/B,OAAO,KAAK,cAAc,WAAW,eAAe,KAAK,cAAc,WAAW;;YAEtF,kBAAkB,SAAA,mBAAY;gBAC1B,OAAQ,KAAK,SAAS;;YAE1B,gBAAgB,SAAA,iBAAY;gBACxB,OAAO,KAAK,SAAS;;YAEzB,SAAS,SAAA,UAAY;gBACjB,IAAI,MAAM,KAAK;gBACf,OAAO,KAAK,iBAAiB,aAAa,OACtC,KAAK,iBAAiB,UAAU;;YAExC,UAAU,OAAO,YAAY;gBACzB,IAAI,KAAK,kBAAkB;oBACvB,OAAO,KAAK,iBAAiB;uBAC1B,IAAI,KAAK,gBAAgB;oBAC5B,OAAO,KAAK,cAAc,cACtB,KAAK,cAAc;;;YAG/B,YAAY,OAAO,YAAY;gBAC3B,IAAI,KAAK,gBAAgB;;;oBAGrB,OAAO;uBACJ,IAAI,KAAK,iBAAiB,iBAAiB;oBAC9C,OAAO;uBACJ;oBACH,OAAO,KAAK,iBAAiB;;;YAGrC,kBAAkB,OAAO,YAAY;gBACjC,IAAI,gBAAgB,KAAK,oBAAoB,KAAK,iBAAiB;gBACnE,OAAO,CAAC,CAAC,iBAAiB,cAAc,cAAc,WAAW;;YAErE,cAAc,SAAA,eAAY;gBACtB,OAAO,KAAK,oBAAoB,KAAK,iBAAiB,QAAQ;;YAElE,UAAU;YACV,eAAe;YACf,kBAAkB;YAClB,OAAO;YACP,eAAe;YACf,MAAM;YACN,SAAS;;YAET,aAAa,OAAO,YAAY;gBAC5B,OAAO,cAAc,eAAe,CAAC;;;;KAIhD","file":"ovpApp/data-delegates/stream.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.dataDelegate')\n    .factory('streamViewModelDefinition', streamViewModelDefinition)\n    .constant('CDVR_STATE', {\n            SCHEDULED: 'scheduled',\n            IN_PROGRESS: 'inProgress',\n            COMPLETED: 'completed'\n        });\n\n    /* @ngInject */\n    function streamViewModelDefinition(DataDelegate, delegateUtils, CDVR_STATE) {\n        let cached = delegateUtils.cached;\n\n        return new DataDelegate({\n            cdvrState: cached(function () {\n                if (this.cdvrRecording) {\n                    return this.cdvrRecording.cdvrState;\n                }\n            }),\n            isCDVRRecorded: cached(function () {\n                return this.cdvrState === CDVR_STATE.IN_PROGRESS || this.cdvrState === CDVR_STATE.COMPLETED;\n            }),\n            isOnDemandStream: function () {\n                return (this.type === 'ONLINE_ONDEMAND');\n            },\n            isLinearStream: function () {\n                return this.type === 'LINEAR';\n            },\n            isOnNow: function () {\n                let now = Date.now();\n                return this.streamProperties.startTime <= now &&\n                    this.streamProperties.endTime > now;\n            },\n            duration: cached(function () {\n                if (this.isOnDemandStream) {\n                    return this.streamProperties.runtimeInSeconds;\n                } else if (this.isCDVRRecorded) {\n                    return this.cdvrRecording.stopTimeSec -\n                        this.cdvrRecording.startTimeSec;\n                }\n            }),\n            isEntitled: cached(function () {\n                if (this.isCDVRRecorded) {\n                    // DVR always entitled. TODO - This can be removed when NNS\n                    // starts returning this with the proper value\n                    return true;\n                } else if (this.streamProperties.tvodEntitlement) {\n                    return true;\n                } else {\n                    return this.streamProperties.entitled;\n                }\n            }),\n            cdvrNotCompleted: cached(function () {\n                let cdvrRecording = this.streamProperties && this.streamProperties.cdvrRecording;\n                return !!cdvrRecording && cdvrRecording.cdvrState !== CDVR_STATE.COMPLETED;\n            }),\n            isTvodStream: function () {\n                return this.isOnDemandStream && this.streamProperties.price > 0;\n            },\n            bookmark: 'streamProperties.bookmark',\n            cdvrRecording: 'streamProperties.cdvrRecording',\n            streamProperties: 'streamProperties',\n            index: 'index',\n            defaultStream: 'defaultStream',\n            type: 'type',\n            network: 'network',\n            // Get stream properties formatted for display\n            streamProps: cached(function () {\n                return delegateUtils.getStreamProps([this]);\n            })\n        });\n    }\n})();\n"],"sourceRoot":"/source/"}