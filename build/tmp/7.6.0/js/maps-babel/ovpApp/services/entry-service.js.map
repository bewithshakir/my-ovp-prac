{"version":3,"sources":["ovpApp/services/entry-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/entry-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.entry', [\n        'ovpApp.config',\n        'ovpApp.service.lineup',\n        'ovpApp.services.profileService'\n    ])\n    .factory('entryService', entryService);\n\n    /* @ngInject */\n    function entryService($http, $q, config, lineupService, profileService, $rootScope) {\n        let profiles = {};\n\n        let service = {\n            forDefaultProfile,\n            forProfile,\n            clearCache\n        };\n\n        return service;\n\n        /////////////////\n\n        function clearCache() {\n            profiles = {};\n        }\n\n        function forDefaultProfile() {\n            return $q.all([profileService.isSpecU(), profileService.isBulkMDU(), profileService.isIpOnlyEnabled()])\n                .then(([specU, bulkMDU, ipOnly]) => {\n                    let profile = specU ? config.nns.specUConfig :\n                        (bulkMDU ? config.nns.bulkMDUConfig :\n                        (ipOnly ? config.nns.ipOnlyConfig : config.nns.qamStbConfig));\n                    return forProfile(profile);\n                });\n        }\n\n        /**\n         * Returns a promise which resolves to an object which helps resolve API endpoints\n         *\n         * @param {string} profile\n         * @returns {Promise}\n         */\n        function forProfile(profile) {\n            return lineupService.getLineup().then(service => {\n                let { market: division, lineupId: lineup } = service;\n\n                if (!(lineup || division || profile)) {\n                    throw new Error('Must have a profile, lineup and division');\n                }\n\n                // To avoid unnecessary re-requests, create a key to cache all unique responses\n                let key = `${division}:${lineup}:${profile}`;\n\n                $rootScope.$broadcast('EntryService:masDefined', service);\n\n                // If we already have this request, then return a promise which will resolve to the helper\n                if (profiles[key]) {\n                    return profiles[key];\n                }\n\n                // Create the new request\n                let promise = $http({\n                    method: 'GET',\n                    url: `${config.piHost}${config.nnsApi}${config.nns.entryPoint}` +\n                        `?division=${division}&lineup=${lineup}&profile=${profile}`,\n                    withCredentials: true\n                })\n                    .then(response => {\n                        // For each entry in the entryPointList, we will return an object which will either\n                        //  be a function (in the case of \"bare\" endpoints like homepage) or an object\n                        //  of additional functions\n                        return response.data.entryPointList.reduce((serviceMap, endpoint) => {\n                            serviceMap[endpoint.name] = endpoint.entryPoints\n                                .reduce((replaceMap, entryPoint) => {\n\n                                    // Entries without a replaceType or replaceStrings field are \"bare\"\n                                    //  and have no transformations available.  These we turn into a simple\n                                    //  function which returns the URI\n                                    if (!(entryPoint.replaceType || entryPoint.replaceStrings)) {\n                                        return angular.extend(function () {\n                                            return entryPoint.uri;\n                                        }, replaceMap);\n                                    } else if (!entryPoint.replaceType && entryPoint.replaceStrings) {\n                                        // Replace multiple strings\n                                        let name = entryPoint.replaceStrings\n                                            .map(r => r.replaceType)\n                                            .join('_');\n                                        replaceMap[name] = function (...replacements) {\n                                            let uri = entryPoint.uri;\n                                            replacements.forEach((r, i) =>\n                                                uri = uri.replace(entryPoint.replaceStrings[i].replaceString, r));\n                                            return uri;\n                                        };\n                                        return replaceMap;\n                                    } else {\n                                        // Standard option-- offers to replace a single value-- e.g. series\n                                        //  and event calls by an ID.  Return a function which accepts an id\n                                        //  and returns the URI for that ID\n                                        replaceMap[entryPoint.replaceType] = function (id) {\n                                            return entryPoint.uri.replace(entryPoint.replaceString, id);\n                                        };\n                                        return replaceMap;\n                                    }\n                                }, {});\n                            return serviceMap;\n                        }, {});\n                    });\n\n                // Save the promise so that we don't need to re-request the data\n                return (profiles[key] = promise);\n            });\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}