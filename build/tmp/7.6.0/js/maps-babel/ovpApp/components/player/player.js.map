{"version":3,"sources":["ovpApp/components/player/player.js"],"names":[],"mappings":"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","file":"ovpApp/components/player/player.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.player', [\n            'ovpApp.player.streamService',\n            'ovpApp.player.flashWarning',\n            'ovpApp.parentalControlsDialog',\n            'ovpApp.components.ovp.ccSettings',\n            'ovpApp.components.vast',\n            'ovpApp.components.insecure',\n            'ovpApp.directives.ovp-fullscreen',\n            'ovpApp.product.service',\n            'ovpApp.legacy.PlayerSplunkService',\n            'ovpApp.services.splunk',\n            'ovpApp.video',\n            'ovpApp.config',\n            'ovpApp.messages',\n            'ovpApp.services.ovpStorage',\n            'ovpApp.services.rxUtils',\n            'ovpApp.services.connectivityService',\n            'ovpApp.services.errorCodes',\n            'ovpApp.player.streamService',\n            'ovpApp.src-service',\n            'lib.platform',\n            'rx',\n            'ovpApp.player.flashAvailability',\n            'ovpApp.player.sapService'\n            ])\n    .constant('playerErrors', {\n        unentitled: 'unentitled',\n        blocked: 'blocked',\n        adBlocker: 'adBlocker',\n        outOfHome: 'outOfHome',\n        notFound: 'notFound',\n        notRented: 'notRented',\n        tunedAway: 'tunedAway',\n        unknown: 'unknown',\n        oohFraudDetection: 'oohFraudDetection'\n    })\n    .factory('playerService', playerService)\n    .component('player', {\n        templateUrl: '/js/ovpApp/components/player/player.html',\n        controller: class Player {\n            /* @ngInject */\n            /*jshint -W072*/ // Suppress 'too many parameters' warning.\n            constructor($scope, $rootScope, $q, TWCVideoJS, config, ovpStorage, storageKeys, $controller,\n                rx, PlayerSplunkService, createObservableFunction, playerService, $timeout, VastParser,\n                LegacyAdParser, $http, $log, InsecureService, $location, ovpFullscreen, parentalControlsDialog,\n                parentalControlsContext, connectivityService, playerStreamService, $state, flashAvailabilityService,\n                errorCodesService) {\n\n                angular.extend(this, {$scope, $rootScope, $q, TWCVideoJS, config, ovpStorage, storageKeys,\n                    $controller, rx, PlayerSplunkService, createObservableFunction, playerService, $timeout,\n                    VastParser, LegacyAdParser, $http, $log, InsecureService, $location, ovpFullscreen,\n                    parentalControlsDialog, parentalControlsContext, connectivityService, playerStreamService, $state,\n                    flashAvailabilityService, errorCodesService});\n            }\n\n            $onInit() {\n                this.debug = this.$location.search().debug === 'true';\n                this.bitRate = 0;\n                this.droppedFramesCount = 0;\n                this.preloading = true;\n                this.lastBitrate = null;\n                this.segmentErrors = [];\n                this.channel = null;\n\n                // Called when the player is torn down. Notifies observables to complete themselves\n                this.teardown = this.createObservableFunction();\n                this.playbackStop = this.createObservableFunction();\n\n                this.initPlayer()\n                    .then(() => this.preloading = false)\n                    .then(() => this.applyInitialSettings())\n                    .then(() => this.initAnalyticsAndSplunk())\n                    .then(() => this.playerInitialized = true)\n                    .catch((error) => {\n                        this.preloading = false;\n                        this.playerStateKnown = (error === 'needsFlashUpdate');\n\n                        this.needsFlashUpdate = this.flashAvailabilityService.needsFlashUpdate();\n                        this.hasFlashInstalled = this.flashAvailabilityService.hasFlashInstalled();\n\n                        // Analytics\n                        let pageName = 'adobeFlashNotAvailableWarning'; // Default\n                        if (this.hasFlashInstalled && this.needsFlashUpdate) {\n                            pageName = 'adobeFlashUpgradeWarning';\n                        } else if (this.hasFlashInstalled && !this.needsFlashUpdate && this.playerStateKnown) {\n                            pageName = 'adobeFlashInstalledButUnavailable';\n                        }\n                        this.$rootScope.$emit('Analytics:flash-warning', {\n                            pageName: pageName,\n                            toState: this.$state.current\n                        });\n                    });\n\n                this.$scope.$on('stream-uri-obtained', (event, type, streamInfo) => {\n                    this.applyInitialBitrate();\n                    this.segmentErrors = [];\n                    let streamUrl = '';\n                    if (!streamInfo) {\n                        streamInfo = {};\n                    }\n                    if (streamInfo.stream) {\n                        streamUrl = streamInfo.stream.streamUrlWithDAIScheme || streamInfo.stream.stream_url;\n                    }\n                    streamInfo.type = type;\n                    if (streamUrl.indexOf('?') > 0) {\n                        streamInfo.parts = streamUrl\n                            .split('?')[1]\n                            .split('&')\n                            .map(pairs => pairs.split('='))\n                            .reduce((memo, part) => {\n                                memo[part[0]] = part[1];\n                                return memo;\n                            }, {});\n                    } else {\n                        streamInfo.parts = {};\n                    }\n                    this.streamInfo = streamInfo;\n                    this.debug = this.$location.search().debug === 'true';\n                });\n\n                this.$rootScope.$on('player:detachControls', () => {\n                    this.playbackStop();\n                    this.debug = false;\n                    this.preloading = true;\n                    this.$timeout(() => {\n                        this.preloading = false;\n                    }, 0);\n                });\n\n                this.$scope.$on('connectivityService:statusChanged', this.onConnectionChange.bind(this));\n            }\n\n            $onDestroy() {\n                this.teardown();\n            }\n\n            /////////////////\n\n            initPlayer() {\n                return this.playerService.getInstance().then(playerInstance => {\n                    this.player = playerInstance;\n                    this.registerPlayerEvents();\n                    this.teardown.subscribe(() => this.player.stop());\n                });\n            }\n\n            initAnalyticsAndSplunk() {\n                this.$rootScope.$emit('Analytics:playerInitialized', this.player);\n\n                if (this.config.getBool(this.config.splunkControlParameters.splunkLoggingEnabled)) {\n                    this.playerSplunkService = new this.PlayerSplunkService(this.player);\n                }\n            }\n\n            registerPlayerEvents() {\n                this.observableFromPlayerEvent('ad-twc-tracking-request')\n                    .subscribe(event => this.onTrackingRequest(event));\n                this.observableFromPlayerEvent('unblock-stream-request')\n                    .subscribe(event => this.onUnblockStreamRequest(event));\n                this.observableFromPlayerEvent('ad-metadata-received')\n                    .subscribe(event => this.onAdMetadataReceived(event));\n                this.observableFromPlayerEvent('ad-metadata-event-received')\n                    .subscribe(event => this.onAdMetadataEventReceived(event));\n                this.observableFromPlayerEvent('player-position-changed')\n                    .subscribe(event => this.onPlayerPositionChanged(event));\n                this.observableFromPlayerEvent('bitrate-changed')\n                    .subscribe(event => this.onBitRateChanged(event));\n                this.observableFromPlayerEvent('channel-changed')\n                    .subscribe(event => this.onChannelChanged(event));\n                this.observableFromPlayerEvent('error')\n                    .subscribe(event => this.onVideoPlayerError(event));\n                this.observableFromPlayerEvent('sap-init')\n                    .subscribe(event => this.onSapInit(event));\n\n                let started = this.observableFromPlayerEvent('playback-started');\n                let playbackStopped = this.teardown.merge(this.playbackStop);\n                playbackStopped.skipUntil(started)\n                    .subscribe(() => {\n                        this.player.trigger('playback-stopped', {\n                            TriggeredBy: 'exitPlayer'\n                        });\n                        started = false;\n                    });\n            }\n\n            applyInitialSettings() {\n                this.applyControlParameters();\n                this.applyVolume();\n                this.applyMute();\n                this.applyCCEnabled();\n                this.applyCCSettings();\n                this.applySap();\n\n                this.$rootScope.$eventToObservable('EAS:start')\n                    .takeUntil(this.teardown)\n                    .subscribe(() => this.onEAS());\n\n                this.$rootScope.$eventToObservable('player:minimize')\n                    .takeUntil(this.teardown)\n                    .subscribe(() => this.onMinimize());\n            }\n\n            applyControlParameters() {\n                try {\n                    let bitRateConfig = this.config.playerBitrateControlParameters;\n                    if (bitRateConfig.overrideDefaults) {\n                        this.player.setBitrateControlParameters(bitRateConfig);\n                    }\n                } catch (e) {\n                    this.$log.error('Error parsing playerBitrateControlParameters', e);\n                }\n            }\n\n            applyInitialBitrate () {\n                if (this.lastBitrate) {\n                    this.player.setBitrateControlParameters({\n                        initialBitrateInBitsPerSec: this.lastBitrate\n                    });\n                }\n            }\n\n            applyVolume(scheduler) {\n                const key = this.storageKeys.volumeLevel;\n                let volume = this.ovpStorage.getItem(key);\n                if (volume === null || volume === undefined) {\n                    volume = 0.4;\n                }\n                this.player.setVolume(parseFloat(volume));\n\n                this.observableFromPlayerEvent('volume-level-changed')\n                    .debounce(1000, scheduler)\n                    .subscribe(volume => this.ovpStorage.setItem(key, volume));\n            }\n\n            applyMute() {\n                const key = this.storageKeys.muted;\n                if (this.forceUnmute) {\n                    this.player.setMuted(false);\n                    this.forceUnmute = false;\n                } else {\n                    this.player.setMuted(!!this.ovpStorage.getItem(key));\n                }\n\n                this.observableFromPlayerEvent('mute-toggled')\n                    .subscribe(muted => {\n                        if (!this.forceUnmute) {\n                            this.ovpStorage.setItem(key, muted);\n                        }\n                    });\n            }\n\n            applyCCEnabled() {\n                const key = this.storageKeys.ccEnabled;\n                let ccEnabled = this.ovpStorage.getItem(key);\n                if (ccEnabled !== undefined) {\n                    this.player.setCCEnabled(ccEnabled);\n                }\n\n                this.observableFromPlayerEvent('cc-enabled-toggled')\n                    .subscribe(cc => this.ovpStorage.setItem(key, cc));\n            }\n\n            applyCCSettings() {\n                const key = this.storageKeys.ccSettings;\n                let ccSettings = this.ovpStorage.getItem(key);\n                if (ccSettings !== undefined) {\n                    this.player.setCCSettings(ccSettings);\n                }\n\n                this.observableFromPlayerEvent('cc-settings-changed')\n                    .subscribe(settings => this.ovpStorage.setItem(key, settings));\n            }\n\n            applySap() {\n                const key = this.storageKeys.sapEnabled;\n                let sapEnabled = this.ovpStorage.getItem(key);\n                if (sapEnabled !== undefined /* TBD check what nonset values return */) {\n                    this.player.setSAPEnabled(sapEnabled);\n                }\n                this.observableFromPlayerEvent('sap-toggled')\n                    .subscribe(sap => this.ovpStorage.setItem(key, sap));\n            }\n\n            onMinimize() {\n                this.ovpFullscreen.exitFullscreen();\n            }\n\n            onEAS() {\n                let wasMuted = this.ovpStorage.getItem(this.storageKeys.muted);\n                this.player.setMuted(true);\n\n                this.$rootScope.$eventToObservable('EAS:end')\n                    .first()\n                    .takeUntil(this.teardown)\n                    .subscribe(() => this.player.setMuted(wasMuted));\n            }\n\n            onConnectionChange(event, isOnline, timeout) {\n                if (isOnline && this.resumePlay) {\n                    this.resumePlay();\n                } else {\n                    if (this.player.isPlaying()) {\n                        this.$timeout(() => {\n                            if (this.$state.current.name === 'ovp.livetv') {\n                                this.player.stop();\n                                this.player.trigger('playback-stopped', {\n                                    TriggeredBy: 'connectivityLost'\n                                });\n                                this.resumePlay = () => {\n                                    this.playerStreamService.playChannel({\n                                        player: this.player,\n                                        channel: this.channel,\n                                        triggeredBy: 'connectionRestore'\n                                    });\n                                    this.$rootScope.$broadcast('playback-resumed');\n                                    this.resumePlay = null;\n                                };\n                            } else {\n                                this.player.trigger('playback-pause-toggled', true);\n                                this.player.pause();\n                                this.resumePlay = () => {\n                                    this.player.trigger('playback-pause-toggled', false);\n                                    this.player.play();\n                                    this.resumePlay = null;\n                                };\n                            }\n                        }, timeout);\n                    }\n                }\n\n            }\n\n            onVideoPlayerError(error) {\n                if (error.errorID ===  1000005 /* SEGMENT_ERROR */ && this.config.enableSegmentErrorRestart) {\n                    /*\n                    When a dai session expires, the MDC service will return a 404 for some of the manifest files, this\n                    _may_ cause the flash player to get stuck in a loop of requesting the same file over and over again.\n                    To prevent this, OVP will attempt to detect multiple failures on the same url and will reset the\n                    channel to force a new session\n                     */\n                    if (error.mediaPlayerErrorDescription) {\n                        if (this.connectivityService.isOnline()) {\n                            //Force a check here if we get an error. Don't bother logging if we are offline. If we are\n                            //not online, we don't want to keep track of failed files (since they all will be)\n                            this.connectivityService.checkXhr();\n\n                            let errorUri = error.mediaPlayerErrorDescription;\n                            if (!this.segmentErrors[errorUri]) {\n                                this.segmentErrors[errorUri] = 0;\n                            }\n                            this.segmentErrors[errorUri]++;\n\n                            if (this.segmentErrors[errorUri] >= this.config.maxPlayerSegmentError) {\n                                this.$log.error('Segment Error - Restarting Stream');\n\n                                // Analytics: Report playback failure.\n                                this.$rootScope.$emit('Analytics:playbackFailure', {\n                                    // We seemingly only reach this point with linear assets.\n                                    asset: (this.channel ? this.channel.asset : undefined),\n                                    cause: error.errorID,\n                                    errorCode: 'WVP-3305',\n                                    errorMessage: this.errorCodesService.getMessageForCode('WVP-3305')\n                                });\n                                if (this.$state.includes('ovp.livetv')) {\n                                    this.resetChannel();\n                                } else {\n                                    this.player.stop();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            onSapInit(event) {\n                if (event.audio && event.audio.length > 1) {\n                    this.playerSplunkService.onError({\n                        errorID: 106601,\n                        errorMessage: 'Missing audio stream',\n                        mediaPlayerErrorCode: 106601,\n                        mediaPlayerErrorDescription: 'Zero audio streams available for content'\n                    });\n                }\n            }\n\n            onAdMetadataReceived(event)  {\n                try {\n                    if (event.name) {\n                        event = [event];\n                    }\n                    let adBreaks = [];\n                    if (this.config.vastSupport) {\n                        adBreaks = this.VastParser.parseAdBreaks(event, this.streamInfo);\n                        //Gets inserted in the player and ultimately sent to playerControls.onAdBreaksCreated\n                    } else {\n                        adBreaks = this.LegacyAdParser.parseAdEvents(event);\n                    }\n                    this.player.setAdBreakData(adBreaks);\n                } catch (e) {\n                    this.$log.error('Error parsing ads', e);\n                }\n            }\n\n            onAdMetadataEventReceived(event) {\n                try {\n                    let adInstance = null;\n                    if (this.config.vastSupport) {\n                        adInstance = this.VastParser.parseAdEvent(event, this.streamInfo);\n                    } else {\n                        adInstance = this.LegacyAdParser.parseAdEvents(event);\n                    }\n                    this.player.setAdInstanceData(adInstance);\n                } catch (e) {\n                    this.$log.error('Error parsing ad event', e);\n                }\n            }\n\n            onTrackingRequest(trackingEvent) {\n                this.VastParser.getTrackingUrls(trackingEvent)\n                    .forEach((url) => this.sendTrackingRequest(url));\n            }\n\n            sendTrackingRequest(trackingUrl) {\n                if ((trackingUrl.indexOf('https://') === 0) &&\n                    (trackingUrl.indexOf(this.config.authNeededTrackingDomain)) >= 0) {\n                    this.$http({\n                        method: 'GET',\n                        url: trackingUrl,\n                        withCredentials: true\n                    });\n                } else {\n                    this.InsecureService.get(trackingUrl);\n                }\n            }\n\n            onPlayerPositionChanged(event) {\n                if (this.bitRate !== event.BitRate) {\n                    this.bitRate = event.BitRate;\n                }\n\n                if (this.droppedFramesCount !== event.DroppedFramesCount) {\n                    this.droppedFramesCount = event.DroppedFramesCount;\n                    this.player.trigger('dropped-frame-count-changed', {\n                        NewDroppedFramesCount: this.droppedFramesCount,\n                        PlaybackTimestamp: event.PlaybackTimestamp\n                    });\n                }\n            }\n\n            onBitRateChanged(event) {\n                if (event && event.event) {\n                    this.lastBitrate = event.event.profile;\n                }\n            }\n\n            onChannelChanged(event) {\n                if (event.channel) {\n                    this.channel = event.channel;\n                }\n            }\n\n            observableFromPlayerEvent(eventName) {\n                return this.rx.Observable.fromEventPattern(\n                    h => this.player.on(eventName, h),\n                    h => this.player.off(eventName, h)\n                ).takeUntil(this.teardown);\n            }\n\n            onUnblockStreamRequest() {\n                this.parentalControlsDialog\n                    .withContext(this.parentalControlsContext.PLAYBACK)\n                    .unlock()\n                    .then(() => this.$rootScope.$broadcast('player:parentalControlsUnblocked'));\n            }\n\n            isValidPlayRoute() {\n                return this.playerService.isValidPlayRoute();\n            }\n\n            resetChannel() {\n                this.player.stop();\n                this.playerStreamService.playChannel({\n                    player: this.player,\n                    channel: this.channel,\n                    triggeredBy: 'sessionTimeout'\n                });\n\n            }\n        }\n    });\n\n    /**\n     * Service singleton that keeps one instance of player around.\n     */\n\n    /* @ngInject */\n    function playerService($window, $document, OvpSrcService, messages,\n                           alert, platform, TWCVideoJS, $q, rx,\n                           $state, $timeout, $rootScope, errorCodesService, sapService) {\n        let playerInstance,\n            initDeferred = $q.defer();\n\n        let subject = new rx.ReplaySubject(1);\n\n        let service = {\n            getInstance,\n            playStream,\n            assetLoadedSource: subject.filter(options => !!options),\n            stop,\n            isValidPlayRoute,\n            showErrorAlert\n        };\n\n        return service;\n\n        ///////////////\n\n        function isValidPlayRoute() {\n            const state = $state.transition ? $state.transition.to() : $state.current;\n\n            return state &&\n                (state.name.indexOf('ovp.ondemand.play') > -1 ||\n                state.name.indexOf('ovp.livetv') > -1);\n        }\n\n        function getInstance() {\n            if (flashElementDefined() && !playerInstance) {\n                init();\n            }\n            return initDeferred.promise;\n        }\n\n        function flashElementDefined() {\n            let flashDomElement = $document[0].getElementById('flash-content');\n            return flashDomElement !== null;\n        }\n\n        function stop() {\n            getInstance().then(() => {\n                playerInstance.stop();\n                subject.onNext(undefined);\n                $rootScope.$broadcast('player:detachControls');\n            });\n        }\n\n        function playStream(options) {\n            // Analytics: inform start of new stream\n            $rootScope.$emit('Analytics:initiateNewStream', options);\n\n            getInstance().then(() => {\n                // Analytics: inform start of new stream\n                $rootScope.$emit('Analytics:initiateNewStream', options);\n                subject.onNext(options);\n            });\n        }\n\n        function showErrorAlert(error, asset) {\n            // default generic error message\n            let errorCode = 'WLI-9000';\n\n            if (error.mediaPlayerErrorRuntimeCode === 3365 && platform.name === 'Chrome') {\n                // Override for incognito mode\n                errorCode = 'WVP-3365';\n            } else if (error.mediaPlayerErrorRuntimeCode === 3343) {\n                // Flash upgraded\n                errorCode = 'WFE-1114';\n            } else if (error.mediaPlayerErrorRuntimeCode.toString().startsWith('33')) {\n                // any other 33 error is a player DRM issue.  By adding WVP-, we can get the friendly code\n                errorCode = 'WVP-' + error.mediaPlayerErrorRuntimeCode;\n            }\n\n            var alertContent = errorCodesService.getAlertForCode(errorCode);\n\n            $rootScope.$emit('Analytics:playbackFailure', {\n                asset: asset,\n                cause: error,\n                errorCode: errorCode,\n                errorMessage: errorCodesService.getMessageForCode(errorCode)\n            });\n\n            return alert.open(alertContent);\n        }\n\n        function init() {\n            let isWindow = platform.os.family.indexOf('Windows') > -1,\n                isFForIE = platform.name === 'Firefox' || platform.name === 'IE',\n                wmode = (isWindow && isFForIE) ? 'opaque' : 'direct',\n                flashDomElement = $document[0].getElementById('flash-content');\n\n            if (flashDomElement) {\n                playerInstance = new TWCVideoJS.FlashVideoPlayer(\n                    flashDomElement,\n                    $window.swfobject,\n                    OvpSrcService.versionPath('js/libs/ovp-video-player/'),\n                    null, //This is ignored, should delete\n                    function (e) {\n                        if (!e.success) {\n                            initDeferred.reject('needsFlashUpdate');\n                        }\n                    },\n                    wmode\n                );\n\n                playerInstance.on('player-initialized', () => {\n                    // Make flash-conent non-focusable\n                    let flashObject = $document[0].getElementsByClassName('twctv-flash-video-player')[0];\n                    if (flashObject) {\n                        flashObject.setAttribute('tabindex', -1);\n                        flashObject.setAttribute('aria-hidden', true);\n                    }\n\n                    // Initialize sap service\n                    sapService.withPlayer(playerInstance);\n\n                    initDeferred.resolve(playerInstance);\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}