{"version":3,"sources":["ovpApp/services/connectivity-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/connectivity-service.js","sourcesContent":["/*globals console*/\n(function () {\n    'use strict';\n    angular.module('ovpApp.services.connectivityService', [\n        'ovpApp.config'\n    ])\n    .factory('connectivityService', connectivityService)\n    .run(run);\n\n    /* @ngInject */\n    function connectivityService(rxhttp, $window, $rootScope, $http, $q,\n        $interval, $timeout, config, httpUtil, rx) {\n\n        let isConnected = true;\n        let isVideoPlaying = false;\n        let playbackType;\n        let promise;\n        let enabled = config.connectivityService.enabled;\n        let xhrEnabled = config.connectivityService.checkXhrEnabled;\n        let xhrPath = config.connectivityService.checkXhrPath;\n        let xhrInterval = config.connectivityService.checkXhrIntervalMs;\n        let subtractDelay = config.connectivityService.delayMessageWhenPlayingMs;\n        let showDebug = config.connectivityService.debug;\n        let debounceOnlineMs = config.connectivityService.debounceOnlineMs;\n        let bufferingParams = config.playerBufferControlParameters;\n\n        activate();\n\n        return {isOnline, checkXhr};\n\n        ///////////////////////\n\n        function activate() {\n            if (!enabled) {\n                return;\n            }\n\n            isConnected = $window.navigator.onLine;\n\n            // We can listen to the browser online and offline events, but this\n            // will only tell us that the computer is connected to a network, and\n            // not necessarily that the computer has an internet connection.\n            // Normally this will be pretty reliable.  This works in all browsers\n            // but IE 10.\n            rx.Observable.fromEvent(angular.element($window), 'online')\n                .debounce(debounceOnlineMs).subscribe(() => {\n                    checkXhr();\n                });\n\n            angular.element($window).on('offline', () => {\n                toggleStatus(false);\n            });\n\n            //  This works in all browsers and verifies an actual internet connection.\n            if (xhrEnabled) {\n                $interval(() => checkXhr(), xhrInterval);\n            }\n\n            $rootScope.$on('Analytics:playerInitialized', (e, player) => {\n                attachPlayerListeners(player);\n            });\n        }\n\n        function attachPlayerListeners(player) {\n            player.on('playback-started', () => togglePlaybackStatus(true));\n            player.on('playback-stopped', () => togglePlaybackStatus(false));\n            player.on('channel-changed', () => setPlaybackType('linear'));\n            player.on('vod-content-selected', () => setPlaybackType('vod'));\n            player.on('cdvr-content-selected', () => setPlaybackType('dvr'));\n        }\n\n        function togglePlaybackStatus(isPlaying) {\n            isVideoPlaying = isPlaying;\n        }\n\n        function setPlaybackType(type) {\n            playbackType = type;\n        }\n\n\n        function checkXhr() {\n            if (!promise) {\n                xhrPath = httpUtil.updateQueryStringParameter(xhrPath, 'cacheBust', Date.now());\n                promise = rxhttp.get(xhrPath).retryWhen(errors => {\n                    return errors.take(3).flatMap(() => rx.Observable.timer(1000)); // 1 sec delay between retries\n                }).toPromise($q);\n\n                promise.then(() => {\n                    toggleStatus(true);\n                }, (resp) => {\n                    // a 30x, 40x, or 50x status still indicates an internet\n                    // connection, a -1 means the request failed completely\n                    if (resp.status === -1) {\n                        toggleStatus(false);\n                    } else {\n                        toggleStatus(true);\n                    }\n                }).finally(() => {\n                    promise = null;\n                });\n            }\n            return promise;\n        }\n\n        function toggleStatus(status) {\n\n            let timeout;\n            let currStatus = isConnected;\n\n            if (currStatus !== status) {\n                isConnected = status;\n\n                if (isVideoPlaying && !status) {\n                    if (playbackType === 'vod' || playbackType === 'dvr') {\n                        timeout = bufferingParams.vodPlaybackBufferLengthInMilliSec;\n                    } else {\n                        timeout = bufferingParams.defaultPlaybackBufferLengthInMilliSec;\n                    }\n                } else {\n                    timeout = 0;\n                }\n\n                if (timeout > subtractDelay) {\n                    timeout = timeout - subtractDelay;\n                }\n\n                if (showDebug) {\n                    debug(isVideoPlaying, playbackType, timeout);\n                }\n\n                $timeout(() => {\n                    $rootScope.$broadcast('connectivityService:statusChanged', status, timeout);\n                });\n            }\n        }\n\n        function debug(isVideoPlaying, playbackType, bufferingTime) {\n            let Table = function (isVideoPlaying, playbackType, buffer) {\n                this.isOnline = isConnected;\n                this.isVideoPlaying = isVideoPlaying;\n                this.playbackType = playbackType;\n                this.buffer = buffer;\n            };\n\n            let debugTable = new Table(isVideoPlaying, playbackType, bufferingTime);\n\n            console.table([debugTable]);\n        }\n\n        function isOnline() {\n            return isConnected;\n        }\n    }\n\n    function run(connectivityService) {\n        return connectivityService;\n    }\n})();\n"],"sourceRoot":"/source/"}