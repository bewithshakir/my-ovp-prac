{"version":3,"sources":["ovpApp/analytics/events/login.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/events/login.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.login', [\n        'ovpApp.analytics.analyticsService'\n    ])\n    .factory('login', loginEvents)\n    .run(function loadHandler(login) {\n            return login;\n        });\n\n    /* @ngInject */\n    function loginEvents($rootScope, analyticsService, $log) {\n\n        // Set to true between loginStart and loginStop events.\n        let loggingIn = false;\n\n        // Access to the analytics state.\n        let state = analyticsService.state;\n\n        /**\n         * Function for attaching all event listeners.\n         */\n        function attachEventListeners() {\n            try {\n                $rootScope.$on('Analytics:loginStop', (event, data) => {\n                    loginStop(data);\n                });\n\n                $rootScope.$on('Analytics:loginStart', (event, data) => {\n                    loginStart(data);\n                });\n\n                $rootScope.$on('Analytics:logout', (event, data) => {\n                    logout(data);\n                });\n\n                $rootScope.$on('Analytics:inVisitOauthRefresh', (event, data) => {\n                    inVisitOauthRefresh(data);\n                });\n                $rootScope.$on('Analytics:receivedOauthToken', (event, data) => {\n                    receivedOauthToken(data);\n                });\n                $rootScope.$on('Analytics:forcedLogin', (event, data) => {\n                    forcedLogin(data);\n                });\n                $rootScope.$on('Analytics:captureAuthAttemptId', (event, data) => {\n                    captureAuthAttemptId(data);\n                });\n            }\n            catch (ex) {\n                $log.error('Analytics login:', ex);\n            }\n        }\n\n        /**\n         * Indicate that an attempt to log in has begun.\n         *\n         * @param data Event data associated with login.\n         */\n        function loginStart(data) {\n            try {\n\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: loginStart, loggingIn=' + loggingIn, data);\n                }\n\n                // If we're already logging in, it's better to discard this attempt\n                // than to allow the extra loginStart to disable the client analytics library.\n                if (loggingIn) {\n                    return;\n                }\n\n                // Capture the current auth type\n                state.setCurrentAuthType(data.authType);\n\n                // STVWEB-569: Track our login state, in case of hibernation\n                if (state.getIsLoggedIn()) {\n\n                    // STVWEB-1637: If this is a verifierAuth, we might be waking from\n                    // a short hibernation, so we can treat this as an inVisitOauthRefresh.\n                    if ('verifierAuth' === data.authType) {\n                        if (analyticsService.isDebug()) {\n                            $log.debug('Analytics: ignoring verifierAuth start');\n                        }\n                        return;\n                    }\n\n                    $log.warn('Analytics: logging out due to login attempt');\n\n                    // Record that we have apparently logged out.\n                    state.setIsLoggedIn(false);\n                    logout({\n                        goOffline: false,\n                        triggeredBy: 'user'\n                    });\n                }\n\n                // Record that we're entering a \"logging in\" state.\n                loggingIn = true;\n                analyticsService.event('loginStart', data);\n            } catch (ex) {\n                $log.error('Analytics Login Error:', ex);\n            }\n        }\n\n        /**\n         * Expand the oath token in an object into fields expected by the\n         * analytics SDK.\n         * @param data Data object potentially containing the 'oauth' field.\n         * @return Given data object, potentially with additional fields from oauth expansion.\n         */\n        function expandOauthToken(data) {\n            // If we have an 'oauth' item, expand it into parts:\n            if (data.oauth && data.oauth.token && !angular.isDefined(data.oAuthToken)) {\n                data.oAuthToken = data.oauth.token;\n            }\n\n            if (data.oauth && data.oauth.expiration && !angular.isDefined(data.oAuthExpirationTimestamp)) {\n                data.oAuthExpirationTimestamp = Number(data.oauth.expiration);\n            }\n\n            return data;\n        }\n\n        /**\n         * Capture the current authAttemptId.\n         *\n         * @param data Event data containing authAttemptId.\n         */\n        function captureAuthAttemptId(data) {\n            try {\n\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: captureAuthAttemptId: ' + data.authAttemptId, data);\n                }\n\n                if (data.authAttemptId) {\n                    state.setAuthAttemptId(data.authAttemptId);\n                }\n\n            } catch (ex) {\n                $log.error('Analytics Login Error:', ex);\n            }\n        }\n\n        /**\n         * Indicate that an attempt to log in has concluded.\n         *\n         * @param data Event data\n         */\n        function loginStop(data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: loginStop, loggingIn=' + loggingIn, data);\n                }\n\n                // Expand the oauth token, if necessary.\n                data = expandOauthToken(data);\n\n                if (!loggingIn) {\n\n                    // STVWEB-1637: If we're finishing a verifierAuth while already\n                    // logged in, this is actually an inVisitOauthRefresh.\n                    if (data.success && state.getIsLoggedIn() && 'verifierAuth' === state.getCurrentAuthType()) {\n                        inVisitOauthRefresh(data);\n                        return;\n                    }\n\n                    return;\n                }\n\n                // If this is for any authType other than resumeAuth, ensure we\n                // know we are online. Examples of why this is needed would be\n                // when the user was logged out.\n                if ('resumeAuth' !== state.getCurrentAuthType()) {\n                    analyticsService.getSDK().set('isOnline', true);\n                }\n\n                // We're no longer in a \"logging in\" state.\n                loggingIn = false;\n\n                // Include this authAttemptId, if it exists. Clear it afterwards.\n                if (state.getAuthAttemptId()) {\n                    data.authAttemptId = state.getAuthAttemptId();\n                    state.setAuthAttemptId(null);\n                }\n\n                // If login succeeded, record it and return.\n                if (data.oAuthToken && data.oAuthExpirationTimestamp && data.success) {\n\n                    analyticsService.event('loginStop', data);\n\n                    // Update our state to indicate we have logged in.\n                    state.setIsLoggedIn(true);\n                    return;\n                }\n\n                // If we have a response, emit error event.\n                else if (data.response && 'object' === typeof data.response) {\n\n                    let eventData = {\n                        success: false,\n                        errorType: 'authentication'\n                    };\n\n                    // Include authAttemptId, if it exists.\n                    if (data.authAttemptId) {\n                        eventData.authAttemptId = data.authAttemptId;\n                    }\n\n                    if (data.response.errorCode && data.response.errorName) {\n                        // Capture error data from an Oauth error object.\n                        eventData.errorCode = data.response.errorCode;\n                        eventData.errorMessage = data.response.errorMessage || data.response.errorName;\n                    } else if (data.response.headers &&\n                        data.response.headers('x-pi-auth-failure') &&\n                        data.response.data) {\n\n                        // Capture error data from an http response.\n                        eventData.errorCode = data.response.headers('x-pi-auth-failure');\n                        eventData.errorMessage = data.response.errorMessage || getAsStringOrJSON(data.response.data);\n                    }\n\n                    // Login failed. Record the failure.\n                    analyticsService.event('loginStop', eventData);\n                } else {\n\n                    $log.error('Analytics: loginStop, event not handled.', data);\n                }\n            } catch (ex) {\n                $log.error('Analytics Login Error:', ex);\n            }\n        }\n\n        /**\n         * Indicate that the user has been logged out.\n         */\n        function logout(data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: logout isLoggedIn=' + state.getIsLoggedIn(), data);\n                }\n\n                // Ignore this event if not logged in.\n                if (!state.getIsLoggedIn()) {\n                    return;\n                }\n\n                var eventData = {\n                    triggeredBy: data.triggeredBy || 'user'\n                };\n\n                // Prepare to go offline.\n                if (data && data.goOffline) {\n                    $rootScope.$emit('Analytics:prepareForRefresh');\n                }\n\n                // If we're playing any content, it's time to stop.\n                $rootScope.$emit('Analytics:haltPlaybackFromLogout');\n\n                // Record that we are now logged out.\n                state.setIsLoggedIn(false);\n                analyticsService.event('logout', eventData);\n            } catch (ex) {\n                $log.error('Analytics Login Error:', ex);\n            }\n        }\n\n        /**\n         * Invoked during an active session when the oauth token has timed\n         * out, usually after 6 hours, and been replaced with a new one.\n         *\n         * @param data Event data associated with login, including the new\n         * oauth token and expiration timestamp.\n         */\n        function inVisitOauthRefresh(data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: inVisitOauthRefresh, loggingIn=' + loggingIn, data);\n                }\n\n                if (loggingIn) {\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Dropping inVisitOauthRefresh inside login process', data);\n                    }\n                    return;\n                }\n\n                // Expand the oauth token, if necessary.\n                data = expandOauthToken(data);\n\n                data.operationType = 'refreshAuth';\n                if (data.errorCode) {\n                    data.errorType = 'authentication';\n                    data.success = false;\n                } else {\n                    data.success = true;\n                }\n\n                analyticsService.event('inVisitOauthRefresh', data);\n            } catch (ex) {\n                $log.error('Analytics Login Error:', ex);\n            }\n        }\n\n        /**\n         * Handle a forcedLogin event, where a user has successfully authenticated\n         * via autoAccess, but does not have access to iptv capability.\n         *\n         * @param data Event data associated with the event.\n         */\n        function forcedLogin(data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: forcedLogin', data);\n                }\n\n                // Record that the user is no longer logged in.\n                state.setIsLoggedIn(false);\n\n                analyticsService.event('forcedLogin', data);\n\n            } catch (ex) {\n                $log.error('Analytics forcedLogin Error:', ex);\n            }\n        }\n\n        /**\n         * Invoked during an active session when the oauth token has timed\n         * out, usually after 6 hours, and been replaced with a new one.\n         *\n         * @param data Event data associated with login, including the new\n         * oauth token and expiration timestamp.\n         */\n        function receivedOauthToken(data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: receivedOauthToken, loggingIn=' + loggingIn, data);\n                }\n\n                if (loggingIn) {\n                    loginStop(data);\n                } else {\n                    inVisitOauthRefresh(data);\n                }\n            } catch (ex) {\n                $log.error('Analytics Login Error:', ex);\n            }\n        }\n\n        /**\n         * Retrieve the given object as a string, or as JSON.\n         * @param obj The object to convert to a string.\n         * @return JSON string if object, else string or empty string.\n         */\n        function getAsStringOrJSON(obj) {\n            if (obj) {\n                if ('string' === typeof obj) {\n                    return obj;\n                } else if ('object' === typeof obj) {\n                    return JSON.stringify(obj);\n                }\n            }\n            return '';\n        }\n\n        // Attach the event listeners.\n        attachEventListeners();\n\n        return {\n            loginStart,\n            expandOauthToken,\n            loginStop,\n            logout,\n            inVisitOauthRefresh,\n            getAsStringOrJSON,\n            captureAuthAttemptId\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}