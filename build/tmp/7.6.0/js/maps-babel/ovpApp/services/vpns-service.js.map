{"version":3,"sources":["ovpApp/services/vpns-service.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;;;IAEA,QAAQ,OAAO,uBAAuB,CAC9B,iBACA,oBACA,8BACA,2BAEH,SAAS,gBAAgB;QACtB,SAAS;OAEZ,QAAQ,WAAW,SACnB,QAAQ,eAAe,aACvB,QAAQ,eAAe;;;IAG5B,SAAS,YAAY,IAAI,MAAM,QAAQ,YAAY,aAAa,YAAY,aACxE,YAAY,cAAc,SAAS,UAAU;;QAE7C,IAAI,CAAC,QAAQ,WAAW;YACpB,OAAO;;QAEX,OAAO,YAAY,KAAK,UAAC,MAAS;YAC9B,IAAI,SAAS,IAAI,WAAW;gBACxB,SAAS,OAAO,KAAK,WAAW;gBAChC,UAAU,SAAS;gBACnB,SAAS;oBACL,OAAO;wBACH,MAAM;;;gBAGd,UAAU,CAAC;gBACX,SAAS,SAAA,QAAU,KAAoB;oBAPnC,IAOoB,QAAK,UAAA,UAAA,KAAA,UAAA,OAAA,YAAC,UAAO,UAAA;;oBACjC,IAAI,KAAK,QAAQ;wBACb,KAAK,OAAO;2BACT;wBACH,KAAK,MAAM;;;gBAGnB,WAAW,SAAA,UAAU,SAAS;;oBAE1B,IAAI,OAAO,WAAW,QAAQ,kBAAkB,QAAQ,eAAe;oBACvE,IAAI,OAAO,WAAW,QAAQ;;;oBAG9B,IAAI,OAAO,aAAa;;;oBAGxB,IAAI,CAAC,QAAQ,CAAC,MAAM;wBAChB;;;oBAGJ,KAAK,MAAM;wBACP,KAAK;wBACL,MAAM;wBACN,UAAU;;;oBAGd,WAAW,MAAM,MAAM;;gBAE3B,YAAY;gBACZ,OAAO;gBACP,aAAa,YAAY;gBACzB,cAAc,YAAY;gBAC1B,mBAAmB,YAAY;gBAC/B,qBAAqB,YAAY;eAClC;;YAEH,OAAO;WACR,UAAC,KAAQ;YACR,KAAK,MAAM;YACX,OAAO;WAEV,KAAK,MAAM,UAAC,KAAQ;YACjB,KAAK,MAAM;YACX,OAAO;;;;IAIf,SAAS,QAAQ,QAAQ;QACrB,OAAO,EAAC,WAAW,OAAO,QAAQ,OAAO;;;;IAI7C,SAAS,YAAY,OAAO,QAAQ,SAAS;;QAEzC,IAAI,CAAC,QAAQ,WAAW;YACpB,OAAO;;;QAGX,OAAO,MAAM;YACL,QAAQ;YACR,KAAG,KAAK,OAAO,SAAS,OAAO,SAAS;YACxC,iBAAiB;WAEpB,KAAK,UAAC,UAAa;YAChB,IAAI,OAAO;YACX,IAAI,OAAI,mBAAA,KAAG,SAAP,KAAmB,MAAI;gBAP3B,IAAI,2BAA2B,mBAAmB,gBAAgB,WAAW,OAQhE;;gBANb,OAAO,mBAAmB,KAAK,SAAS,MAAM,aAAa;oBACvD,OAAO,GAAG,QAAQ,YAAY,OAAO,YAAY;wBAC7C,KAAK;4BACD,4BAA4B;4BAC5B,oBAAoB;4BACpB,iBAAiB;4BACjB,YAAY,OAAO;4BACnB,YADQ,OAAO,KAAK,MAAK,OAAA;;wBAG7B,KAAK;4BACD,IAAI,4BAA4B,CAAC,QAAQ,UAAU,QAAQ,MAAM;gCAC7D,YAAY,OAAO;gCACnB;;;4BANH,MAAG,MAAA;4BAUJ,YAAY,OAAO;4BACnB,OAVE,KAAK;;wBAYX,KAAK;4BACD,4BAA4B;4BAC5B,YAAY,OAAO;4BACnB;;wBAEJ,KAAK;4BACD,YAAY,OAAO;4BACnB;;wBAEJ,KAAK;4BACD,YAAY,OAAO;4BACnB,YAAY,KAAK,YAAY,SAAS;4BACtC,oBAAoB;4BACpB,iBAAiB,YAAY;;wBAEjC,KAAK;4BACD,YAAY,OAAO;4BACnB,YAAY,OAAO;;4BAEnB,IAAI,CAAC,6BAA6B,UAAU,WAAW;gCACnD,UAAU;;;wBAGlB,KAAK;4BACD,YAAY,OAAO;;4BAEnB,IAAI,CAAC,mBAAmB;gCACpB,YAAY,OAAO;gCACnB;;;4BAGJ,MAAM;;wBAEV,KAAK;4BACD,OAAO,YAAY,OAAO;;wBAE9B,KAAK;4BACD,OAAO,YAAY,OAAO;;wBAE9B,KAAK;wBACL,KAAK;4BACD,OAAO,YAAY;;mBAvD3B,MAAI,MAAA,CAAA,CAAA,GAAA,IAAA,IAAA,KAAA,CAAA,KAAA,IAAA;;YA2DZ,IAAI,6BAA6B;YACjC,IAAI,qBAAqB;YACzB,IAAI,kBAAkB;;YAEtB,IAAI;gBA1DA,KAAA,IAAA,aAAgB,KAAK,SAAS,MAAK,OAAA,aAAA,QAAA,EAAA,6BAAA,CAAA,SAAA,WAAA,QAAA,OAAA,6BAAA,MAAE;oBA4DjC,IA5DK,MAAG,OAAA;;oBACR,KAAK,KAAK;;cA+DhB,OAAO,KAAK;gBACV,qBAAqB;gBACrB,kBAAkB;sBACZ;gBACN,IAAI;oBACA,IAAI,CAAC,8BAA8B,WAAW,WAAW;wBACrD,WAAW;;0BAET;oBACN,IAAI,oBAAoB;wBACpB,MAAM;;;;;YAvEd,OAAO;;;KAGlB","file":"ovpApp/services/vpns-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.service.vpns', [\n            'ovpApp.config',\n            'ovpApp.hnav.vpns',\n            'ovpApp.services.ovpStorage',\n            'ovpApp.legacy.deviceid'\n        ])\n        .constant('vpnsEventMap', {\n            'Alert': 'VpnsAlert'\n        })\n        .factory('easFlag', easFlag)\n        .factory('fipsService', fipsService)\n        .factory('vpnsService', vpnsService);\n\n    /* @ngInject */\n    function vpnsService($q, $log, config, $rootScope, fipsService, ovpStorage, storageKeys,\n        VpnsClient, vpnsEventMap, easFlag, deviceid) {\n        // Do not process VPNS message if it's not enabled\n        if (!easFlag.isEnabled) {\n            return {};\n        }\n        return fipsService.then((fips) => {\n            var client = new VpnsClient({\n                baseUri: config.vpns.baseUri || 'https://vpns-sys.timewarnercable.com',\n                deviceId: deviceid.get(),\n                filters: {\n                    Alert: {\n                        FIPS: fips\n                    }\n                },\n                msgTypes: ['Alert'],\n                onError: function (log, level='debug') {\n                    if ($log[level]) {\n                        $log[level](log);\n                    } else {\n                        $log.debug(log);\n                    }\n                },\n                onMessage: function (message) {\n                    // parse the envelope for expected `GenericeMessage` keys\n                    var type = message && message.GenericMessage && message.GenericMessage.type;\n                    var data = message && message.GenericMessage;\n\n                    // extract supported event name\n                    var name = vpnsEventMap[type];\n\n                    // bail out if we do not support the event or there is no data\n                    if (!name || !data) {\n                        return;\n                    }\n\n                    $log.debug({\n                        msg: 'VPNS notification',\n                        name: name,\n                        envelope: message\n                    });\n\n                    $rootScope.$emit(name, data);\n                },\n                pollOnInit: true,\n                store: ovpStorage,\n                clientIdKey: storageKeys.vpnsClientId,\n                sessionIdKey: storageKeys.vpnsSessionId,\n                availableTypesKey: storageKeys.vpnsAvailableTypes,\n                registrationDataKey: storageKeys.vpnsRegistrationData\n            }).start();\n\n            return client;\n        }, (err) => {\n            $log.error('Failed to load FIPS data');\n            return err;\n        })\n        .then(null, (err) => {\n            $log.error('Can not start VPNS client');\n            return err;\n        });\n    }\n\n    function easFlag(config) {\n        return {isEnabled: config.getBool(config.easEnabled)};\n    }\n\n    /* @ngInject */\n    function fipsService($http, config, easFlag) {\n        // Do not process VPNS message if it's not enabled\n        if (!easFlag.isEnabled) {\n            return {};\n        }\n\n        return $http({\n                method: 'GET',\n                url: `${config.piHost}${config.services.fips}`,\n                withCredentials: true\n            })\n            .then((response) => {\n                let fips = [];\n                let keys = function * (fips) {\n                    for (let fip of Object.keys(fips)) {\n                        yield fips[fip];\n                    }\n                };\n                for (let fip of keys(response.data)) {\n                    fips.push(fip);\n                }\n                return fips;\n            });\n    }\n}());\n"],"sourceRoot":"/source/"}