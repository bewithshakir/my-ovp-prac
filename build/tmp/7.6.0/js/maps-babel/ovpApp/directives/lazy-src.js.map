{"version":3,"sources":["ovpApp/directives/lazy-src.js"],"names":[],"mappings":"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","file":"ovpApp/directives/lazy-src.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.directives.lazySrc', [])\n        .directive('lazySrc', lazySrc)\n        .directive('scrollable', scrollable)\n        .factory('lazyImageLoader', lazyImageLoader);\n\n    /* @ngInject */\n    function scrollable($rootScope) {\n        // Usage:\n        // <div scrollable></div>\n        //\n        // Creates: causes events to be emitted when the element scrolls. This allows the lazy loader\n        //    to detect the scrolls, even though the window itself is not scrolling.\n        let directive = {\n            link: function (scope, element) {\n                element.on('scroll', () => $rootScope.$emit('scrollable:scrolled', element));\n\n                scope.$on('$destroy', () => element.off('scroll'));\n            }\n        };\n\n        return directive;\n    }\n\n    /* @ngInject */\n    function lazySrc(lazyImageLoader, $q) {\n        // Usage:\n        // <img lazy-src='foo.jpg'></img>\n        // <img lazy-src='foo.jpg' lazy-config='{fallback:\"bar.jpg\"}'></img>\n        // <img lazy-src='foo.jpg' lazy-config='{fallback:\"display:none\"}'></img>\n        //\n        // Creates: Image source will be set only when the image is in the viewport\n        //\n\n        let directive = {\n            link: link,\n            restrict: 'A'\n        };\n\n        return directive;\n\n        ////////////////\n\n        function link($scope, element, attributes) {\n            let image = new LazyImage(element, angular.fromJson(attributes.lazyConfig));\n            lazyImageLoader.addImage(image);\n\n            attributes.$observe('lazySrc', image.setSource);\n\n            $scope.$on('$destroy', () => lazyImageLoader.removeImage(image));\n        }\n\n        function LazyImage(element, config = {}) {\n            let imageLoadedDefer = $q.defer();\n            let fallback = config.fallback;\n            let source = null;\n            let isRendered = false;\n            let height = null;\n\n            element.on('error', onError);\n\n            return {\n                isVisible,\n                render,\n                setSource\n            };\n\n            ///////////////\n\n            function isVisible(topFoldOffset, bottomFoldOffset) {\n                if (height === null) {\n                    height = element.height();\n                }\n\n                let top = element.offset().top;\n                let bottom = (top + height);\n                return top <= bottomFoldOffset && bottom >= topFoldOffset;\n            }\n\n            function render() {\n                isRendered = true;\n                renderSource();\n                return imageLoadedDefer.promise;\n            }\n\n            function setSource(newSource) {\n                source = newSource;\n                if (isRendered && source) {\n                    renderSource();\n                }\n            }\n\n            function renderSource() {\n                if (source) {\n                    element[0].src = source;\n                }\n            }\n\n\n            function onError() {\n                if (fallback == 'display:none') {\n                    element[0].style.display = 'none';\n                    imageLoadedDefer.resolve();\n                } else if (fallback) {\n                    element[0].src = fallback;\n                    // Defer will resolve when the fallback image is loaded\n                }\n\n                element.off('error');\n            }\n        }\n    }\n\n    /* @ngInject */\n    function lazyImageLoader($window, $q, $timeout, $rootScope) {\n        let images = [];\n        let renderDelay = 100;\n        let preloadPx = 100;\n        let win = angular.element($window);\n        let isWatchingWindow = false;\n        let renderPromise;\n        let unsubscribe;\n\n        let service = {\n            addImage,\n            removeImage\n        };\n        return service;\n\n        ////////////////\n\n        function addImage(image) {\n            images[images.length] = image;\n            if (!renderPromise) {\n                startRenderTimer(0);\n            }\n            if (!isWatchingWindow) {\n                startWatching();\n            }\n        }\n\n        function removeImage(image) {\n            let index = images.indexOf(image);\n            if (index > -1) {\n                images.splice(index, 1);\n            }\n\n            if (images.length === 0) {\n                clearRenderTimer();\n                stopWatching();\n            }\n        }\n\n        function checkImages() {\n            let windowHeight = win.height();\n            let scrollTop = win.scrollTop();\n\n            let topFoldOffset = scrollTop;\n            let bottomFoldOffset = topFoldOffset + windowHeight + preloadPx;\n\n            let promises = images.filter(image => image.isVisible(topFoldOffset, bottomFoldOffset))\n                .map(image => image.render());\n\n            images = images.filter(image => !image.isVisible(topFoldOffset, bottomFoldOffset));\n\n            clearRenderTimer();\n\n            if (images.length === 0) {\n                stopWatching();\n            }\n\n            return $q.all(promises);\n        }\n\n        function clearRenderTimer() {\n            clearTimeout(renderPromise);\n            renderPromise = null;\n        }\n\n        function startRenderTimer(delay = renderDelay) {\n            renderPromise = $timeout(checkImages, delay);\n            return renderPromise;\n        }\n\n        function startWatching() {\n            isWatchingWindow = true;\n\n            win.on('resize', changed);\n            win.on('scroll', changed);\n\n            unsubscribe = $rootScope.$on('scrollable:scrolled', changed);\n        }\n\n        function stopWatching() {\n            isWatchingWindow = false;\n\n            win.off('resize', changed);\n            win.off('scroll', changed);\n\n            unsubscribe();\n        }\n\n        function changed() {\n            if (!renderPromise) {\n                startRenderTimer();\n            }\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}