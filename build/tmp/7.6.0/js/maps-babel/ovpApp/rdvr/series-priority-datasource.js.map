{"version":3,"sources":["ovpApp/rdvr/series-priority-datasource.js"],"names":[],"mappings":"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","file":"ovpApp/rdvr/series-priority-datasource.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.rdvr.datasource')\n        .factory('SeriesPriorityDatasource', factory);\n\n    /* @ngInject */\n    function factory(AbstractDatasource, $q, rx, rxhttp, config, rdvrCacheService,\n        recordingsListType) {\n        return class SeriesPriorityDatasource extends AbstractDatasource {\n            constructor(stb) {\n                super(stb, recordingsListType.PRIORITY, {\n                    data: []\n                });\n\n                if (this.stb && this.stb.dvr) {\n                    this.source = this.reset.map(() => true)\n                        .startWith(false)\n                        .flatMapLatest(force => {\n                            return this.fetch(force)\n                                .startWith(this.initialValue)\n                                .takeUntil(this.reset);\n                        })\n                        .do(result => this.saveToCache(result))\n                        .map(result => this.convertResultBeforeEmitting(result))\n                        .shareReplay(1);\n                } else {\n                    this.source = rx.Observable.never();\n                }\n            }\n\n            fetch(force) {\n                if (force) {\n                    this.clearCache();\n                }\n\n                return this.batchGetWithCache({\n                        getter: this.getOneSeriesPriorityBatch.bind(this),\n                        initialParams: 0\n                    })\n                    .catch(error => rx.Observable.just({data: [], error}))\n                    .scan(this.mergeBatches);\n            }\n\n            saveToCache(result) {\n                if (result === this.initialValue) {\n                    return;\n                }\n\n                rdvrCacheService.createNewCache(this.stb, recordingsListType.PRIORITY, {\n                    data: result.data,\n                    nextParams: result.nextParams\n                });\n            }\n\n            clearCache() {\n                rdvrCacheService.clearCache(recordingsListType.PRIORITY, this.stb);\n            }\n\n            getOneSeriesPriorityBatch(startIndex) {\n                const url = config.piHost + config.nrsApi + this.getDvrBase() +\n                    this.stb.macAddressNormalized + config.services.dvrSeriesPriorities;\n\n                const params = {\n                    startIndex: startIndex,\n                    maxEventCount: 100\n                };\n\n                return rxhttp.get(url, {params, withCredentials: true})\n                    .retry(2)\n                    .map(result => {\n                        const hasMore = result.data.totalCount > result.data.series.length + startIndex;\n                        if (hasMore && result.data.series.length > 0) {\n                            result.nextParams = result.data.series.length + startIndex;\n                        }\n\n                        result.data = result.data.series;\n\n                        return result;\n                    });\n            }\n\n            setSeriesPriorities(priorities) {\n                if (!this.stb || !this.stb.dvr) {\n                    return $q.resolve();\n                }\n\n                const baseUrl = config.piHost + config.nrsApi + this.getDvrBase();\n                const fullUrl = baseUrl + this.stb.macAddressNormalized + config.services.dvrSeriesPriorities;\n\n                return rxhttp.put(fullUrl, {priorities}, {withCredentials: true})\n                    .retry(2)\n                    .toPromise($q);\n            }\n        };\n    }\n})();\n"],"sourceRoot":"/source/"}