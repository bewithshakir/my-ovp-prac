{"version":3,"sources":["ovpApp/rdvr/scheduled/scheduled-item.js"],"names":[],"mappings":"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","file":"ovpApp/rdvr/scheduled/scheduled-item.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * rdvrScheduledItem\n     *\n     * Example Usage:\n     * <rdvr-schedule-list-item\n     *    recording=\"someInputObject\"\n     *    on-state-changed=\"someCallback\">\n     * </rdvr-schedule-list-item>\n     *\n     * Bindings:\n     *    recording: (object) the recording\n     *    state: (boolean) whether it is checked or not. defaults to false\n     *    onStateChanged: (function) callback when the selection state changes\n     */\n    angular.module('ovpApp.rdvr.scheduledItem', [\n            'ovpApp.messages',\n            'ovpApp.config',\n            'ovpApp.components.ovp.checkBox',\n            'ovpApp.components.modal',\n            'ovpApp.components.editConflict',\n            'ovpApp.services.errorCodes',\n            'ovpApp.product.productActionService'\n        ])\n        .component('rdvrScheduleListItem', {\n            bindings: {\n                recording: '=',\n                state: '<',\n                onStateChanged: '&',\n                day: '<',\n                cancelCallBack: '&'\n            },\n            templateUrl: '/js/ovpApp/rdvr/scheduled/scheduled-item.html',\n            controller: class RdvrScheduledItem {\n                /* @ngInject */\n                constructor($state, messages, rdvrCacheService, stbService, $rootScope, alert,\n                    modal, rdvrService, recordingsListType, errorCodesService, productService,\n                    productActionService, actionTypeMap) {\n                    angular.extend(this, {$state, messages, rdvrCacheService, stbService, $rootScope, alert,\n                        modal, rdvrService, recordingsListType, errorCodesService, productService,\n                        productActionService, actionTypeMap});\n                }\n\n                $onChanges(changes) {\n                    if (changes.recording) {\n                        this.startTime = this.stbService.formatUnix(this.recording.startTime, 'h:nn a');\n                    }\n\n                    if (changes.state && typeof this.state !== 'boolean') {\n                        this.state = false;\n                    }\n                }\n\n                click() {\n                    if (this.recording.conflicted) {\n                        this.showConflictPopup();\n                    } else {\n                        this.showProductPage();\n                    }\n                }\n\n                productActionClicked () {\n                    this.recording.cancelScheduledSelection = true;\n                    this.cancelCallBack();\n                }\n\n                stateToggled($event) {\n                    $event.stopPropagation();\n                    this.onStateChanged({recording: this.recording, state: this.state});\n                }\n\n                isMovie(recording = this.recording) {\n                    return this.rdvrService.isMovie(recording.tmsProgramId);\n                }\n\n                showConflictPopup(recording = this.recording) {\n                    let promise = this.stbService.getCurrentStb()\n                        .then(stb => this.rdvrService.getScheduledConflicts(stb, recording));\n\n                    this.$rootScope.$broadcast(\n                        'message:loading',\n                        promise,\n                        'DVR Scheduled'\n                    );\n\n                    promise.then(conflicts => {\n                        //its possible that another client updated the conflicts after user loaded\n                        //the page with results\n                        if (angular.isDefined(conflicts) && conflicts.length === 0) {\n                            this.rdvrCacheService.clearCache(this.recordingsListType.SCHEDULED, this.setTopBox);\n\n                            this.alert.open({\n                                message: this.errorCodesService.getMessageForCode('WCM-9000'),\n                                title: this.errorCodesService.getMessageForCode('WCM-1016'),\n                                buttonText: 'OK'\n                            });\n                        } else {\n                            this.modal.open({\n                                showCloseIcon: false,\n                                backdrop: 'static',\n                                component: 'editConflict',\n                                resolve: {\n                                    model: {\n                                        scheduledRecording: this.recording,\n                                        conflictingRecordings: conflicts\n                                    }\n                                }\n                            });\n                        }\n                    }, () => {\n                        this.alert.open({\n                            message: this.errorCodesService.getMessageForCode('WCM-9000'),\n                            title: this.errorCodesService.getMessageForCode('WCM-1016'),\n                            buttonText: 'OK'\n                        });\n                    });\n                }\n\n                showProductPage(recording = this.recording) {\n                    let isSeries = angular.isDefined(recording.tmsSeriesId);\n                    if (isSeries) {\n                        this.$state.go('product.series', {\n                            tmsSeriesId: recording.tmsSeriesId,\n                            serviceId: recording.mystroServiceId,\n                            airtime: recording.startTime,\n                            tmsProgramId: recording.tmsProgramId\n                        });\n                    } else {\n                        this.$state.go('product.event', {\n                            tmsId: recording.tmsProgramId,\n                            serviceId: recording.mystroServiceId,\n                            airtime: recording.startTime\n                        });\n                    }\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}