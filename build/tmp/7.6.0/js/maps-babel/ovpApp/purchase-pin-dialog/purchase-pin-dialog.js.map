{"version":3,"sources":["ovpApp/purchase-pin-dialog/purchase-pin-dialog.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;;IAEA,QAAQ,OAAO,4BAA4B,CACvC,8BACA,sCACA,8BACA,2BACA,2BACA,8BACA,oBAEH,QAAQ,0BAA0B,wBAClC,WAAW,+BAA+B;;;IAG3C,SAAS,uBAAuB,gBAAgB,oBAAoB,mBAAmB,UAAU;QAC7F,IAAI,SAAS;QACb,OAAO,eAAe,UAAU;YAC5B,iBAAiB,SAAS,kBAAkB;YAC5C,gBAAgB,SAAS,kBAAkB;YAC3C,YAAY;;QAEhB,OAAO,eAAe,YAAY;YAC9B,iBAAiB,SAAS,kBAAkB;YAC5C,gBAAgB,SAAS,kBAAkB;YAC3C,YAAY;;QAEhB,OAAO,eAAe,QAAQ;YAC1B,eAAe,SAAS,kBAAkB;YAC1C,kBAAkB,SAAS,kBAAkB;YAC7C,iBAAiB,SAAS,kBAAkB;YAC5C,gBAAgB,SAAS,kBAAkB;YAC3C,YAAY;;QAEhB,OAAO,eAAe,SAAS;YAC3B,eAAe,SAAS,kBAAkB;YAC1C,kBAAkB,SAAS,kBAAkB;YAC7C,iBAAiB,SAAS,kBAAkB;YAC5C,gBAAgB,SAAS,kBAAkB;YAC3C,YAAY;;QAEhB,OAAO;;;;IAIX,SAAS,4BAA4B,QAAQ,YAAY,IAAI,MAAM,OAAO,gBACtE,oBAAoB,wBAAwB,gBAAgB,mBAAmB;QAC/E,IAAI,YAAY;YACZ,eAAe;YACf,WAAW;;QAEf,OAAO,8BAA8B;QACrC,OAAO,0BAA0B;;QAEjC;;QAEA;;;;QAIA,SAAS,WAAW;YAChB,OAAO,iBAAiB;;;QAG5B,SAAS,6BAA6B;YAClC,OAAO,MAAM,KAAK;gBACd,aAAa;gBACb,WAAW;eACZ;;;QAGP,SAAS,8BAA8B;YACnC,YAAY;YACZ,eAAe;YACf,WAAW;;YAEX,OAAO,mBAAmB,WACrB,KAAK,UAAA,UAAY;gBACd,IAAI,UAAU;oBACV,IAAM,UAAU,uBAAuB,eAAe;oBACtD,OAAO,wBAAwB;uBAC5B;oBACH,OAAO,mBAAmB,mBACrB,KAAK,UAAA,kBAAoB;wBACtB,IAAI,kBAAkB;4BAClB,OAAO;+BACJ;4BACH,OAAO;;uBAGd,KAAK,UAAA,UAAQ;wBAXlB,OAWsB,mBAAmB;;;eAE9C,UAAA,OAAS;gBACR,KAAK,MAAM;gBACX,WAAW,WAAW,iBAAiB,kBAAkB,kBAAkB;gBAC3E,OAAO,GAAG,OAAO;;;;QAI7B,SAAS,wBAAwB,SAAS;YACtC,WAAW,MAAM,2BAA2B;gBACxC,SAAS;;;YAGb,OAAO,MAAM,KAAK;gBACd,WAAW;gBACX,SAAS,EAAC,SAAA;eACX,OAAO,KACN,UAAA,QAAU;gBACN,IAAI,WAAW,gBAAgB;oBAC3B,eAAe;;;gBAGnB,WAAW,MAAM,4BAA4B;oBACzC,cAAc;;eAGtB,UAAA,eAAiB;gBACb,WAAW,MAAM,4BAA4B;oBACzC,cAAc;;;gBAGlB,IAAI,kBAAkB,aAAa;oBAC/B,YAAY;oBACZ,OAAO,6BACF,KAAK,UAAA,UAAQ;wBAZlB,OAYsB,mBAAmB;;uBACtC;oBACH,OAAO,GAAG,OAAO;;;;;QAMjC,SAAS,mBAAmB,UAAU;YAClC,IAAM,UAAU,QAAQ,OACpB,IACA,uBAAuB,eAAe,OACtC,EAAC,UAAA;;YAGL,OAAO,MAAM,KAAK;gBACd,WAAW;gBACX,SAAS,EAAC,SAAA;eACX,OAAO,KACN,UAAA,QAAU;gBACN,IAAI,WAAW,YAAY;oBACvB,WAAW;;;;;KAM9B","file":"ovpApp/purchase-pin-dialog/purchase-pin-dialog.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.purchasePinDialog', [\n        'ovpApp.components.pinEntry',\n        'ovpApp.services.purchasePinService',\n        'ovpApp.components.authForm',\n        'ovpApp.components.modal',\n        'ajoslin.promise-tracker',\n        'ovpApp.services.errorCodes',\n        'ovpApp.messages'\n    ])\n    .factory('purchasePinPopUpConfig', purchasePinPopUpConfig)\n    .controller('PurchasePinDialogController', PurchasePinDialogController);\n\n    /* @ngInject */\n    function purchasePinPopUpConfig(PIN_ENTRY_TYPE, purchasePinService, errorCodesService, messages) {\n        let config = {};\n        config[PIN_ENTRY_TYPE.TOGGLE] = {\n            pinInstructions: messages.getMessageForCode('MSG-9053'),\n            pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n            pinService: purchasePinService\n        };\n        config[PIN_ENTRY_TYPE.VALIDATE] = {\n            pinInstructions: messages.getMessageForCode('MSG-9054'),\n            pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n            pinService: purchasePinService\n        };\n        config[PIN_ENTRY_TYPE.SAVE] = {\n            headerMessage: messages.getMessageForCode('MSG-9056'),\n            secondaryMessage: messages.getMessageForCode('MSG-9050'),\n            pinInstructions: messages.getMessageForCode('MSG-9058'),\n            pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n            pinService: purchasePinService\n        };\n        config[PIN_ENTRY_TYPE.RESET] = {\n            headerMessage: messages.getMessageForCode('MSG-9056'),\n            secondaryMessage: messages.getMessageForCode('MSG-9050'),\n            pinInstructions: messages.getMessageForCode('MSG-9057'),\n            pleaseEnterPin: messages.getMessageForCode('MSG-9044'),\n            pinService: purchasePinService\n        };\n        return config;\n    }\n\n    /* @ngInject */\n    function PurchasePinDialogController($scope, $rootScope, $q, $log, modal, PIN_ENTRY_TYPE,\n        purchasePinService, purchasePinPopUpConfig, promiseTracker, errorCodesService) {\n        let forgotPin = false,\n            pinValidated = false,\n            pinReset = false;\n\n        $scope.handlePurchasePINValidation = handlePurchasePINValidation;\n        $scope.showPinValidationDialog = showPinValidationDialog;\n\n        activate();\n\n        return;\n\n        ////////////\n\n        function activate() {\n            $scope.loadingTracker = promiseTracker();\n        }\n\n        function authenticateMasterPassword() {\n            return modal.open({\n                windowClass: 'productPopup-temp',\n                component: 'authForm'\n            }).result;\n        }\n\n        function handlePurchasePINValidation() {\n            forgotPin = false;\n            pinValidated = false;\n            pinReset = false;\n\n            return purchasePinService.isPINSet()\n                .then(pinIsSet => {\n                    if (pinIsSet) {\n                        const options = purchasePinPopUpConfig[PIN_ENTRY_TYPE.TOGGLE];\n                        return showPinValidationDialog(options);\n                    } else {\n                        return purchasePinService.isPrimaryAccount()\n                            .then(isPrimaryAccount => {\n                                if (isPrimaryAccount) {\n                                    return undefined;\n                                } else {\n                                    return authenticateMasterPassword();\n                                }\n                            })\n                            .then(password => showPinResetDialog(password));\n                    }\n                }, error => {\n                    $log.error(error);\n                    $rootScope.$broadcast('message:growl', errorCodesService.getMessageForCode('WGE-1001'));\n                    return $q.reject(error);\n                });\n        }\n\n        function showPinValidationDialog(options) {\n            $rootScope.$emit('Analytics:showPinDialog', {\n                context: 'tvodFlow'\n            });\n\n            return modal.open({\n                component: 'pinValidate',\n                resolve: {options}\n            }).result.then(\n                result => {\n                    if (result === 'pinValidated') {\n                        pinValidated = true;\n                    }\n\n                    $rootScope.$emit('Analytics:closePinDialog', {\n                        pinValidated: true\n                    });\n                },\n                dismissReason => {\n                    $rootScope.$emit('Analytics:closePinDialog', {\n                        pinValidated: false\n                    });\n\n                    if (dismissReason === 'forgotPIN') {\n                        forgotPin = true;\n                        return authenticateMasterPassword()\n                            .then(password => showPinResetDialog(password));\n                    } else {\n                        return $q.reject(dismissReason);\n                    }\n                }\n            );\n        }\n\n        function showPinResetDialog(password) {\n            const options = angular.extend(\n                {},\n                purchasePinPopUpConfig[PIN_ENTRY_TYPE.SAVE],\n                {password}\n            );\n\n            return modal.open({\n                component: 'pinReset',\n                resolve: {options}\n            }).result.then(\n                result => {\n                    if (result === 'pinReset') {\n                        pinReset = true;\n                    }\n                }\n            );\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}