{"version":3,"sources":["ovpApp/product/actions/product-button.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;;;;yIACT;IACA,QAAQ,OAAO,yBAAyB,CACpC,iBACA,8BAEH,UAAU,iBAAiB,eAC3B,UAAU,wBAAwB;;;IAGnC,SAAS,cAAc,QAAQ,QAAQ,QAAQ;QAC3C,OAAO;YACH,UAAU;YACV,OAAO;YACP,aAAa;YACb,MAAM,SAAS,oBAAoB,QAAQ,UAAU,OAAO;gBACxD,IAAI,MAAM,QAAQ;oBACd,OAAO,OAAO,OAAO,MAAM,QAAQ;;;gBAGvC,IAAI,MAAM,OAAO;oBACb,OAAO,QAAQ,OAAO,MAAM,OAAO;;;YAG3C,YAAY;;;;;IAKpB,SAAS,qBAAqB,QAAQ,QAAQ,QAAQ;;QAElD,OAAO;YACH,UAAU;YACV,OAAO;YACP,MAAM,SAAS,oBAAoB,QAAQ,UAAU,OAAO;gBACxD,IAAI,MAAM,QAAQ;oBACd,OAAO,OAAO,OAAO,MAAM,QAAQ;;;gBAGvC,IAAI,MAAM,OAAO;oBACb,OAAO,QAAQ,OAAO,MAAM,OAAO;;;gBAGvC,OAAO,OAAO,QAAQ,UAAA,IAAM;oBACxB,IAAI,EAAE,MAAM,OAAO,QAAQ,GAAG,cAAc;wBACxC,SAAS;2BACN;wBACH,SAAS;;;;YAIrB,YAAY;;;;;IAMpB,SAAS,yBAAyB,QAAQ,eAAe,sBAAsB,aAAa,YAAY,UAAU;;QAE9G,IAAI,WAAW;YACX,YAAY;;QAEhB,OAAO,iBAAiB;QACxB,OAAO,aAAa;;QAEpB,OAAO,OAAO,mBAAmB,UAAU,QAAQ;YAC/C,IAAI,UAAU,OAAO,YAAY;gBAC7B,OAAO,aAAa,QAAQ,OAAO,IAAI,UAAU,OAAO;;;;QAKhE,OAAO,IAAI,0BAA0B,UAAU,OAAO,OAAO,QAAQ,SAAS;YAC1E,OAAO,iBAAiB;YACxB,IAAI,SAAS;gBACT,QAAQ,KAAK,YAAM;oBACf,OAAO,iBAAiB;mBACzB,YAAM;oBACL,OAAO,iBAAiB;;mBAEzB;gBACH,SAAS,YAAM;oBACX,OAAO,iBAAiB;mBACzB;;;;QAIX,OAAO,UAAU,UAAU,YAAY;YACnC,OAAO,QAAQ,UAAU,cAAc,gBAAgB,cAAc,YAAY;;;QAGrF,OAAO,WAAW,UAAU,YAAY;YACpC,OAAO,QAAQ,UAAU,cAAc,gBAAgB,CAAC,CAAC,cAAc,YAAY;;;QAGvF,OAAO,oBAAoB,UAAU,QAAQ;YACzC,IAAI,QAAQ;gBACR,OAAO,qBAAqB,eAAe,OAAO,OAAO;;;;QAIjE,OAAO,wBAAwB,UAAU,QAAQ;YAC7C,IAAI,QAAQ;gBACR,OAAO,qBAAqB,mBAAmB,OAAO,OAAO;;;;QAIrE,OAAO,0CAA0C,UAAU,QAAQ;YAC/D,IAAI,cAAc,OAAO,KAAK,YAAY,6BAA6B;gBACnE,OAAO,qBAAqB,+BAA+B,OAAO,OAAO;mBACtE;;gBAEH,OAAO,OAAO,sBAAsB;;;;;QAK5C,OAAO,6BAA6B,UAAU,QAAQ;YAClD,IAAI,QAAQ;gBACR,OAAO,qBAAqB,wBAAwB,OAAO,OAAO;;;;QAI1E,OAAO,4BAA4B,UAAU,QAAQ;YACjD,IAAI,UAAU,qBAAqB,cAAc,OAAO,OAAO,SAAS;gBACpE,OAAO,MAAM,qBAAqB,cAAc,OAAO,OAAO;;;;QAItE,OAAO,KAAK,UAAU,MAAM;YACxB,OAAO,OAAI,YAAa,KAAK,aAAU,MAAI,KAAK,cAAgB;;;QAGpE,OAAO,uBAAuB,UAAU,MAAM,OAAO,KAAK;YACtD,qBAAqB,cAAc,MAAM,OAAO;;;KAIvD","file":"ovpApp/product/actions/product-button.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.product.button', [\n        'ovpApp.config',\n        'ovpApp.product.actionMenu'])\n\n    .directive('productButton', productButton)\n    .directive('productButtonActions', productButtonActions);\n\n    /* @ngInject */\n    function productButton(config, $state, $parse) {\n        return {\n            restrict: 'E',\n            scope: true,\n            templateUrl: '/js/ovpApp/product/actions/product-button.html',\n            link: function productButtonLinkFn($scope, $element, $attr) {\n                if ($attr.action) {\n                    $scope.item = $parse($attr.action)($scope);\n                }\n\n                if ($attr.asset) {\n                    $scope.asset = $parse($attr.asset)($scope);\n                }\n            },\n            controller: productActionsController\n        };\n    }\n\n    /* @ngInject */\n    function productButtonActions(config, $state, $parse) {\n        //Creates an attribute directive to append functionality to an existing element\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function productButtonLinkFn($scope, $element, $attr) {\n                if ($attr.action) {\n                    $scope.item = $parse($attr.action)($scope);\n                }\n\n                if ($attr.asset) {\n                    $scope.asset = $parse($attr.asset)($scope);\n                }\n\n                $scope.$watch('item', nv => {\n                    if (!(nv && $scope.isValid(nv.actionType))) {\n                        $element.hide();\n                    } else {\n                        $element.show();\n                    }\n                });\n            },\n            controller: productActionsController\n        };\n    }\n\n\n    /* @ngInject */\n    function productActionsController($scope, actionTypeMap, productActionService, $controller, $rootScope, $timeout) {\n\n        let defaults = {\n            imageWidth: 144\n        };\n        $scope.productLoading = false;\n        $scope.itemConfig = defaults;\n\n        $scope.$watch('containerConfig', function (newVal) {\n            if (newVal && newVal.itemConfig) {\n                $scope.itemConfig = angular.extend({}, defaults, newVal.itemConfig);\n            }\n        });\n\n\n        $scope.$on('product:update-started', function (event, asset, action, promise) {\n            $scope.productLoading = true;\n            if (promise) {\n                promise.then(() => {\n                    $scope.productLoading = false;\n                }, () => {\n                    $scope.productLoading = false;\n                });\n            } else {\n                $timeout(() => {\n                    $scope.productLoading = false;\n                }, 1000);\n            }\n        });\n\n        $scope.isValid = function (actionType) {\n            return angular.isDefined(actionTypeMap[actionType]) && actionTypeMap[actionType].id;\n        };\n\n        $scope.disabled = function (actionType) {\n            return angular.isDefined(actionTypeMap[actionType]) && !!actionTypeMap[actionType].disabled;\n        };\n\n        $scope.actionTypeToLabel = function (action) {\n            if (action) {\n                return productActionService.getActionLabel($scope.asset, action);\n            }\n        };\n\n        $scope.actionTypeToHoverText = function (action) {\n            if (action) {\n                return productActionService.getActionHoverText($scope.asset, action);\n            }\n        };\n\n        $scope.actionTypeToOtherWaysToWatchSrOnlyLabel = function (action) {\n            if (actionTypeMap[$scope.item.actionType].otherWaysToWatchSrOnlyLabel) {\n                return productActionService.getOtherWaysToWatchSrOnlyLabel($scope.asset, action);\n            } else {\n                //Default - fallback to hover text\n                return $scope.actionTypeToHoverText(action);\n            }\n        };\n\n        // Action label to use in more ways to watch\n        $scope.actionTypeToOtherWaysLabel = function (action) {\n            if (action) {\n                return productActionService.getOtherWaysActionLabel($scope.asset, action);\n            }\n        };\n\n        $scope.actionTypeToButtonGraphic = function (action) {\n            if (action && productActionService.getActionIcon($scope.asset, action)) {\n                return '#' + productActionService.getActionIcon($scope.asset, action);\n            }\n        };\n\n        $scope.id = function (item) {\n            return item ? `button-${item.actionType}-${item.streamIndex}` : '';\n        };\n\n        $scope.productActionClicked = function (item, asset, evt) {\n            productActionService.executeAction(item, asset, evt);\n        };\n    }\n\n})();\n"],"sourceRoot":"/source/"}