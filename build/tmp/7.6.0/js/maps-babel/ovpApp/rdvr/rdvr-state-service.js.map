{"version":3,"sources":["ovpApp/rdvr/rdvr-state-service.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,gCAAgC,CAC3C,8BACA,OAGH,QAAQ,oBAAoB;;;IAG7B,SAAS,iBAAiB,YAAY,YAAY,aAAa,IAAI;QAC/D,IAAI,YAAY;YAAG,MAAG;;QAEtB,IAAM,aAAa,WAAW,iBAAiB,KAAK;;QAEpD,WAAW,iBAAgB,MACnB,UAAA,QAAU;YACV,MAAM;YACN,YAAY;WAEf,QAAQ,UAAA,QAAU;YACf,OAAO,YAAY,uBAAuB,QACrC,UAAU,YAAW,SACf,YAAA;gBALX,OAKiB,GAAG,WAAW;;WAElC,UAAU,UAAA,QAAU;YACjB,YAAY,OAAO,KAAK,OAAO,UAAC,GAAG,GAAC;gBAJpC,OAIyC,EAAE,aAAa,IAAI,IAAI;eAAG;YACnE,IAAI,YAAY,IAAI;gBAChB,YAAY;mBACT,IAAI,YAAY,KAAK,CAAC,OAAO,YAAY;gBAC5C,YAAY,YAAY;;;;QAIpC,IAAM,SAAS,SAAT,SAAM;YAFR,OAEiB;;YACjB,SAAS,SAAT,SAAM;YAAN,OAAe,OAAO,IAAI,QAAQ;;YAClC,kBAAkB,SAAlB,kBAAe;YAEf,OAFwB,YAAY,IAAI,cAAc;;YACtD,SAAS,CACL;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS;YACT,WAAW;gBACP,YAAY;gBACZ,UAAU;gBACV,YAAY;;WAGpB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS;YACT,QAAQ,SAAA,SAAA;gBAEZ,OAFkB;;YACd,WAAW;gBACP,YAAY;gBACZ,UAAU;gBACV,YAAY;;WAGpB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS;YACT,WAAW;gBACP,YAAY;gBACZ,UAAU;gBACV,YAAY;;;;QAK5B,OAAO;YACH,QAAQ;YACR,UAAU,SAAA,SAAU,OAAO;gBACvB,OAAO,OAAO,KAAK,UAAC,GAAC;oBAEjB,OAFsB,EAAE,SAAS;;;YAEzC,oBAAoB,SAAA,qBAAY;gBAC5B,IAAI,QAAQ,OAAO,KAAK,UAAC,GAAM;oBAC3B,OAAO,EAAE;;gBAEb,OAAO;;;;KAIlB","file":"ovpApp/rdvr/rdvr-state-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.rdvr.rdvrStateService', [\n        'ovpApp.services.stbService',\n        'rx'\n    ])\n\n    .factory('rdvrStateService', rdvrStateService);\n\n    /* @ngInject */\n    function rdvrStateService($rootScope, stbService, rdvrService, rx) {\n        let conflicts = 0, stb;\n\n        const stbChanged = stbService.currentStbSource.skip(1);\n\n        stbService.currentStbSource\n            .do(newStb => {\n                stb = newStb;\n                conflicts = 0;\n            })\n            .flatMap(newStb => {\n                return rdvrService.getScheduledRecordings(newStb)\n                    .takeUntil(stbChanged)\n                    .catch(() => rx.Observable.empty());\n            })\n            .subscribe(result => {\n                conflicts = result.data.reduce((a, b) => b.conflicted ? a + 1 : a, 0);\n                if (conflicts > 99) {\n                    conflicts = '99+';\n                } else if (conflicts > 0 && !result.isComplete) {\n                    conflicts = conflicts + '+';\n                }\n            });\n\n        const always = () => true,\n            hasDvr = () => stb && stb.dvr === true,\n            hasRdvrVersion2 = () => hasDvr() && stb.rdvrVersion > 1,\n            states = [\n                {\n                    title: 'My Recordings',\n                    description: '',\n                    class: '',\n                    state: 'ovp.dvr.my-recordings',\n                    enabled: hasRdvrVersion2,\n                    analytics: {\n                        appSection: 'dvrManager',\n                        pageName: 'dvrRecordings',\n                        isLazyLoad: false\n                    }\n                },\n                {\n                    title: 'Scheduled',\n                    description: '',\n                    class: '',\n                    state: 'ovp.dvr.scheduled',\n                    enabled: always,\n                    badges: () => conflicts,\n                    analytics: {\n                        appSection: 'dvrManager',\n                        pageName: 'dvrScheduled',\n                        isLazyLoad: false\n                    }\n                },\n                {\n                    title: 'Series Priority',\n                    description: '',\n                    class: '',\n                    state: 'ovp.dvr.priority',\n                    enabled: hasRdvrVersion2,\n                    analytics: {\n                        appSection: 'dvrManager',\n                        pageName: 'dvrSeriesManager',\n                        isLazyLoad: true\n                    }\n                }\n            ];\n\n        return {\n            states: states,\n            getState: function (state) {\n                return states.find((s) => s.state == state);\n            },\n            nextAvailableState: function () {\n                let state = states.find((s) => {\n                    return s.enabled();\n                });\n                return state;\n            }\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}