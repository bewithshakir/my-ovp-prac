{"version":3,"sources":["ovpApp/search/search-ui-router.js"],"names":[],"mappings":"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","file":"ovpApp/search/search-ui-router.js","sourcesContent":["(function () {\n    'use strict';\n\n    /*\n     * Search ui-router config\n     */\n\n    angular.module('ovpApp.search', [\n        'ui.router',\n        'ovpApp.dataDelegate',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.search.header',\n        'ovpApp.search.input',\n        'ovpApp.search.personResults',\n        'ovpApp.search.quickResults',\n        'ovpApp.search.results',\n        'ovpApp.search.sportsResults',\n        'ovpApp.search.error',\n        'ovpApp.search.recentSearches',\n        'ovpApp.search.searchService',\n        'rx',\n        'ovpApp.services.rxUtils',\n        'ovpApp.config',\n        'ovpApp.directives.gridList',\n        'ovpApp.directives.focus',\n        'ovpApp.directives.fadeinImmediate',\n        'ovpApp.directives.fadeinOnload',\n        'ovpApp.directives.lazySrc',\n        'ovpApp.directives.trapFocus',\n        'ovpApp.services.bookmark',\n        'ovpApp.services.capabilitiesService'\n        ])\n    .run(run)\n    .factory('searchFocusIndex', () => {\n        let focusIndex = {\n            index: -1,\n            parentIndex: -1\n        };\n        return {\n            set: (i, p) => {\n                focusIndex.index = i;\n                focusIndex.parentIndex = p;\n            },\n            get: () => focusIndex,\n            reset: () => {\n                focusIndex.index = -1;\n                focusIndex.parentIndex = -1;\n            }\n        };\n    })\n    .config(config);\n\n    /* @ngInject */\n    function run($state, $rootScope, $timeout, ovpStorage, storageKeys, $location,\n      $q,$transitions, searchService) {\n\n        loadBackgroundStateOnDeepLink();\n\n        replaceStatesInHistory();\n\n        redirectIfOnlyOneResult();\n\n        redirectIfError();\n\n        function loadBackgroundStateOnDeepLink() {\n            // The menu is part of the 'ovp' state, so for search to look correct an ovp state must exist\n            //   inactive in the background. So on deep link, we need to manually load the ovp state\n            $transitions.onSuccess({to: 'search.**'}, function (transition) {\n                const inactives = transition.router.getPlugin('stickystates').inactives();\n                const ovp = inactives.find(state => state.name === 'ovp');\n                if (!ovp) {\n                    const dispose = $transitions.onSuccess({to: 'ovp.blankPage'}, function () {\n                        $state.go(transition.to(), transition.params('to'), {location: 'replace'});\n                        dispose();\n                    });\n\n                    $state.go('ovp.blankPage');\n                }\n            });\n        }\n\n        function replaceStatesInHistory() {\n            const searchStatesToReplace = ['search.recent', 'search.quickresults'];\n            $transitions.onSuccess({}, function (transition) {\n                if (searchStatesToReplace.indexOf(transition.from().name) >= 0) {\n                    $location.replace();\n                }\n            });\n        }\n\n        function redirectIfOnlyOneResult() {\n            $transitions.onEnter({\n                entering: state => state.name === 'search.quickresults' || state.name === 'search.results'\n            }, function (transition) {\n                // If the user came from product page, then redirecting to a product page could\n                // give the appearance that nothing happened.\n                if (searchService.doNotRedirect) {\n                    // It's a one-time thing\n                    searchService = false;\n                    return;\n                }\n\n                const results = transition.injector().get('results');\n\n                // Analytics event for when the user is navigating to the results\n                // for a recent search.\n                if (results && transition.targetState().params().isRecentSearch === true) {\n                    $rootScope.$emit('Analytics:search-recent-search', {results: results});\n                }\n\n                if (results && results.numResults == 1) {\n\n                    // Analytics: Emit select-item event because we're pre-selecting this one.\n                    $rootScope.$emit('Analytics:search-select-item', {\n                        asset: results.categories[0].results[0],\n                        triggeredBy: 'application'\n                    });\n\n                    let route = results.categories[0].results[0].clickRoute;\n                    if (route) {\n                        route[1] = route[1] || {};\n                        return transition.router.stateService.target(...route);\n                    }\n                }\n            });\n\n            $transitions.onEnter({\n                entering: state => {\n                    return ['search.person', 'search.sports', 'search.team'].indexOf(state.name) > -1;\n                }\n            }, function (transition) {\n                // If the user came from product page, then redirecting to a product page could\n                // give the appearance that nothing happened.\n                if (searchService.doNotRedirect) {\n                    // It's a one-time thing\n                    searchService = false;\n                    return;\n                }\n\n                const results = transition.injector().get('results');\n\n                // Analytics: Issue curated sub-search 'searched' event.\n                $rootScope.$emit('Analytics:sub-search', {\n                    searchText: transition.params('to').query,\n                    results: results\n                });\n\n                if (results.length == 1 && results[0].clickRoute) {\n\n                    // Analytics: Emit select-item event because we're pre-selecting this one.\n                    $rootScope.$emit('Analytics:search-select-item', {\n                        asset: results[0],\n                        triggeredBy: 'application'\n                    });\n\n                    let route = results[0].clickRoute;\n                    route[1] = route[1] || {};\n                    return transition.router.stateService.target(...route);\n                }\n            });\n        }\n\n        function redirectIfError() {\n            $transitions.onError({to: 'search.**'}, function (transition) {\n                const err = transition.error();\n                const SUPERSEDED = 2; // These numbers come from ui-router RejectType\n                const ABORTED = 3;\n                if (err && (err.silent === true || err.type === SUPERSEDED || err.type === ABORTED)) {\n                    return;\n                }\n\n                $state.go('search.error', {error: err});\n            });\n        }\n    }\n    /* @ngInject */\n    function config($stateProvider, CAPABILITIES) {\n        $stateProvider.state('search', {\n            abstract: 'true',\n            sticky: 'true',\n            url: '/search',\n            views: {\n                searchView: {\n                    template:\n                        `<div class=\"search-container\" ng-class='{\"invisible\": !$state.includes(\"search\")}' \n                            role=\"application\">\n                            <search-header></search-header>\n                            <ui-view></ui-view>\n                        </div>`\n                }\n            },\n            /* @ngInject */\n            onEnter: (BookmarkService) => {\n                BookmarkService.getBookmarks();\n            },\n            data: {\n                capability: CAPABILITIES.SEARCH,\n                bodyClass: 'search-active',\n                pageTitle: 'Search',\n                hideMenu: true,\n                hideSubMenu: true\n            }\n        });\n\n        $stateProvider.state('search.error', {\n            component: 'searchError',\n            params: {\n                error: null\n            },\n            resolve: {\n                /* @ngInject */\n                error: function ($stateParams) {\n                    return $stateParams.error;\n                }\n            }\n        });\n\n\n        $stateProvider.state('search.blank', {});\n\n        $stateProvider.state('search.recent', {\n            url: '',\n            component: 'recentSearches'\n        });\n\n        $stateProvider.state('search.quickresults', {\n            component: 'quickSearchResults',\n            params: {\n                results: null,\n                query: null\n            },\n            resolve: {\n                /* @ngInject */\n                query: function ($stateParams) {\n                    return $stateParams.query;\n                },\n                results: getComponentResults\n            }\n        });\n\n        $stateProvider.state('search.results', {\n            url: '/result/:query?focusOnLoad',\n            component: 'searchResults',\n            resolve: {\n                /* @ngInject */\n                query: function ($stateParams) {\n                    return $stateParams.query;\n                },\n                results: getComponentResults\n            }\n        });\n\n        $stateProvider.state('search.person', {\n            url: '/result/person/:query?tmsPersonId&tmsId&role&{uri:uri}',\n            templateUrl: '/js/ovpApp/search/result-pages/person-search-results.html',\n            controller: 'PersonResultsController',\n            controllerAs: 'vm',\n            resolve: {\n                /* @ngInject */\n                query: function ($stateParams) {\n                    return $stateParams.query;\n                },\n                results: subResultBuilder('person')\n            }\n        });\n\n        $stateProvider.state('search.sports', {\n            url: '/result/sports/:query?{uri:uri}',\n            component: 'sportsSearchResults',\n            resolve: {\n                /* @ngInject */\n                query: function ($stateParams) {\n                    return $stateParams.query;\n                },\n                results: subResultBuilder('sports')\n            }\n        });\n\n        $stateProvider.state('search.team', {\n            url: '/result/team/:query?{uri:uri}',\n            component: 'sportsSearchResults',\n            resolve: {\n                /* @ngInject */\n                query: function ($stateParams) {\n                    return $stateParams.query;\n                },\n                results: subResultBuilder('team')\n            }\n        });\n\n        function subResultBuilder(category) {\n            /* @ngInject */\n            function inner(searchService, $state, $stateParams, $q, $rootScope, delegateFactory) {\n                let results;\n                if ($stateParams.uri) {\n                    // We know the uri from a previous search\n                    results = searchService.getSubResultsByUri($stateParams.uri)\n                        .retry(3)\n                        .toPromise($q);\n                } else if ($stateParams.tmsPersonId && $stateParams.tmsId && $stateParams.role) {\n                    // We're searching from the context of a specific asset\n                    let searchFxn = $stateParams.role == 'director' ?\n                        searchService.getDirectorResults : searchService.getActorResults;\n                    results = searchFxn($stateParams.tmsPersonId, $stateParams.tmsId)\n                        .retry(3)\n                        .toPromise($q);\n                } else {\n                    // All we have is the string to work with. This may happen when the user deep links in\n                    results = searchService.getSubResultsByQueryAndCategory($stateParams.query, category)\n                        .retry(3)\n                        .toPromise($q);\n                }\n\n                const promise = results.then(results => {\n                    let delegates = (results && results.results) ?\n                        results.results.map(delegateFactory.createInstance) : [];\n\n                    return delegates;\n                });\n\n                $rootScope.$broadcast(\n                    'message:loading',\n                    promise,\n                    undefined,\n                    'Search results'\n                );\n\n                return promise;\n            }\n\n            return inner;\n        }\n\n        /* @ngInject */\n        function getComponentResults(searchService, $stateParams, $q, $rootScope, delegateFactory) {\n            $rootScope.$emit('Analytics:issue-search');\n            const promise = searchService.getComponentResults($stateParams.query)\n                .retry(3)\n                .toPromise($q)\n                .then(delegateFactory.createInstance);\n\n            $rootScope.$broadcast(\n                'message:loading',\n                promise,\n                undefined,\n                'Search Results'\n            );\n\n            return promise;\n\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}