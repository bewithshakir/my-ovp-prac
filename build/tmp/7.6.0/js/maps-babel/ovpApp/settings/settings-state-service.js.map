{"version":3,"sources":["ovpApp/settings/settings-state-service.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;;yGACT;IACA,QAAQ,OAAO,wCAAwC,CACnD,kCACA,8BACA,kBAGH,QAAQ,wBAAwB;;;IAGjC,SAAS,qBAAqB,YAAY,cAAc,QAAQ,IAAI,gBAAgB;QAChF,IAAI,WAAW;YACX,UAAU;YACV,mBAAmB;YACnB,yBAAyB;YACzB,qBAAqB;YACrB,gBAAgB;YAChB,eAAY;;QAEhB,IAAM,SAAS,CACP;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS,SAAA,UAAA;gBAJb,OAImB;;YACf,aAAa;YACb,MAAM,OAAO;WAEjB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS,SAAA,UAAA;gBAHb,OAGmB,WAAW,CAAC;;YAC3B,aAAa;YACb,MAAM,OAAO;WAEjB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS,SAAA,UAAA;gBAFb,OAEmB,CAAC,eAAe;;YAC/B,aAAa;YACb,MAAM,OAAO;WAEjB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS,SAAA,UAAA;gBADb,OACmB;;YACf,aAAa;YACb,MAAM,OAAO;WAEjB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,aAAa;YACb,SAAS,SAAA,UAAA;gBAAb,OAAmB;;YACf,MAAM,OAAO;WAEjB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS,SAAA,UAAA;gBACb,OADqB,CAAC,0BAA0B,sBAAsB,WAAY;;YAC9E,aAAa;YACb,MAAM,OAAO;WAEjB;YACI,OAAO;YACP,aAAa;YACb,SAAO;YACP,OAAO;YACP,SAAS,SAAA,UAAA;gBAEb,OAFoB,CAAE,0BAA0B,sBAAsB,WAAY;;YAC9E,aAAa;YACb,MAAM,OAAO;;;QAIzB,eAAe,GAAG,IAAI;YACd,UAAU,eAAe,cAAc,aAAa;YACpD,SAAS,WAAW;YACpB,SAAS,eAAe;YACxB,kBAAkB,eAAe,cAAc,aAAa;YAC5D,yBAAyB,eAAe;WACzC,KAAK,UAAA,QAAU;YACd,WAAW,OAAO;YAClB,UAAU,OAAO,WAAW,OAAO,QAAQ,SAAS;YACpD,gBAAgB,OAAO;YACvB,mBAAmB,OAAO;YAC1B,yBAAyB,OAAO;YAChC,IAAI,WAAW,OAAO,QAAQ,KAAK,UAAA,KAAG;gBAGtC,OAH0C,IAAI,eAAe;gBAAQ;gBACjE,qBAAqB,OAAO,QAAQ,OAAO;;WAEhD,YAAM;YACL,WAAW;YACX,UAAU;YACV,gBAAgB;;;QAGxB,OAAO;YACH,QAAQ;YACR,WAAW,SAAA,YAAY;gBACnB,OAAO,GAAG,KAAK,cAAc,KAAK,YAAM;oBACpC,OAAO;;;YAGf,UAAU,SAAA,SAAU,OAAO;gBACvB,OAAO,GAAG,KAAK,cAAc,KAAK,YAAM;oBACpC,OAAO,OAAO,KAAK,UAAC,GAAC;wBAKjB,OALsB,EAAE,SAAS;;;;YAG7C,kBAAkB,SAAA,mBAAY;gBAC1B,IAAM,aAAa,OAAO,KAAK,UAAA,OAAK;oBAOhC,OAPoC,MAAM;;gBAC9C,OAAO,cAAc,EAAC,OAAO;;;;KAKxC","file":"ovpApp/settings/settings-state-service.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.settings.settingsStateService', [\n        'ovpApp.services.profileService',\n        'ovpApp.services.stbService',\n        'ovpApp.config'\n    ])\n\n    .factory('settingsStateService', settingsStateService);\n\n    /* @ngInject */\n    function settingsStateService(stbService, CAPABILITIES, config, $q, profileService) {\n        let hasGuide = true,\n            hasStbs = true,\n            hasAccessibility = true,\n            isAccessibilityEnabled = false,\n            stbSettingsEnabled = false,\n            isTVODEnabled = false,\n            statePromise;\n\n        const states = [\n                {\n                    title: 'Favorites',\n                    description: 'Update your favorite channels',\n                    class: 'settingsFavorites',\n                    state: 'ovp.settings.favorites',\n                    enabled: () => hasGuide,\n                    displayType: 'grid',\n                    type: config.globalSettings\n                },\n                {\n                    title: 'Devices',\n                    description: 'Update your device settings',\n                    class: 'settingsDevices',\n                    state: 'ovp.settings.devices',\n                    enabled: () => hasStbs && !isAccessibilityEnabled,\n                    displayType: 'list',\n                    type: config.globalSettings\n                },\n                {\n                    title: 'Parental Controls',\n                    description: 'Update your parental controls',\n                    class: 'settingsParental',\n                    state: 'ovp.settings.parentalControls',\n                    enabled: () => !profileService.isSpecUOrBulkMDU(),\n                    displayType: 'plain',\n                    type: config.websiteSettings\n                },\n                {\n                    title: 'Purchase PIN',\n                    description: 'Update your purchase pin',\n                    class: 'settingsParental',\n                    state: 'ovp.settings.purchasePin',\n                    enabled: () => isTVODEnabled,\n                    displayType: 'plain',\n                    type: config.websiteSettings\n                },\n                {\n                    title: 'Accessibility',\n                    description: 'Update your accessibility settings',\n                    class: 'settingsAccessibility',\n                    state: 'ovp.settings.accessibility',\n                    displayType: 'plain',\n                    enabled: () => hasAccessibility,\n                    type: config.websiteSettings\n                },\n                {\n                    title: 'Parental Controls',\n                    description: 'Update your parental controls',\n                    class: 'settingsParental',\n                    state: 'ovp.settings.stb.parentalControls',\n                    enabled: () => ((!isAccessibilityEnabled && stbSettingsEnabled && hasStbs) || false),\n                    displayType: 'plain',\n                    type: config.stbSettings\n                },\n                {\n                    title: 'Purchase PIN',\n                    description: 'Update your purchase pin',\n                    class: 'settingsParental',\n                    state: 'ovp.settings.stb.purchasePin',\n                    enabled: () => ((!isAccessibilityEnabled && stbSettingsEnabled && hasStbs) || false),\n                    displayType: 'plain',\n                    type: config.stbSettings\n                }\n            ];\n\n        statePromise = $q.all({\n                guideRes: profileService.hasCapability(CAPABILITIES.GUIDE),\n                stbsRes: stbService.getSTBs(),\n                tvodRes: profileService.isTVODRentEnabled(),\n                accessibilityRes: profileService.hasCapability(CAPABILITIES.ACCESSIBILITY),\n                accessibilityEnabledRes: profileService.isAccessibilityEnabled()\n            }).then(result => {\n                hasGuide = result.guideRes;\n                hasStbs = result.stbsRes && result.stbsRes.length > 0;\n                isTVODEnabled = result.tvodRes;\n                hasAccessibility = result.accessibilityRes;\n                isAccessibilityEnabled = result.accessibilityEnabledRes;\n                if (hasStbs && result.stbsRes.some(stb => stb.clientType === 'ODN')) {\n                    stbSettingsEnabled = config.getBool(config.stbSettingsEnabled);\n                }\n            }, () => {\n                hasGuide = false;\n                hasStbs = false;\n                isTVODEnabled = false;\n            });\n\n        return {\n            states: states,\n            getStates: function () {\n                return $q.when(statePromise).then(() => {\n                    return states;\n                });\n            },\n            getState: function (state) {\n                return $q.when(statePromise).then(() => {\n                    return states.find((s) => s.state == state);\n                });\n            },\n            getFallbackState: function () {\n                const firstState = states.find(state => state.enabled());\n                return firstState || {state: 'ovp.livetv'};\n            }\n        };\n    }\n\n}());\n"],"sourceRoot":"/source/"}