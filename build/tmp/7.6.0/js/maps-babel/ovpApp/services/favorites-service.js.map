{"version":3,"sources":["ovpApp/services/favorites-service.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;IAEA,QAAQ,OAAO,oCAAoC,CAC/C,iBACA,gBACA,kCACA,yCACH,QAAQ,oBAAoB;;;IAG7B,SAAS,iBAAiB,OAAO,IAAI,cAAc,QAAQ,YAAY,cAAc,gBAAgB;QACjG,IAAI,YAAY;QAChB,IAAI,UAAU,eAAe;QAC7B,IAAI,SAAS,OAAO;YAChB,UAAU,OAAO;YACjB,WAAW,OAAO;;QAEtB,IAAI,UAAU;YACV,sBAAA;YACA,cAAA;YACA,YAAA;YACA,gBAAA;;;QAGJ,OAAO;;;;QAIP,SAAS,uBAAuB;YAC5B,OAAO,MAAM,IAAI,SAAS,UAAU,SAAS,KAAK;gBAC9C,iBAAiB;eAClB,KAAK,UAAA,UAAY;gBAChB,YAAY,SAAS;;;;;gBAKrB,OAAO,aAAa,mBAAmB,KAAM,UAAU,UAAU;oBAC7D,IAAI,mBAAmB;oBACvB,UAAU,QAAQ,UAAU,SAAS;wBACjC,KAAK,IAAI,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;4BACtC,IAAI,gBAAgB,SAAS,SAAS,KAAK;;gCAEvC,IAAI,QAAQ,iBAAiB,UAAU,UAAC,MAAS;oCAC7C,OAAO,gBAAgB,SAAS;;gCAEpC,IAAI,UAAU,CAAC,GAAG;oCACd,iBAAiB,KAAK,SAAS;;gCAEnC;;;;oBAIZ,YAAY;oBACZ,OAAO;;;;;;;;;QASnB,SAAS,gBAAgB,OAAO,OAAO;YACnC,OAAO,UACF,MAAM,iBAAiB,MAAM,eAAiB,MAAM,kBAAkB,MAAM;;;QAGrF,SAAS,eAAe;YACpB,OAAO;;;QAGX,SAAS,WAAW,SAAS;YACzB,OAAO,UAAU,KAAK,UAAU,MAAM;gBAClC,OAAO,gBAAgB,SAAS;;;;QAIxC,SAAS,gBAAgB,SAAS;YAC9B,OAAO,UAAU,UAAU,UAAU,MAAM;gBACvC,OAAO,gBAAgB,SAAS;;;;QAIxC,SAAS,YAAY,SAAS;YAC1B,IAAI,OAAO;YACX,UAAU,KAAK;YACf,IAAI,CAAC,SAAS;gBACV,KAAK,gBAAgB,QAAQ;;YAEjC,KAAK,eAAe,QAAQ;YAC5B,OAAO,MAAM;gBACT,QAAQ;gBACR,KAAK,SAAS,UAAU,SAAS;gBACjC,SAAS;oBACL,gBAAgB;;gBAEpB,MAAM,KAAK,UAAU;gBACrB,iBAAiB;eACnB,SAAO,UAAA,OAAS;;gBAEd,IAAI,QAAQ,gBAAgB;gBAC5B,IAAI,QAAQ,CAAC,GAAG;oBACZ,UAAU,OAAO,OAAO;;gBAE5B,OAAO,GAAG,OAAO;;;;QAIzB,SAAS,eAAe,SAAS;YAC7B,IAAI,OAAO;YACX,IAAI,QAAQ,gBAAgB;YAC5B,IAAI,CAAC,SAAS;gBACV,KAAK,gBAAgB,QAAQ;;YAEjC,KAAK,eAAe,QAAQ;YAC5B,IAAI,QAAQ,CAAC,GAAG;gBACZ,UAAU,OAAO,OAAO;gBACxB,OAAO,MAAM;oBACT,QAAQ;oBACR,KAAK,SAAS,UAAU,SAAS;oBACjC,SAAS;wBACL,gBAAgB;;oBAEpB,MAAM,KAAK,UAAU;oBACrB,iBAAiB;mBACnB,SAAO,UAAA,OAAS;;oBAEd,UAAU,KAAK;oBACf,OAAO,GAAG,OAAO;;mBAElB;gBACH,OAAO,GAAG;;;;QAIlB,SAAS,eAAe,SAAS;YAC7B,IAAI,UAAO;YACX,IAAI,sBAAsB,WAAW;YACrC,IAAI,qBAAqB;gBACrB,UAAU,eAAe;mBACtB;gBACH,UAAU,YAAY;;;;YAI1B,WAAW,MAAM,oBAAoB;gBACjC,eAAe;gBACf,aAAa,CAAC;;YAElB,OAAO;;;KAGd","file":"ovpApp/services/favorites-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.favoritesService', [\n        'ovpApp.config',\n        'ovpApp.guide',\n        'ovpApp.services.profileService',\n        'ovpApp.components.error.ServiceError'])\n    .factory('favoritesService', favoritesService);\n\n    /* @ngInject */\n    function favoritesService($http, $q, ServiceError, config, $rootScope, GuideService, profileService) {\n        let favorites = [];\n        let isSpecU = profileService.isSpecU();\n        let piHost = config.piHost,\n            smartTv = config.smartTvApi,\n            favorite = config.favoritesService;\n\n        let service = {\n            syncFavoriteChannels,\n            getFavorites,\n            isFavorite,\n            toggleFavorite\n        };\n\n        return service;\n\n        /////////////////\n\n        function syncFavoriteChannels() {\n            return $http.get(piHost + smartTv + favorite.get, {\n                withCredentials: true\n            }).then(response => {\n                favorites = response.data;\n                // This is to fix the server issue where we are getting\n                // the favorites channels (ipvs/api/smarttv/favorites/channels/v1)\n                // that do not exist in the channel list of particular account. So we\n                // are removing the channels from the favorites that are not in our channel list.\n                return GuideService.fetchChannelList().then (function (channels) {\n                    let channelFavorites = [];\n                    favorites.forEach(function (channel) {\n                        for (var i = 0; i < channels.length; i++) {\n                            if (compareChannels(channel, channels[i])) {\n                                // Remove duplicate\n                                let index = channelFavorites.findIndex((chan) => {\n                                    return compareChannels(channel, chan);\n                                });\n                                if (index === -1) {\n                                    channelFavorites.push(channels[i]);\n                                }\n                                return;\n                            }\n                        }\n                    });\n                    favorites = channelFavorites;\n                    return favorites;\n                });\n            });\n        }\n\n        /**\n         * Private method\n         * @return {boolean} - ture if same channel number / ncsServiceId\n         */\n        function compareChannels(chnl1, chnl2) {\n            return isSpecU ?\n                (chnl1.ncsServiceId === chnl2.ncsServiceId) : (chnl1.channelNumber === chnl2.channelNumber);\n        }\n\n        function getFavorites() {\n            return favorites;\n        }\n\n        function isFavorite(channel) {\n            return favorites.some(function (chan) {\n                return compareChannels(channel, chan);\n            });\n        }\n\n        function indexOfFavorite(channel) {\n            return favorites.findIndex(function (chan) {\n                return compareChannels(channel, chan);\n            });\n        }\n\n        function addFavorite(channel) {\n            let data = {};\n            favorites.push(channel); // Immediately update list\n            if (!isSpecU) {\n                data.channelNumber = channel.channelNumber;\n            }\n            data.ncsServiceId = channel.ncsServiceId;\n            return $http({\n                method: 'POST',\n                url: piHost + smartTv + favorite.add,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data),\n                withCredentials: true\n            }).catch(error => {\n                // Revert the changes on failure\n                let index = indexOfFavorite(channel);\n                if (index > -1) {\n                    favorites.splice(index, 1);\n                }\n                return $q.reject(error);\n            });\n        }\n\n        function removeFavorite(channel) {\n            let data = {};\n            let index = indexOfFavorite(channel);\n            if (!isSpecU) {\n                data.channelNumber = channel.channelNumber;\n            }\n            data.ncsServiceId = channel.ncsServiceId;\n            if (index > -1) {\n                favorites.splice(index, 1); // Immediately update list\n                return $http({\n                    method: 'POST',\n                    url: piHost + smartTv + favorite.remove,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    data: JSON.stringify(data),\n                    withCredentials: true\n                }).catch(error => {\n                    // Revert the changes on failure\n                    favorites.push(channel);\n                    return $q.reject(error);\n                });\n            } else {\n                return $q.reject();\n            }\n        }\n\n        function toggleFavorite(channel) {\n            let promise;\n            let isCurrentlyFavorite = isFavorite(channel);\n            if (isCurrentlyFavorite) {\n                promise = removeFavorite(channel);\n            } else {\n                promise = addFavorite(channel);\n            }\n\n            // Analytics: Toggle favorite\n            $rootScope.$emit('Analytics:select', {\n                operationType: 'favoriteToggle',\n                toggleState: !isCurrentlyFavorite\n            });\n            return promise;\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}