{"version":3,"sources":["ovpApp/twctv/twctv-ui-router.js"],"names":[],"mappings":"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","file":"ovpApp/twctv/twctv-ui-router.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.twctv.router', [\n        'ovpApp.services.locationService',\n        'ui.router',\n        'ovpApp.eas',\n        'ovpApp.services.profileService',\n        'ovpApp.services.streamPlusService',\n        'ovpApp.legacy.httpUtil',\n        'ovpApp.components.alert',\n        'ovpApp.messages',\n        'ovpApp.services.bookmark',\n        'ovpApp.services.homePage',\n        'ovpApp.services.nns',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.services.errorCodes',\n        'ovpApp.store',\n        'ovpApp.playerControls',\n        'ovpApp.components.environmentDropdown',\n        'ovpApp.components.mobileNav',\n        'ovpApp.components.header',\n        'ovpApp.guide',\n        'ovpApp.service.lineup',\n        'ovpApp.connectivityAlert',\n        'ovpApp.components.specu.campusWifiError',\n        'ovpApp.legacy.stringUtil',\n        'ovpApp.services.errorCodes',\n        'ovpApp.specuWelcome',\n        'ovpApp.config',\n        'ovpApp.components.mobile.login',\n        'ovpApp.oauth',\n        'ovpApp.components.error.sadTv'\n    ])\n    .run(run)\n    .config(config);\n\n\n\n    /* @ngInject */\n    function run($window, $document, $urlRouter, $state, rx,\n              $rootScope, $q, $log, $stateParams, $transitions,\n              profileService, httpUtil, alert, $location, loginService,\n              messages, ovpStorage, storageKeys, OauthService, $timeout,\n              stringUtil, streamPlusService, config, locationService,\n              errorCodesService) {\n\n        var deferred = $q.defer();\n        var ignoreMobileCheck = ovpStorage.getItem(storageKeys.ignoreMobileCheck) || false;\n\n        $rootScope.hideSiteFooterRegex = /(play|livetv|product|search)/;\n\n        deferred.promise.then(function () {\n            $urlRouter.sync();\n        });\n\n        $rootScope.$on('message:loading', (event, promise, message, page = 'content') => {\n            $rootScope.loadingMessage = 'Loading ' + page;\n            $q.when(promise, () => {\n                $timeout(() => {\n                    $rootScope.loadingMessage = 'loading ' + page + ' complete';\n                });\n            });\n        });\n\n        $state.defaultErrorHandler(function (err) {\n            const SUPERSEDED = 2; // These numbers come from ui-router RejectType\n            const ABORTED = 3;\n            if (err && (err.silent === true || err.type === SUPERSEDED || err.type === ABORTED)) {\n                return;\n            }\n\n            if (err && err.error === 'serviceErrorReload') {\n                alert.open({\n                    message: errorCodesService.getMessageForCode('WFE-1113'),\n                    buttonText: 'RELOAD'\n                }).result.finally(function () {\n                    //Force a reload and reset the path to the root\n                    $window.location = '/';\n                });\n            } else {\n                alert.open(errorCodesService.getAlertForCode('TMP-9038'));\n            }\n            $log.error(err);\n            $rootScope.$broadcast('message:loading:cancel');\n        });\n\n        $transitions.onSuccess({}, function (transition) {\n            const toState = transition.to();\n            const fromState = transition.from();\n            const fromParams = transition.params('from');\n\n            if (fromState.name !== 'ovp.blankPage') {\n                $state.previous = fromState;\n                $state.previous.fromParams = fromParams;\n            }\n\n            if (toState.data && toState.data.subheader) {\n                $rootScope.subheader = toState.data.subheader;\n            } // Otherwise, keep whatever it was previously\n\n            $rootScope.bodyClass = toState.data && toState.data.bodyClass || '';\n            updatePageTitle(transition);\n\n            // If page was merely inactivated and reactivated, indicate the page\n            // change has completed.\n            if (transition.wasReactivated) {\n                $rootScope.$broadcast('pageChangeComplete', transition.to());\n            } else {\n                // Analytics for a non-reactivated pageChange.\n                let analytics = transition.to().analytics;\n                if (analytics) {\n                    if (analytics.isLazyLoad) {\n                        $rootScope.$emit('Analytics:partial-render');\n                    } else {\n                        $rootScope.$emit('Analytics:pageChangeComplete');\n                    }\n                }\n            }\n        });\n\n        let pageTitleSubscription;\n\n        function applyTitle(title) {\n            $document[0].title = `${stringUtil.formatPageTitle(title)}| Spectrum TV`;\n        }\n\n        function updatePageTitle(transition) {\n            if (pageTitleSubscription) {\n                pageTitleSubscription.dispose();\n                pageTitleSubscription = undefined;\n            }\n\n            const data = transition.to().data;\n\n            if (data && data.pageTitle) {\n                let pageTitle;\n                if (angular.isFunction(data.pageTitle)) {\n                    pageTitle = data.pageTitle(transition);\n                } else {\n                    pageTitle = data.pageTitle;\n                }\n\n                if (pageTitle instanceof rx.Observable) {\n                    pageTitleSubscription = pageTitle.subscribe(applyTitle);\n                } else {\n                    $q.when(pageTitle, applyTitle);\n                }\n            } else {\n                $document[0].title = 'Spectrum TV';\n            }\n        }\n\n        // TODO: Reload `ovp.ondemand.majorCategory` for network subcategory and\n        // pass page title as state parameter instead of ovp:setPageTitle event\n        // to update the page title for network subcategory\n        $rootScope.$on('ovp:setPageTitle', (event, data) => {\n            $document[0].title = `${data}| Spectrum TV`;\n        });\n\n        $rootScope.$on('goToDesktopVersionClicked', () => {\n            ignoreMobileCheck = true;\n            ovpStorage.setItem(storageKeys.ignoreMobileCheck, true);\n        });\n\n        $transitions.onBefore({}, function (transition) {\n            // In some cases, when we route to a recently-visited page, the app\n            // can simply reactivate the page instead of reinitializing it.\n            // This is fast, but means we now need to use this mechanism to\n            // indicate the page is already loaded.\n            const stickyStates = transition.router.getPlugin('stickystates');\n            const inactives = stickyStates.inactives();\n            let inactiveState = inactives.find(state => state.name === transition.to().name);\n            if (inactiveState && angular.equals(inactiveState.fromParams, transition.params())) {\n\n                // Indicate that destination is already initialized and will\n                // just be reactivated.\n                transition.wasReactivated = true;\n            }\n\n            // Analytics\n            $rootScope.$emit('Analytics:route-start', {\n                transition: transition\n            });\n        });\n\n\n        // Check that the user is authenticated and has the appropriate capabilities\n        // before allowing them into a private state\n        $transitions.onBefore({to: state => !state.public}, function (transition) {\n            return OauthService.isAuthenticated().then(function (authenticated) {\n                const toState = transition.to();\n                const isMobile = $window.navigator.userAgent.match(/(ipad)|(iphone)|(ipod)|(android)/i);\n\n                if (!ignoreMobileCheck && isMobile) {\n                    return transition.router.stateService.target('ovp.mobilelogin');\n                }\n\n                if (authenticated) {\n                    $rootScope.$broadcast('message:loading:cancel');\n                    if (toState.ignoreRedirects) {\n                        return true;\n                    }\n                    return $q.when(locationService.getLocation(), location => {\n                        if (profileService.isSpecU() && !location.behindOwnModem) {\n                            return transition.router.stateService.target('ovp.specuerror');\n                        }\n                        return $q.when(checkForRedirects(transition))\n                            .then(result => {\n\n                                if (result === true) {\n                                    return authorizeState(transition);\n                                } else {\n                                    return result;\n                                }\n                            });\n                    }).catch(err => {\n\n                        // Analytics\n                        let errorCode = err.errorCode || 'WLC-1001';\n                        $rootScope.$emit('Analytics:sadTv', {\n                            errorCode: errorCode,\n                            errorMessage: errorCodesService.getMessageForCode(errorCode)\n                        });\n\n                        return transition.router.stateService.target('ovp.sadtverror', {\n                            errorCode: errorCode\n                        });\n                    });\n                } else {\n                    let error = OauthService.getOAuthError();\n                    if (error && (error.errorCode === 'WLC-1001' || error.errorCode === 'WUC-1002')) {\n                        // Analytics\n                        $rootScope.$emit('Analytics:sadTv', {\n                            errorCode: error.errorCode,\n                            errorMessage: errorCodesService.getMessageForCode(error.errorCode)\n                        });\n                        return transition.router.stateService.target('ovp.sadtverror', {errorCode: error.errorCode});\n                    }\n\n                    if (toState.name !== 'ovp.blankPage') {\n                        let data;\n                        if (toState.name.indexOf('**') > -1) {\n                            // Saving a lazy-loaded state isn't much use; save url instead\n                            data = {\n                                url: $location.url()\n                            };\n                        } else {\n                            data = {\n                                state: toState.name,\n                                params: transition.params('to')\n                            };\n                        }\n                        ovpStorage.setItem(storageKeys.appLink, data);\n                    }\n                    httpUtil.logout({\n                        allowAutoLogin: true\n                    });\n\n                    return false;\n                }\n            });\n        });\n\n        //Privacy policy and terms of use don't display correctly if\n        //   ovp is active in the background.\n        $transitions.onSuccess({\n            to: function (state) {\n                return (state.name === 'terms');\n            }\n        }, function (transition) {\n            const stickyStates = transition.router.getPlugin('stickystates');\n            const inactives = stickyStates.inactives();\n            if (inactives.find(state => state.name === 'ovp')) {\n                stickyStates.exitSticky('ovp');\n            }\n        });\n\n        /**\n         * Check if this transition needs to redirect elsewhere\n         * @param {Transition} the in progress transition\n         * @returns {true|false|TargetState|promise} instructions to the router\n         *    for how to procede\n         */\n        function checkForRedirects(transition) {\n            if (profileService.isSpecU() &&\n                !loginService.hasAcceptedSpecUTerms() &&\n                transition.to().name !== 'ovp.specuwelcome') {\n                return transition.router.stateService.target('ovp.specuwelcome');\n            } else if (transition.to().name.match(/^ovp.dvr.*/)) {\n                return checkRDVRRedirect(transition);\n            } else {\n                return true;\n            }\n        }\n\n        function checkRDVRRedirect(transition) {\n            return profileService.isAccessibilityEnabled().then(isEnabled => {\n                if (isEnabled) {\n                    return transition.router.stateService.target('ovp.livetv');\n                } else {\n                    return true;\n                }\n            });\n        }\n\n        // Private method\n        function checkForStreamPlusEligibility(transition) {\n            let callback = () => {\n                $rootScope.$emit('Analytics:applicationTriggeredRouting');\n                return transition.router.stateService.target('novideoservice');\n            };\n            return streamPlusService.isStreamPlusEligible(true).then(() => {\n                return transition.router.stateService.target('buyFlow.welcome');\n            }).catch((err) => {\n                if (err && err.data && err.data.code === 1501) {\n                    return alert.open(errorCodesService.getAlertForCode('WEN-1022')).result.then(callback, callback);\n                }\n                return callback();\n            });\n        }\n\n        /**\n         * Check that the user has the required capabilities for entering a state.\n         * If they don't, fall back to alternative states.\n         * @param {Transition} the in progress transition\n         * @returns {true|false|TargetState|promise} instructions to the router\n         *    for how to procede\n         */\n        function authorizeState(transition) {\n            const toState = transition.to();\n            if (toState.data && toState.data.capability) {\n                return profileService.hasCapability(toState.data.capability)\n                    .then(function (isCapable) {\n                        return isCapable || profileService.getFirstAvailableState()\n                            .then(function (stateName) {\n                                if (!stateName) {\n                                    return checkForStreamPlusEligibility(transition);\n                                }\n                                return transition.router.stateService.target(stateName);\n                            });\n                    }, function () {\n                        return transition.router.stateService.target('ovp.disableAppDueServiceError');\n                    });\n            } else {\n                return profileService.canUseTwctv().then(() => true, () => {\n                    return checkForStreamPlusEligibility(transition);\n                });\n            }\n        }\n\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    }\n\n    /* @ngInject */\n    function config($provide, $stateProvider, configProvider, $logProvider, environmentConstants,\n                    CAPABILITIES, $urlRouterProvider, $locationProvider, version, $urlMatcherFactoryProvider) {\n        var redirects = {\n            '/DVR': '/rdvr',\n            '/dvr': '/rdvr'\n        };\n\n        // Disable debug logs for production\n        if (configProvider.get().name === environmentConstants.ENVIRONMENT_PRODUCTION) {\n            $logProvider.debugEnabled(false);\n        }\n\n        $locationProvider.html5Mode({enabled: true, requireBase: false});\n\n        //Watch for ondemand i.e. #/ondemand/featured and rewrite to an actual\n        //url. This will redirect to the desired url, this will; not handle other\n        //locations though\n        $urlRouterProvider.rule(function ($injector, $location) {\n            var hash = $location.hash(), result;\n            if (hash && hash.indexOf('/ondemand') === 0) {\n                result = hash;\n            } else if (hash && hash.indexOf('ondemand/networks') === 0) {\n                result = '/' + hash;\n            } else if ($location.path() === '/ondemand' && hash !== '') {\n                let movieMatch = hash.match(/^\\/*details\\/([0-9]+)/);\n                if (movieMatch) {\n                    result = '/product/movie/' + movieMatch[1];\n                } else {\n                    let seriesMatch = hash.match(/\\/*details\\/series\\/([0-9]+)/);\n                    if (seriesMatch) {\n                        result = '/product/series/' + seriesMatch[1];\n                    }\n                }\n            } else if (hash && hash.startsWith('/rdvr')) {\n                result = hash;\n            }\n            return result;\n        });\n\n        $urlRouterProvider.rule(function ($injector, $location) {\n            if ($location.path().startsWith('/auth')) {\n                let hash = $location.hash();\n                if (hash && (hash.startsWith('/') || hash.startsWith('%25'))) {\n                    return hash;\n                } else {\n                    return '/' + hash;\n                }\n            } else if (redirects[$location.path()]) {\n                return redirects[$location.path()];\n            }\n        });\n\n        $urlRouterProvider.otherwise('/livetv');\n\n        $stateProvider.state('root', {\n            url: '/',\n            public: true,\n            redirectTo: function (transition) {\n                let injector = transition.injector(),\n                    OauthDataManager = injector.get('OauthDataManager'),\n                    urlParameters = injector.get('$location').search(),\n                    ovpStorage = injector.get('ovpStorage'),\n                    $rootScope = injector.get('$rootScope'),\n                    storageKeys = injector.get('storageKeys');\n\n                if (urlParameters && (urlParameters.sessionOverride === 'true' || urlParameters.mqtn)) {\n                    ovpStorage.removeItem(storageKeys.autoAuthSignOutTime);\n                    // If we have stored token then we need to reload page after resetting oauth\n                    // to re-initialize all services\n                    if (OauthDataManager.get().token) {\n                        OauthDataManager.reset();\n                        injector.get('$window').location.reload();\n                    }\n                }\n\n                $rootScope.$emit('Analytics:applicationTriggeredRouting');\n\n                // default state\n                return 'ovp.livetv';\n            }\n        });\n\n        // OVP-505: Need to decode url prameter uri to support old encoding\n        $urlMatcherFactoryProvider.type('uri', {\n            decode: function (item) {\n                return decodeURIComponent(item);\n            }\n        });\n\n        $provide.decorator('$uiViewScroll', ['$state', '$window', function ($state, $window) {\n            return function (uiViewElement) {\n                let top = uiViewElement[0].getBoundingClientRect().top,\n                    subHeader = $state.current.data && $state.current.data.subheader,\n                    scrollY = $window.scrollY,\n                    pxOffset = 67;\n                if (subHeader == 'normal') {\n                    pxOffset = 117;\n                } else if (subHeader == 'large') {\n                    pxOffset = 159;\n                }\n\n                $window.scrollTo(0, top + scrollY - pxOffset);\n            };\n        }]);\n\n        $provide.decorator('$log', function ($delegate, $sniffer, $injector) {\n            var _error = $delegate.error, //Keep original reference to maintain the existing functionality\n            SplunkService = null;\n\n            $delegate.error = function () {\n                if (!SplunkService) {\n                    SplunkService = $injector.get('SplunkService');\n                }\n                SplunkService.sendError.apply(SplunkService, arguments);\n                _error.apply($delegate, arguments);\n            };\n\n            return $delegate;\n        });\n\n        $stateProvider.state('ovp', {\n            abstract: true,\n            resolve: {\n                authenticatedDependencies:\n                    ['BookmarkService',\n                    'lineupService',\n                    'profileService',\n                    'NNSService',\n                    //dependent on nns service for menuitems\n                    'versionService',\n                    function (BookmarkService, lineupService) {\n                    BookmarkService.activate();\n                    lineupService.getLineup();\n                }]\n            },\n            sticky: true,\n            templateUrl: '/js/ovpApp/twctv/twctv.html'\n        });\n\n        $stateProvider.state('login', {\n            data: {\n                bodyClass: 'login-page',\n                pageTitle: 'Sign In',\n                hideMenu: true\n            },\n            public: true,\n            templateUrl: '/js/ovpApp/login/login.html'\n        });\n\n        $stateProvider.state('ovp.mobilelogin', {\n            data: {\n                bodyClass: 'mobile-login-page',\n                hideMenu: true\n            },\n            public: true,\n            views: {\n                appView: {\n                    component: 'mobileLogin'\n                }\n            }\n        });\n\n        $stateProvider.state('ovp.specuwelcome', {\n            url: '',\n            data: {\n                bodyClass: 'specu-welcome',\n                hideMenu: true\n            },\n            views: {\n                appView: {\n                    component: 'specuWelcome'\n                }\n            }\n        });\n\n        $stateProvider.state('ovp.specuerror', {\n            url: '',\n            public: true,\n            data: {\n                bodyClass: 'specu-wifi-error',\n                hideMenu: true\n            },\n            views: {\n                appView: {\n                    component: 'specuCampusWifiError'\n                }\n            },\n            resolve: {\n                error: () => {\n                    return {\n                        title: 'Connect to Campus WiFi',\n                        message: 'To watch TV on SpectrumU, please connect to your campus WiFi network.'\n                    };\n                }\n            }\n        });\n\n        $stateProvider.state('novideoservice', {\n            controller: function (config, $rootScope, $state) {\n                this.buyUrl = config.buyUrl;\n                $rootScope.$broadcast('pageChangeComplete', $state.current);\n\n                this.buyStream2 = function () {\n                    $rootScope.$emit('Analytics:select', {\n                        elementStandardizedName: 'buyStream2'\n                    });\n                };\n            },\n            controllerAs: 'vm',\n            data: {\n                bodyClass: 'no-video-page',\n                hideMenu: true\n            },\n            url: '',\n            ignoreRedirects: true,\n            templateUrl: '/js/ovpApp/twctv/no-video-service.html'\n        });\n\n        $stateProvider.state('ovp.sadtverror', {\n            url: '',\n            public: true,\n            data: {\n                hideMenu: true\n            },\n            views: {\n                appView: {\n                    component: 'sadTvError'\n                }\n            },\n            params: {\n                errorCode: null\n            },\n            resolve: {\n                errorCode: ($stateParams) => {\n                    return $stateParams.errorCode;\n                }\n            }\n        });\n\n        // A blank page. Used by product page to ensure that the header (which is part of 'ovp') displays\n        $stateProvider.state('ovp.blankPage', {});\n\n        $stateProvider.state('ovp.guide', {\n            data: {\n                capability: CAPABILITIES.GUIDE,\n                subheader: 89,\n                bodyClass: 'guide',\n                pageTitle: 'Guide'\n            },\n            resolve: {\n                loadingDefer: ['$q', '$rootScope', function ($q, $rootScope) {\n                    var ld = $q.defer();\n                    $rootScope.$broadcast('message:loading', ld.promise);\n                    return ld;\n                }],\n                //needed for integration of scheduled recordings through dispatchers\n                rdvrService: ['rdvrService', function (rdvrService) {\n                    return rdvrService;\n                }],\n                channelList: ['GuideService', function (GuideService) {\n                    return GuideService.fetchChannelList();\n                }],\n                favorites: ['favoritesService', function (favoritesService) {\n                    return favoritesService.syncFavoriteChannels();\n                }]\n            },\n            url: '/guide',\n            views: {\n                'subMenu@ovp': {\n                    templateUrl: '/js/ovpApp/guide/guide-subheader.html',\n                    controller: 'GuideSubheaderController as vm'\n                },\n                appView: {\n                    template: '<guide-scroll-container></guide-scroll-container>',\n                    controller: 'GuideController as vm'\n                }\n            },\n            /* @ngInject */\n            onReactivate: function ($rootScope) {\n                $rootScope.$broadcast('guide:reactivate');\n            },\n            /* @ngInject */\n            onInactivate: function ($rootScope) {\n                $rootScope.$broadcast('guide:inactivate');\n            }\n\n        });\n\n\n        $stateProvider.state('ovp.playRemote', {\n            data: {\n                bodyClass: 'video-player-page',\n                subheader: 'none'\n            },\n            params: {\n                asset: null,\n                action: null,\n                stb: null\n            },\n            /* @ngInject */\n            onEnter: ($state, $stateParams) => {\n                if (!$stateParams.asset && !$stateParams.tvAction && !$stateParams.stb) {\n                    return $state.go('ovp.livetv');\n                }\n            },\n            url: '/playRemote'\n        });\n\n        $stateProvider.state('ovp.store', {\n            url: '/store?category&page',\n            data: {\n                //capability: CAPABILITIES.STORE,\n                bodyClass: 'store-page',\n                pageTitle: 'VOD Store'\n            },\n            resolve: {\n                /* @ngInject */\n                home: function (homePage, $q) {\n                    var deferred = $q.defer();\n                    homePage().then(defaultCategory => {\n                        deferred.resolve(defaultCategory);\n                    }, () => {\n                        deferred.reject({error: 'serviceErrorReload'});\n                    });\n                    return deferred.promise;\n                },\n                isTVODEnabled: ['profileService', '$state', '$timeout',\n                    function (profileService, $state, $timeout) {\n                    return profileService.isTVODEnabled().then(tvodEnabled => {\n                        $timeout(function () {\n                            if (!tvodEnabled) {\n                                $state.go('ovp.ondemand');\n                            }\n                        });\n                        return tvodEnabled;\n                    });\n                }]\n            },\n            views: {\n                appView: {\n                    template:\n                        '<div><store-page page=\"$stateParams.page\" category=\"$stateParams.category\"></store-page></div>'\n                }\n            }\n        }).state('ovp.store.viewall', {});\n\n        $stateProvider.state('ovp.notAuthorized', {\n            views: {\n                appView: {\n                    /* @ngInject */\n                    controller: function (alert, errorCodesService) {\n                        alert.open(errorCodesService.getAlertForCode('WGE-1002'));\n                    }\n                }\n            }\n        });\n\n        $stateProvider.state('ovp.outOfUs', {\n            views: {\n                appView: {\n                    /* @ngInject */\n                    controller: function (alert, messages, errorCodesService) {\n                        alert.open(errorCodesService.getAlertForCode('WLC-1006'));\n                    }\n                }\n            }\n        });\n\n        $stateProvider.state('ovp.disableAppDueServiceError', {\n            views: {\n                appView: {\n                    /* @ngInject */\n                    controller: function (alert, messages, $window, errorCodesService) {\n                        alert.open({\n                            message: errorCodesService.getMessageForCode('TMP-9038'),\n                            buttonText: 'RELOAD'\n                        }).result.finally(function () {\n                            $window.location.reload();\n                        });\n                    }\n                }\n            }\n        });\n\n        $stateProvider.state('terms', {\n            data: {\n                pageTitle: 'Terms of Use'\n            },\n            url: '/terms',\n            templateUrl: '/' + version.appVersion + '/templates/terms.html',\n            public: true,\n            /* @ngInject */\n            controller: function (config, $window, $state) {\n                this.help_twcable = config.help_twcable;\n                //This ensures that the window is scrolled up so that if the user does back\n                //he starts from the top.\n                $window.scrollTo(0, 0);\n                this.goBack = function () {\n                    $window.history.back();\n                };\n                this.showBackLink = $state.previous && $state.previous.name !== '';\n            },\n            controllerAs: 'vm'\n        });\n    }\n\n\n}());\n"],"sourceRoot":"/source/"}