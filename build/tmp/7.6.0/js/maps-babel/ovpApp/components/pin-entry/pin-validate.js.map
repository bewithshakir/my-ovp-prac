{"version":3,"sources":["ovpApp/components/pin-entry/pin-validate.js"],"names":[],"mappings":"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","file":"ovpApp/components/pin-entry/pin-validate.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.components.pinEntry')\n        .component('pinValidate', {\n            bindings: {\n                resolve: '<',\n                modalInstance: '<'\n            },\n            templateUrl: '/js/ovpApp/components/pin-entry/pin-validate.html',\n            controller: class PinValidate {\n                /* @ngInject */\n                constructor(parentalControlsService, $rootScope, $scope, messages, promiseTracker,\n                    $element, $q, Debouncer, errorCodesService) {\n                    angular.extend(this, {parentalControlsService, $rootScope, $scope, messages,\n                        promiseTracker, $element, $q, Debouncer, errorCodesService});\n                }\n\n                $onInit() {\n                    this.tagRegex = /(<[^>]+>)/g;\n                    this.loadingTracker = this.promiseTracker();\n                    this.parentalControlsService.isPrimaryAccount()\n                        .then(isPrimaryAccount => this.isPrimaryAccount = isPrimaryAccount);\n                    this.errorDelay = new this.Debouncer(this.$scope);\n                }\n\n                $onChanges(changes) {\n                    if (changes.resolve) {\n                        const options = this.resolve.options || {};\n                        this.pinInstructions = options.pinInstructions;\n                        this.pinService = options.pinService;\n                        this.showOOHWarningMessage = options.showOOHWarningMessage || false;\n                        this.pleaseEnterPin = options.pleaseEnterPin ||\n                            this.messages.getMessageForCode('MSG-9044');\n                        this.minLength = options.minLength || 4;\n                        this.maxLength = options.maxLength || 4;\n\n                        let enableForgotPin = (options.enableForgotPin !== undefined) ? options.enableForgotPin : true;\n                        this.$q.when(enableForgotPin)\n                            .then(enabled => this.enableForgotPin = enabled);\n                    }\n                }\n\n                onInputChange() {\n                    this.showNumbersOnlyErrorMessage = false;\n                    this.errorDelay.debounce(() => {\n                        this.showNumbersOnlyErrorMessage = this.form.currentPIN.$error.pattern;\n                    });\n                }\n\n                validatePIN() {\n                    this.isValidationError = false;\n                    if (this.currentPIN !== undefined) {\n                        const promise = this.pinService.validatePIN(this.currentPIN).then(() => {\n                            this.modalInstance.close('pinValidated');\n                            this.isValidationError = false;\n\n                            // Analytics Event\n                            this.$rootScope.$emit('Analytics:pinEntry', {\n                                // category: 'navigation',\n                                // pinType: 'purchaseControl',\n                                // context: 'tvodFlow',\n                                // operationType: 'purchaseControl',\n                                success: true\n                            });\n\n                        }, () => {\n                            this.isValidationError = true;\n                            this.currentPIN = '';\n                            this.$element.find('#pin').focus();\n                            this.errorMessage = this.errorCodesService.getMessageForCode('WPC-1006');\n\n                            // Analytics Event\n                            this.$rootScope.$emit('Analytics:pinEntry', {\n                                // category: 'navigation',\n                                // pinType: 'purchaseControl',\n                                // context: 'tvodFlow',\n                                // operationType: 'purchaseControl',\n                                success: false\n                            });\n\n                        });\n                        this.loadingTracker.addPromise(promise);\n                    } else {\n                        this.isValidationError = true;\n                    }\n                }\n\n                forgotPIN() {\n                    this.modalInstance.dismiss('forgotPIN');\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}