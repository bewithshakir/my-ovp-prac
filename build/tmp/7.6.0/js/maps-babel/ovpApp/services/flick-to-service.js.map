{"version":3,"sources":["ovpApp/services/flick-to-service.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;;qHACT;IACA,QAAQ,OAAO,2BAA2B,CACtC,iBACA,+BAEH,QAAQ,kBAAkB;;;IAG3B,SAAS,eAAe,QAAQ,OAAO,YAAY,MAAM,IAAI,YAAY,mBAAmB;;QAExF,IAAI,gBAAgB,OAAO,SAAS,OAAO;;QAE3C,IAAI,UAAU;YACV,eAAA;YACA,eAAA;;;QAGJ,OAAO;;QAEP,SAAS,kBAAkB,iBAAiB,YAAY,iBAAiB;YACrE,OAAO,MAAM;gBACT,KAAQ,gBAAgB,MAAM,kBAAkB,UAAU,aACtD,sBAAsB;gBAC1B,iBAAoB;gBACpB,QAAoB;gBACpB,SAAS;oBACL,gBAAgB;;gBAEpB,MAAM;;;;;QAKd,SAAS,cAAc,iBAAiB,QAAQ,KAAK;YACjD,IAAI,kBAAkB;YACtB,IAAI,WAAW,WAAW;gBACtB,kBAAkB;;;YAGtB,IAAI,KAAK;gBACL,OAAO,kBAAkB,iBAAiB,IAAI,YAAY;mBACvD;gBACH,OAAO,WAAW,uBAAuB,KAAK,UAAA,YAAc;oBACxD,OAAO,kBAAkB,iBAAiB,WAAW,YAAY;;;;;QAK7E,SAAS,cAAc,QAAQ;YAC3B,IAAI,gBAAgB,OAAO;gBAAe,QAAQ,GAAG;YACrD,IAAI,CAAC,eAAe;gBAChB,IAAI,OAAO,iBAAiB,qBAAqB,OAAO,iBAAiB,kBAAkB,QAAQ;oBAC/F,gBAAgB,OAAO,iBAAiB,kBAAkB;uBACvD;oBACH,IAAI,YAAY;oBAChB,IAAI,eAAe,kBAAkB,kBAAkB;;;oBAGvD,WAAW,WAAW,0BAA0B;wBAC5C,gBAAgB;wBAChB,WAAW;wBACX,iBAAiB;wBACjB,cAAc;;oBAElB,MAAM,OAAO;wBACT,iBAAiB;wBACjB,WAAA;wBACA,cAAA;;;mBAGL;gBACH,IAAI,YAAY;gBAChB,IAAI,eAAe,kBAAkB,kBAAkB;;;gBAGvD,WAAW,WAAW,0BAA0B;oBAC5C,gBAAgB;oBAChB,WAAW;oBACX,iBAAiB;oBACjB,cAAc;;gBAElB,MAAM,OAAO;oBACT,iBAAiB;oBACjB,WAAA;oBACA,cAAA;;;;YAIR,WAAW,uBAAuB,KAAK,UAAA,YAAc;gBACjD,IAAI,MAAM,OAAO,SACb,OAAO,aACP,OAAO,UACP,OAAO,KAAK;;gBAEhB,IAAI,OAAO;oBACP,SAAS;oBACT,KAAK,WAAW;oBAChB,SAAS;;;gBAGb,OAAO,MAAM;oBACT,KAAK;oBACL,iBAAiB;oBACjB,QAAQ;oBACR,QAAQ;mBACT,KAAK,UAAA,KAAO;;oBAEX,WAAW,WAAW,0BAA0B;wBAC5C,gBAAgB,WAAW;;;oBAG/B,MAAM,QAAQ;mBACf,UAAA,OAAS;;oBAER,IAAI,YAAY;oBAChB,IAAI,eAAe,kBAAkB,kBAAkB;;;oBAGvD,WAAW,WAAW,0BAA0B;wBAC5C,gBAAgB,aAAa,WAAW,aAAa;wBACrD,WAAW;wBACX,iBAAiB,KAAK,UAAU;wBAChC,OAAO;wBACP,cAAc;;;oBAGlB,MAAM,OAAO;wBACT,WAAA;wBACA,cAAA;;oBAEJ,KAAK,MAAM,2BAA2B;;;YAG9C,OAAO,MAAM;;;KAGpB","file":"ovpApp/services/flick-to-service.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.services.flickTo', [\n        'ovpApp.config',\n        'ovpApp.services.stbService'\n    ])\n    .factory('flickToService', FlickToService);\n\n    /* @ngInject */\n    function FlickToService(config, $http, stbService, $log, $q, $rootScope, errorCodesService) {\n\n        let flickToQamUrl = config.piHost + config.flickVod;\n\n        let service = {\n            flickToVodQam,\n            tuneToChannel\n        };\n\n        return service;\n\n        function flickToQamRequest(providerAssetId, macAddress, offsetInSeconds) {\n            return $http({\n                url:    flickToQamUrl + '/' + providerAssetId + '/mac/' + macAddress +\n                    '?offsetInSeconds=' + offsetInSeconds,\n                withCredentials:    true,\n                method:             'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: ''\n            });\n        }\n\n        // /ipvs/api/smarttv/flick/vod/nbc.com::NBCU2015111600002329/mac/44:E0:8E:B9:09:1B?offsetInSeconds=0\n        function flickToVodQam(providerAssetId, offset, stb) {\n            var offsetInSeconds = 0;\n            if (offset !== undefined) {\n                offsetInSeconds = offset;\n            }\n\n            if (stb) {\n                return flickToQamRequest(providerAssetId, stb.macAddress, offsetInSeconds);\n            } else {\n                return stbService.getCurrentStbPromise().then(currentStb => {\n                    return flickToQamRequest(providerAssetId, currentStb.macAddress, offsetInSeconds);\n                });\n            }\n        }\n\n        function tuneToChannel(stream) {\n            var channelNumber = stream.channelNumber, defer = $q.defer();\n            if (!channelNumber) {\n                if (stream.streamProperties.allChannelNumbers && stream.streamProperties.allChannelNumbers.length) {\n                    channelNumber = stream.streamProperties.allChannelNumbers[0];\n                } else {\n                    let errorCode = 'WCM-1000';\n                    let errorMessage = errorCodesService.getMessageForCode(errorCode);\n\n                    // Analytics (switchScreen)\n                    $rootScope.$broadcast('Analytics:switchScreen', {\n                        switchScreenId: 'unknown',\n                        errorCode: errorCode,\n                        clientErrorCode: 'Channel not found',\n                        errorMessage: errorMessage\n                    });\n                    defer.reject({\n                        clientErrorCode: 'Channel not found',\n                        errorCode,\n                        errorMessage\n                    });\n                }\n            } else {\n                let errorCode = 'WCM-1000';\n                let errorMessage = errorCodesService.getMessageForCode(errorCode);\n\n                // Analytics (switchScreen)\n                $rootScope.$broadcast('Analytics:switchScreen', {\n                    switchScreenId: 'unknown',\n                    errorCode: errorCode,\n                    clientErrorCode: 'Channel not found',\n                    errorMessage: errorMessage\n                });\n                defer.reject({\n                    clientErrorCode: 'Channel not found',\n                    errorCode,\n                    errorMessage\n                });\n            }\n\n            stbService.getCurrentStbPromise().then(currentStb => {\n                let url = config.piHost +\n                    config.smartTvApi +\n                    config.epgsApi +\n                    config.epgs.stbTune;\n\n                let data = {\n                    apicall: 'tune-channel',\n                    mac: currentStb.macAddress,\n                    channel: channelNumber\n                };\n\n                return $http({\n                    url: url,\n                    withCredentials: true,\n                    method: 'GET',\n                    params: data\n                }).then(res => {\n                    // Analytics (switchScreen)\n                    $rootScope.$broadcast('Analytics:switchScreen', {\n                        switchScreenId: currentStb.macAddress\n                    });\n\n                    defer.resolve(res);\n                }, error => {\n\n                    let errorCode = 'WCM-1000';\n                    let errorMessage = errorCodesService.getMessageForCode(errorCode);\n\n                    // Analytics (switchScreen)\n                    $rootScope.$broadcast('Analytics:switchScreen', {\n                        switchScreenId: currentStb ? currentStb.macAddress : 'unknown',\n                        errorCode: errorCode,\n                        clientErrorCode: JSON.stringify(error),\n                        error: error,\n                        errorMessage: errorMessage\n                    });\n\n                    defer.reject({\n                        errorCode,\n                        errorMessage\n                    });\n                    $log.error('Error flicking to watch', error);\n                });\n            });\n            return defer.promise;\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}