{"version":3,"sources":["ovpApp/components/connectivity-alert/connectivity-alert.js"],"names":[],"mappings":"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","file":"ovpApp/components/connectivity-alert/connectivity-alert.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.connectivityAlert', [\n        'angularMoment',\n        'ovpApp.directives.focus',\n        'ovpApp.messages'\n    ])\n    .component('connectivityAlert', {\n        templateUrl: '/js/ovpApp/components/connectivity-alert/connectivity-alert.html',\n        controller: class ConnectivityAlertController {\n            /* @ngInject */\n            constructor ($rootScope, $scope, $timeout, $interval, $document,\n                config, connectivityService, moment, messages) {\n                angular.extend(this, {\n                    $rootScope,\n                    $scope,\n                    $timeout,\n                    $interval,\n                    $document,\n                    config,\n                    connectivityService,\n                    moment,\n                    messages\n                });\n\n                this.retryTimerInterval = this.config.connectivityService.checkXhrIntervalMs / 1000;\n                this.retryTimerMaxInterval = this.config.connectivityService.checkXhrMaxIntervalMs / 1000;\n                this.retryTimer = null;\n                this.showDefaultText = true;\n                this.showAlert = false;\n                this.activeElement = undefined;\n                this.offlineText = this.messages.getMessageForCode('MSG-9084');\n                this.onlineText = this.messages.getMessageForCode('MSG-9085');\n                this.retryNowText = this.messages.getMessageForCode('MSG-9086');\n                this.retryingNowText = this.messages.getMessageForCode('MSG-9087');\n                this.alertMessage = '';\n            }\n\n            $onInit() {\n                this.setupListener();\n            }\n\n            $onDestroy() {\n                this.listener();\n                if (this.alertTimeout) {\n                    this.$timeout.cancel(this.alertTimeout);\n                }\n            }\n\n            setupListener() {\n                this.listener = this.$rootScope.$on('connectivityService:statusChanged',\n                    (event, isOnline, delay) => {\n\n                    if (!delay) {\n                        delay = this.config.connectivityService.delayMessageWhenNotPlayingMs;\n                    }\n\n                    if (!isOnline) {\n                        this.alertTimeout = this.$timeout(() => {\n                            this.activeElement = this.$document[0].activeElement;\n                            this.showAlertBox();\n                            this.startTimer();\n                        }, delay);\n                    } else {\n\n                        if (this.alertTimeout) {\n                            this.$timeout.cancel(this.alertTimeout);\n                        }\n\n                        this.setAlertMessage(this.onlineText);\n                        this.cancelTimer();\n                        this.resetTimer();\n                        this.hideRetryCounter();\n                        this.$timeout(() => {\n                            this.hideAlertBox();\n                            if (this.activeElement) {\n                                this.activeElement.focus();\n                            }\n                        }, 2000);\n                    }\n                });\n            }\n\n            setAlertMessage(text) {\n                this.alertMessage = text;\n            }\n\n            showAlertBox() {\n                this.setAlertMessage(this.offlineText);\n                this.retryCounter = this.formatTime(this.moment.duration(this.retryTimerInterval * 1000));\n                this.showRetryCounter();\n                this.showAlert = true;\n\n                // Borrow from EAS broadcast.  This will cause the player to exit\n                // full screen if required.\n                this.$rootScope.$broadcast('player:minimize');\n            }\n\n            hideAlertBox() {\n                this.showAlert = false;\n            }\n\n            showRetryCounter() {\n                this.showCounter = true;\n                this.showButton = true;\n            }\n\n            hideRetryCounter() {\n                this.showCounter = false;\n                this.showButton = false;\n            }\n\n            keypress(event) {\n                if (event.keyCode === 9) { //tab\n                    event.preventDefault();\n                }\n            }\n\n            checkNow() {\n                this.cancelTimer();\n                this.hideRetryCounter();\n\n                this.setAlertMessage(this.retryingNowText);\n                this.retryTimerInterval = this.retryTimerInterval * 2;\n\n                if (this.retryTimerInterval > this.retryTimerMaxInterval) {\n                    this.retryTimerInterval = this.retryTimerMaxInterval;\n                }\n\n                this.connectivityService.checkXhr().then(() => {\n                    this.resetTimer();\n                }, () => {\n                    this.$timeout(() => {\n                        this.startTimer();\n                    }, 1000);\n\n                });\n            }\n\n            startTimer() {\n                var minutes = '';\n                var minutesText = 'minutes';\n                var seconds = '';\n\n                this.timer = this.moment.duration(this.retryTimerInterval * 1000);\n                this.retryCounter = this.formatTime(this.timer);\n                this.setAlertMessage(this.offlineText);\n                this.showRetryCounter();\n\n                this.retryTimer = this.$interval(() => {\n\n                    if (this.timer.asSeconds() <= 1) {\n                        this.retryCounter = this.formatTime(this.timer);\n                        this.checkNow();\n\n                    } else {\n                        this.timer.subtract(1, 'second');\n                        this.retryCounter = this.formatTime(this.timer);\n\n                        // only for screen reader\n                        if (this.timer.asSeconds() % 10 === 0) {\n                            if (this.timer.asSeconds() > 59) {\n                                if (this.timer.minutes() < 2) {\n                                    minutesText = 'minute';\n                                }\n\n                                minutes = this.timer.minutes() + ' ' + minutesText;\n                            } else {\n                                minutes = '';\n                            }\n\n                            seconds = this.timer.seconds() + ' seconds';\n\n                            this.srTime = 'retrying in ' + minutes + ' ' + seconds;\n                        } else {\n                            minutes = '';\n                            seconds = '';\n                        }\n                    }\n                }, 1000);\n            }\n\n            formatTime(duration) {\n                var minutes = duration.minutes();\n                var seconds = duration.seconds();\n                var formatted;\n                if (duration.asSeconds() >= 60) {\n                    formatted = minutes + ':';\n                    if (seconds < 10) {\n                        formatted += '0' + seconds;\n                    } else {\n                        formatted += seconds;\n                    }\n                } else {\n                    formatted = seconds + ' seconds.';\n                }\n\n                return formatted;\n            }\n\n            cancelTimer() {\n                this.showDefaultText = false;\n                this.showCheckingNowText = true;\n                this.retryCounter = this.retryTimerInterval;\n\n                if (this.retryTimer) {\n                    this.$interval.cancel(this.retryTimer);\n                    this.retryTimer = null;\n                }\n            }\n\n            resetTimer() {\n                this.retryTimerInterval = this.config.connectivityService.checkXhrIntervalMs / 1000;\n            }\n\n\n\n        }\n    });\n}());\n"],"sourceRoot":"/source/"}