{"version":3,"sources":["ovpApp/components/player/playerControls.js"],"names":[],"mappings":"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","file":"ovpApp/components/player/playerControls.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.playerControls', [\n        'ovpApp.player.blockingScreen',\n        'ovpApp.product.service',\n        'ovpApp.components.ovp.rating',\n        'ovpApp.config',\n        'ovpApp.playerControls.miniGuide',\n        'ovpApp.playerControls.miniGuideData',\n        'ovpApp.playerControls.skipButton',\n        'ovpApp.player.streamService',\n        'ovpApp.services.locationService',\n        'ovpApp.services.parentalControlsService',\n        'ovpApp.directives.draggable',\n        'ovpApp.messages',\n        'ovpApp.dataDelegate',\n        'cfp.hotkeys',\n        'dibari.angular-ellipsis',\n        'ovpApp.directives.focus',\n        'ovpApp.services.dateFormat',\n        'rx',\n        'ovpApp.services.rxUtils',\n        'selectn',\n        'ovpApp.directives.ovp-fullscreen',\n        'ovpApp.playerControls.ovpScrubber',\n        'ovpApp.player',\n        'ovpApp.product.productActionService',\n        'ovpApp.services.profileService',\n        'ovpApp.components.modal',\n        'ovpApp.components.ovp.ccSettings',\n        'ovpApp.services.errorCodes',\n        'ovpApp.services.stbService',\n        'ovpApp.services.flickTo',\n        'ovpApp.services.windowFocus',\n        'ovpApp.components.ovp.remotePlayerCCSettings',\n        'ajoslin.promise-tracker',\n        'ovpApp.player.sapService',\n        'ovpApp.directives.keydown',\n        'ovpApp.ondemand.goback'])\n        .directive('playerControls', PlayerControls)\n        .directive('preventDefault', preventDefault)\n        .factory('playerControlTimer', playerControlTimer);\n\n    function PlayerControls() {\n        return {\n            bindToController: true,\n            controllerAs: 'vm',\n            controller: PlayerControlsController,\n            templateUrl: '/js/ovpApp/components/player/playerControls.html',\n            scope: {\n                player: '='\n            }\n        };\n    }\n\n    /* @ngInject */\n    function preventDefault() {\n        return {\n            link: function (scope, element) {\n                element.bind('click', function (event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                });\n            }\n        };\n    }\n\n    /* @ngInject */\n    function playerControlTimer($timeout, $rootScope, config) {\n        let timer, service = {\n            scheduleHide,\n            cancelHide\n        },\n        PLAYER_CONTROLS_TIMEOUT = parseInt(config.playerParameters.playerControlsTimeoutMS);\n\n        return service;\n\n        ////////////////\n\n        function scheduleHide() {\n            cancelHide();\n            timer = $timeout(() => {\n                $rootScope.$broadcast('player-control:hide');\n                timer = undefined;\n            }, PLAYER_CONTROLS_TIMEOUT);\n        }\n\n        function cancelHide() {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = undefined;\n        }\n    }\n\n    /* @ngInject */\n    function PlayerControlsController($rootScope, $scope, version, $timeout, alert,\n        TWCVideoJS, playerStreamService, profileService,\n        messages, $state, $window, ondemandGoBack, globalKeydown, keyMap,\n        BookmarkService, dummyEANAsset, config, CDVR_STATE, ovpFullscreen,\n        playerControlTimer, playerService, playerErrors,\n        locationService, $q, blockingScreenService, errorCodesService) {\n        const vm = this;\n        vm.seekToPosition = seekToPosition;\n        vm.restart = restart;\n        vm.loadingMessage = loadingMessage;\n        vm.ariaLoadingMessage = ariaLoadingMessage;\n        vm.appVersion = version.appVersion;\n        vm.skip = skip;\n        vm.skipSeconds = parseInt(config.playerParameters.skipSeconds);\n        vm.remoteSessionControlEnabled = config.remoteSessionControlEnabled;\n        vm.prepareToSetBookmark = prepareToSetBookmark;\n        vm.onKeyDown = onKeyDown;\n        vm.onFullScreenToggled = onFullScreenToggled;\n        vm.onMouseLeave = onMouseLeave;\n        vm.onMouseOver = onMouseOver;\n        vm.isVodMode = isVodMode;\n        vm.isLiveMode = isLiveMode;\n        vm.CONTROLS_MODE = TWCVideoJS.FlashVideoPlayer.streamTypes;\n        vm.playerElement = angular.element('#playerWrapper')[0];\n\n        const goBack = () => ondemandGoBack(vm.asset, vm.isTrailer);\n\n        let playerEvents = {\n            'player-initialized': onPlayerInitialized,\n            'source-set': onSourceSet,\n            'playback-started': onPlaybackStarted,\n            'playback-stopped': onPlaybackStopped,\n            'player-position-changed': onPlayerPositionChanged,\n            'stream-scrubbed': onStreamScrubbed,\n            'buffering-began': bufferingBegan,\n            'buffering-ended': bufferingEnd,\n            'error': onPlayerError,\n            'ad-breaks-created': onAdBreaksCreated,\n            'player-end-position-changed': onPlayerEndPositionChanged,\n            'player-mouse-down': onPlayerMouseDown\n        };\n\n        let scrubberReadyDefer = $q.defer();\n\n        activate();\n        ////////////////\n\n        function setDefaults() {\n            vm.bufferLenMsec = 0;\n            vm.options = {};\n            vm.pcBlockedScreen = false;\n            vm.controls = '';\n            vm.asset = undefined;\n            vm.scrubberBarVisible = false;\n            vm.menuVisible = false;\n            vm.playbackTime = 0;\n            vm.seeking = false;\n            vm.stopped = true;\n            vm.loading = false;\n            vm.buffering = false;\n            vm.duration = 0;\n            vm.adBreakDuration = 0;\n            vm.scrubbingDisabled = true;\n            vm.adBreaks = [];\n            vm.liveTmsId = '';\n            vm.eanUrl = '';\n            vm.enlarge = false;\n        }\n\n        function playVodAsset(options) {\n            // This is to handle the case when we do not get the\n            // streamList from NNS for the particular VOD asset, we show the\n            // message to the user and take them back to the On Demand page.\n            if (angular.isUndefined(options.stream)) {\n                alert.open({\n                    message: errorCodesService.getMessageForCode('WGU-1002'),\n                    buttonText: 'OK'\n                }).result.then(goBack);\n                return;\n            }\n\n            vm.asset = options.asset;\n            vm.isTrailer = options.isTrailer;\n            vm.stream = options.stream;\n            vm.isCdvr = options.isCdvr;\n\n            initPlaybackTime(vm.stream);\n\n            vm.asset = options.asset;\n            vm.isTrailer = options.isTrailer;\n            vm.stream = options.stream;\n            vm.isCdvr = options.isCdvr;\n            vm.slider.options.isAdPlaying = false;\n\n            if (vm.asset && vm.stream.cdvrState === CDVR_STATE.IN_PROGRESS) {\n                vm.slider.options.showBuffer = true;\n            }\n\n            if (vm.stream.isCDVRRecorded) {\n                BookmarkService.setCdvrToBookmark(vm.stream.streamProperties.cdvrRecording.recordingId);\n            } else {\n                BookmarkService.setAssetToBookmark(vm.stream.streamProperties.providerAssetID);\n            }\n\n            playerStreamService.playVodAsset({\n                player: vm.player,\n                asset: vm.asset,\n                stream: vm.stream,\n                isTrailer: vm.isTrailer,\n                isCdvr: vm.isCdvr,\n                eptTime: getEptTime(),\n                startTime: getStartTime()\n            }).catch(onPlayVodError);\n        }\n\n        function updateControls(options) {\n            vm.asset = options.asset;\n            vm.loading = false;\n            vm.liveTmsId = options.liveTmsId;\n            vm.eanUrl = options.eanUrl;\n            vm.controls = options.mode;\n            registerCallbacks();\n            registerBlockingListeners();\n\n            if (isVodMode()) {\n                playVodAsset(options);\n            }\n        }\n\n        function registerBlockingListeners() {\n            let blockingScreenSubscription;\n\n            blockingScreenSubscription = blockingScreenService.getSource()\n                .subscribe(({visible}) => {\n                    vm.pcBlockedScreen = visible;\n                    vm.loading = false;\n                    vm.buffering = false;\n                    vm.seeking = false;\n                });\n\n            $scope.$on('player:parentalControlsUnblocked', () => {\n                vm.pcBlockedMessage = '';\n            });\n\n            $scope.$on('player:showBlockingScreen', () => {\n                vm.pcBlockedMessage = 'This show is blocked by parental controls.' +\n                    ' Press unblock button to play the video';\n            });\n\n            $scope.$on('$destroy', function () {\n                blockingScreenSubscription.dispose();\n            });\n        }\n\n        // Privat function\n        function globalKeydownHandler(event) {\n            // STVWEB-1699: k - play/pause, j - Go back, l (lowercase L) - Go forward and m - Mute/Unmute video\n            switch (keyMap[event.keyCode]) {\n                case 'j':\n                    vm.skip(-1);\n                    break;\n                case 'l':\n                    if (!vm.slider.options.ffDisabled) {\n                        vm.skip(1);\n                    }\n                    break;\n            }\n        }\n\n        function activate() {\n            setDefaults();\n\n            $scope.$on('seek-to-position', (event, data) => {\n                vm.seekToPosition(data.positionSec, data.sourceElement);\n            });\n\n            $scope.$on('player-control:hide', () => {\n                if (ovpFullscreen.isEnabled()) {\n                    vm.controllerBarVisible = false; // hide if in full screen mode\n                }\n            });\n\n            $scope.$on('player-control:guide-toggled', (evt, data) => {\n                if (ovpFullscreen.isEnabled()) {\n                    vm.controllerBarVisible = data.isVisible;\n                }\n            });\n\n            $scope.$on('player-control:click', () => onPlayerMouseDown());\n\n            let unsubscribe = playerService.assetLoadedSource.subscribe(options => {\n                deregisterCallbacks(playerEvents);\n                $scope.$evalAsync(() => {\n                    updateControls(options);\n                });\n            });\n\n            let keydownHandler = globalKeydown.observable\n                // Ignore key events if not playing video and vod mode\n                .filter((event) => vm.isValidPlayRoute() && vm.isVodMode() && !vm.slider.options.isAdPlaying &&\n                    !(event.ctrlKey || event.shiftKey || event.altKey || event.metaKey))\n                .subscribe(globalKeydownHandler);\n\n            $scope.$on('$destroy', () => {\n                unsubscribe.dispose();\n                keydownHandler.dispose();\n            });\n\n            /****** VOD Scrubber *******/\n            vm.scrubbingDisabled = true;\n            vm.slider = {\n                options: {\n                    max: 0,\n                    step: 0,\n                    value: 0,\n                    ffDisabled: false,\n                    adBreaks: []\n                }\n            };\n        }\n\n        function getEptTime() {\n            if (vm.isTrailer || vm.isStartOver) {\n                return 0;\n            } else {\n                let bookmark = vm.asset.bookmark;\n                if (bookmark) {\n                    if (bookmark.complete || bookmark.playMarkerSeconds >= bookmark.runtimeSeconds) {\n                        return 0;\n                    } else {\n                        return bookmark.entertainmentPlayMarkerSeconds;\n                    }\n                }\n            }\n        }\n\n        function getStartTime() {\n            if (vm.isTrailer || vm.isStartOver) {\n                return 0;\n            } else {\n                let bookmark = vm.asset.bookmark;\n                if (!bookmark || bookmark.complete ||\n                    (bookmark.playMarkerSeconds >= bookmark.runtimeSeconds)) {\n                    return 0;\n                } else {\n                    return bookmark.playMarkerSeconds;\n                }\n            }\n        }\n\n        function skip(multiplier) {\n            $rootScope.$broadcast('playerControls: skip', {multiplier: multiplier});\n        }\n\n        function updatePlaybackTimeMarkerPosition() {\n            if (vm.stream && vm.stream.cdvrState === CDVR_STATE.IN_PROGRESS) {\n                // Max is scheduled record time. But it is possible for\n                // recording to go longer, so use the max of the length and the\n                // schduled time.\n                vm.slider.options.max = Math.ceil(Math.max(vm.bufferLenMsec / 1000, vm.duration));\n            } else {\n                vm.slider.options.max = Math.ceil(vm.bufferLenMsec / 1000);\n            }\n            if (vm.slider.options.max > 0) {\n                scrubberReadyDefer.resolve();\n            }\n            vm.slider.options.value = vm.playbackTime;\n            vm.slider.options.ffDisabled = vm.scrubbingDisabled;\n            vm.scrubberBarVisible = vm.duration > 0; // Show scrubber when duration is available\n        }\n\n        function initPlaybackTime(stream) {\n            vm.playbackTime = getStartTime();\n            vm.duration = parseInt(stream.duration);\n            setScrubbingDisabled();\n            updatePlaybackTimeMarkerPosition();\n        }\n\n        function setScrubbingDisabled() {\n            vm.scrubbingDisabled = vm.stream && vm.stream.streamProperties.tricks_mode &&\n                vm.stream.streamProperties.tricks_mode.FASTFORWARD !== undefined &&\n                !(vm.adBreaks && vm.adBreaks.length);\n        }\n\n        function onPlayerInitialized() {\n            $timeout(function () {\n                vm.loading = false;\n            }, 0);\n        }\n\n        // This will calculate the EPT i.e entertainmentPlayTime which is the actual play time\n        // minus advertisement. i.e EPT = (playbackTimestamp - adsTime)\n        function calculateEpt(playbackTimestamp) {\n            var adBreaksTime = 0;\n            vm.adBreaks.find((adBreak) => {\n                // This will handle the case when the adBreak has already passed. So we need the entire duration of\n                // the adBreak.\n                if (playbackTimestamp > adBreak.endTime) {\n                    adBreaksTime =  adBreaksTime +  adBreak.duration;\n                }\n                // This will handle the case when the adBreak is currently going on. So we need that particular\n                // playing duration only.\n                else if (playbackTimestamp > adBreak.startTime && playbackTimestamp < adBreak.endTime) {\n                    // As all the adBreak are in the ascending order of their occurences so if the\n                    // above condition fails for the current adBreak then there is no need\n                    // to check for the other adBreak.\n                    adBreaksTime = adBreaksTime + (playbackTimestamp - adBreak.startTime);\n                    return true;\n                } else {\n                    // If all the above conditions do not match for the current adBreak then do not need\n                    // to go for the rest of the loop as adBreaks are in ascending order of their occurences.\n                    return true;\n                }\n            });\n            return (playbackTimestamp - adBreaksTime);\n        }\n\n        function onAdBreaksCreated(event) {\n            if (isVodMode()) {\n                vm.slider.options.adBreaks = [];\n                vm.adBreaks = [];\n                if (event && event.source) {\n                    event.source.forEach((adBreak) => {\n                        // Save all the adBreaks for a particular asset for further use.\n                        vm.adBreaks.push(adBreak);\n                        vm.slider.options.adBreaks.push({\n                            startTime: adBreak.startTime,\n                            duration: adBreak.duration\n                        });\n                        // Update duration\n                        vm.adBreakDuration += parseInt(adBreak.duration / 1000);\n                    });\n                }\n                // Ad breaks affect scrubbing disablement\n                setScrubbingDisabled();\n            }\n        }\n\n        function onSourceSet() {\n            vm.loading = true;\n        }\n\n        function onPlaybackStarted() {\n            vm.loading = false;\n            vm.stopped = false;\n\n            if (!vm.isVodMode()) {\n                vm.controllerBarVisible = true;\n            } else {\n                scrubberReadyDefer.promise\n                    .then(() => vm.controllerBarVisible = true);\n            }\n        }\n\n        function onPlayerEndPositionChanged(event) {\n            vm.bufferLenMsec = event.endPosition;\n            $scope.$broadcast('player:endPositionChanged', event);\n        }\n\n        function onPlaybackPlaying() {\n            vm.buffering = false;\n            vm.loading = false;\n        }\n\n        function onSeekBegin() {\n            vm.seeking = true;\n        }\n\n        function onSeekEnd() {\n            vm.seeking = false;\n            //player is not emitting buffer end when seek ends\n            vm.buffering = false;\n        }\n\n        function onPlayerPositionChanged(event) {\n            // Ignore if player is stopped. We seem to get these events after\n            // stopped with a timestamp that is less than the end of the asset.\n            // We don't want to update the bookmark again to be different from\n            // what onPlaybackStopped() set.\n            if (vm.stopped) {\n                return;\n            }\n\n            let newPos = parseInt(event.PlaybackTimestamp / 1000);\n            if (newPos != vm.playbackTime) {\n                vm.playbackTime = newPos;\n                updatePlaybackTimeMarkerPosition();\n            }\n            prepareToSetBookmark(event, vm.seeking ? 'seeking' : false);\n        }\n\n        function onStreamScrubbed(event) {\n            prepareToSetBookmark(event, 'scrubbed');\n        }\n\n        function onPlayerMouseDown() {\n            playerControlTimer.scheduleHide();\n            if (ovpFullscreen.isEnabled() && !isLiveMode()) {\n                vm.controllerBarVisible = !vm.controllerBarVisible;\n            }\n        }\n\n        function seekToPosition(positionSec, sourceElement) {\n            // New position should not go past the duration lest the player error out.\n            let newPosSec = Math.max(0, Math.min(positionSec, (vm.bufferLenMsec / 1000) - 5));\n\n            if (!vm.scrubbingDisabled || (newPosSec < vm.playbackTime)) {\n                vm.player.seekToPosition(newPosSec * 1000, sourceElement);\n\n                // Trigger the event to send it to the EG.\n                vm.player.trigger('stream-scrubbed', {\n                    PlaybackTimestamp: newPosSec * 1000,\n                    Runtime: vm.duration * 1000,\n                    sourceElement: sourceElement\n                });\n\n                // Update the playback marker so the UI reflects the seek point.\n                vm.playbackTime = newPosSec;\n                updatePlaybackTimeMarkerPosition();\n            }\n        }\n\n        /**\n         * @params (event) : Object that has PlaybackTimestamp and Runtime.\n         * @params (postRightAway) : Boolean : Decides whether we need to send the bookmark now or later.\n         *\n         */\n        function prepareToSetBookmark(event, postRightAway) {\n            if (isVodMode() &&\n                !event.Blocked && !vm.isTrailer) {\n                BookmarkService.setBookmark(\n                    postRightAway,\n                    Math.floor(event.PlaybackTimestamp / 1000),\n                    Math.floor(calculateEpt(event.PlaybackTimestamp) / 1000),\n                    Math.floor(event.Runtime / 1000)\n                );\n            }\n        }\n\n        function onPlaybackStopped(event) {\n            vm.stopped = true;\n\n            if (isVodMode()) {\n                if (event.TriggeredBy === 'streamEnd') {\n                    event = {\n                        PlaybackTimestamp: vm.duration * 1000, // As this is the end of the stream.\n                        Runtime: vm.duration * 1000\n                    };\n                    vm.playbackTime = vm.duration;\n                    $timeout(goBack, 200);\n                } else if (event.TriggeredBy === 'exitPlayer') {\n                    event = {\n                        PlaybackTimestamp: vm.playbackTime * 1000,\n                        Runtime: vm.duration * 1000\n                    };\n                }\n                prepareToSetBookmark(event, 'stopped');\n            }\n            // Removed the corresponding subscribe event in the BookmarkService (the same results happen)\n            // dispatcher.publish('PlayerView:playback-stopped',\n            //     this.asset,\n            //     BookmarkService.getBookmark(),\n            //     event.TriggeredBy);\n        }\n\n        function bufferingBegan() {\n            vm.buffering = true;\n        }\n\n        function bufferingEnd() {\n            vm.buffering = false;\n        }\n\n        function onPlayerError(error) {\n            if (isVodMode()) {\n                // Live errors are handled by mini-guide.js\n                let codes = TWCVideoJS.FlashVideoPlayer.playerErrorCodes;\n                let keys = Object.keys(codes);\n                if (keys.find(k => codes[k] === error.errorID)) {\n                    playerService.showErrorAlert(error, vm.asset).then(goBack);\n                }\n            }\n            vm.buffering = false;\n            vm.loading = false;\n        }\n\n        function deregisterCallbacks(playerEvents) {\n            for (let eventName in playerEvents) {\n                if (playerEvents.hasOwnProperty(eventName)) {\n                    vm.player.off(eventName, playerEvents[eventName]);\n                }\n            }\n        }\n\n        function registerCallbacks() {\n            $scope.$on('player:assetSelected', onAssetSelected);\n\n            let playerEvents = {\n                'player-initialized': onPlayerInitialized,\n                'source-set': onSourceSet,\n                'playback-playing' : onPlaybackPlaying,\n                'playback-started': onPlaybackStarted,\n                'playback-stopped': onPlaybackStopped,\n                'seekBegin': onSeekBegin,\n                'seekEnd' : onSeekEnd,\n                'player-position-changed': onPlayerPositionChanged,\n                'stream-scrubbed': onStreamScrubbed,\n                'buffering-began': bufferingBegan,\n                'buffering-ended': bufferingEnd,\n                'error': onPlayerError,\n                'ad-breaks-created': onAdBreaksCreated,\n                'player-end-position-changed': onPlayerEndPositionChanged,\n                'player-mouse-down': onPlayerMouseDown,\n                'ad-break-started': onAdBreakStarted,\n                'ad-break-stopped': onAdBreakStopped\n            };\n\n            for (let eventName in playerEvents) {\n                if (playerEvents.hasOwnProperty(eventName)) {\n                    let rawFunction = playerEvents[eventName];\n                    playerEvents[eventName] = (...params) => {\n                        rawFunction(...params);\n                        $scope.$evalAsync();\n                    };\n\n                    vm.player.on(eventName, playerEvents[eventName]);\n                }\n            }\n\n            let stopVodListener = $rootScope.$on('stop-vod', () => {\n                deregisterCallbacks(playerEvents);\n            });\n\n            $scope.$on('$destroy', () => {\n                deregisterCallbacks(playerEvents);\n                stopVodListener();\n            });\n        }\n\n        function onAdBreakStarted() {\n            vm.slider.options.isAdPlaying = true;\n        }\n\n        function onAdBreakStopped() {\n            vm.slider.options.isAdPlaying = false;\n        }\n\n        function onAssetSelected(event, asset) {\n            vm.asset = asset;\n            vm.isSAPAvailable = false;\n            vm.isSAPEnabled = false;\n        }\n\n        function restart() {\n            vm.player.pause();\n            vm.player.seekToPosition(0, 'restart');\n        }\n\n        function ariaLoadingMessage() {\n            let message = loadingMessage(),\n                ariaMessage = '';\n            if (vm.asset != dummyEANAsset && isLiveMode()) {\n                let preface = message ? message : '';\n                let episodeTitle = vm.asset.episodeTitle ? vm.asset.episodeTitle : '';\n                let title = vm.asset.title ? vm.asset.title : '';\n                ariaMessage += preface + ' ' + title + ' ' + episodeTitle;\n                if (vm.asset.channel.hasLinkedVODAsset) {\n                    ariaMessage += ' Press Enter to Restart Show';\n                }\n            } else {\n                ariaMessage = message;\n            }\n            return ariaMessage;\n        }\n\n        function loadingMessage() {\n            if (vm.loading && vm.asset) {\n                if (vm.asset === dummyEANAsset) {\n                    return 'Please wait for important emergency alert message...';\n                } else {\n                    if (isVodMode()) {\n                        return `Loading ${vm.asset.title}`;\n                    } else if (isLiveMode()) {\n                        return `Loading ${vm.asset.channel ? vm.asset.channel.networkName : vm.asset.title}`;\n                    }\n                }\n            } else if (vm.buffering) {\n                return 'Buffering';\n            } else if (vm.seeking) {\n                return 'Seeking';\n            }\n        }\n\n        function onPlayVodError(error) {\n            if (error == playerErrors.tunedAway || error == playerErrors.oohFraudDetection) {\n                return;\n            } else if (error == playerErrors.outOfHome) {\n                locationService.resetCache();\n                alert.open(errorCodesService.getAlertForCode('WLC-1012')).result.then(goBack);\n            } else if (error == playerErrors.unentitled) {\n                alert.open({\n                    message: errorCodesService.getMessageForCode('WEN-1004', {\n                        IVR_NUMBER: config.ivrNumber\n                    }),\n                    buttonText: 'OK'\n                }).result.then(goBack);\n            } else if (error == playerErrors.notFound) {\n                alert.open({\n                    message: errorCodesService.getMessageForCode('WGU-1002'),\n                    buttonText: 'OK'\n                }).result.then(goBack);\n            } else {\n                alert.open({\n                    message: errorCodesService.getMessageForCode('WGE-1001'),\n                    buttonText: 'OK'\n                }).result.then(goBack);\n            }\n        }\n\n        function onFullScreenToggled(isEnabled) {\n            $scope.$broadcast('player:fullscreen-toggled', {isEnabled: isEnabled});\n            if (isEnabled) {\n                vm.controllerBarVisible = false;\n            } else {\n                vm.controllerBarVisible = true;\n            }\n        }\n\n        function onKeyDown() {\n            if (!vm.controllerBarVisible) {\n                $scope.$broadcast('player-control:click'); // show mini guide while showing controller bar\n            }\n            playerControlTimer.scheduleHide();\n        }\n\n        function onMouseOver() {\n            playerControlTimer.cancelHide();\n        }\n\n        function onMouseLeave() {\n            playerControlTimer.scheduleHide();\n        }\n\n        function isVodMode() {\n            return vm.controls === vm.CONTROLS_MODE.VOD ||\n                vm.controls === vm.CONTROLS_MODE.CDVR;\n        }\n\n        function isLiveMode() {\n            return vm.controls === vm.CONTROLS_MODE.LIVE;\n        }\n\n        vm.isValidPlayRoute = function () {\n            return playerService.isValidPlayRoute();\n        };\n    }\n})();\n"],"sourceRoot":"/source/"}