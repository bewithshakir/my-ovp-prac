{"version":3,"sources":["ovpApp/search/search-input.js"],"names":[],"mappings":"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","file":"ovpApp/search/search-input.js","sourcesContent":["(() => {\n    'use strict';\n    angular.module('ovpApp.search.input', [\n            'ovpApp.search.searchService',\n            'rx',\n            'ovpApp.components.header.toggler',\n            'ovpApp.services.focusMediator'\n        ])\n        .constant('scheduler', undefined) // unit tests override this\n        .component('searchInput', {\n            templateUrl: '/js/ovpApp/search/search-input.html',\n            controller: class SearchInput {\n                /* @ngInject */\n                constructor($scope, $rootScope, $state, searchService, config, rx,\n                    $q, scheduler, headerToggler, focusMediator, $timeout, searchFocusIndex) {\n                    angular.extend(this, {\n                        $scope, $rootScope, $state, searchService, config, rx,\n                        $q, scheduler, headerToggler, focusMediator, $timeout, searchFocusIndex\n                    });\n                }\n\n                $onInit() {\n                    this.activeIndex = -1;\n                    this.placeholder = 'Search for movies, TV shows, and people';\n                    this.resetInputAria();\n                    this.query = '';\n                    this.headerToggler.source.subscribe(isSearchState => {\n                        if (!isSearchState) {\n                            this.query = '';\n                        }\n                        if (isSearchState) {\n                            if (this.$state.previous && this.$state.previous.name.indexOf('search') !== 0) {\n                                this.previousState = this.$state.previous;\n                            }\n                            this.focusMediator.requestFocus(this.focusMediator.lowPriority)\n                                .then(() => this.shouldFocusInput = true);\n                        } else {\n                            this.shouldFocusInput = false;\n                        }\n                    });\n\n                    this.queries = this.createQueryObservable();\n                    let results = this.resultObservable = this.createResultObservable(this.queries);\n                    results.subscribe(result => {\n                        this.searchResultsTitle = '';\n                        this.clearInputAria();\n                        this.searchFocusIndex.reset();\n                        if (result.isError) {\n                            let params = { error: result.data };\n                            this.$state.go('search.error', params);\n                        } else {\n                            let params = { query: result.rawQuery, results: result.data, focusOnLoad: false};\n                            let isQuickSearch = result.stateName.startsWith('search.quickresults');\n                            let options = isQuickSearch ? { location: 'replace' } : {};\n\n                            this.$rootScope.$emit('Analytics:searched', {\n                                isQuickSearch: isQuickSearch,\n                                params: params,\n                                queryId: result.data ? result.data.queryId : null,\n                                results: result.data ? result.data.results : null\n                            });\n\n                            //processSearchResults(result, isQuickSearch);\n                            this.$state.go(result.stateName, params, options);\n                        }\n                    });\n                    this.searchResultsTitleListener = this.$rootScope.$on('search-results-title', (event, title) => {\n                        // Timeout for screen reader\n                        this.$timeout(() => {\n                            this.searchResultsTitle = title;\n                        }, 1000);\n                    });\n\n                    this.$rootScope.$broadcast('pageChangeComplete', this.$state.current);\n                }\n\n                $onDestroy() {\n                    this.searchResultsTitleListener(); // Remove listner\n                }\n\n                resetInputAria() {\n                    this.inputLabel = 'Tab for auto complete results, or press ENTER for full search results';\n                }\n\n                clearInputAria() {\n                    this.inputLabel = '';\n                }\n\n                createQueryObservable() {\n                    let quickQueries = this.$scope.$toObservable(() => this.query)\n                        .map(({ newValue: query }) => this.decorate(query, 'search.quickresults'));\n                    let fullQueries = this.rx.createObservableFunction(this, 'search')\n                        .map(query => this.decorate(query, 'search.results'));\n\n                    return this.rx.Observable.merge(quickQueries, fullQueries);\n                }\n\n                createResultObservable(queries) {\n                    return queries\n                        .debounce(150, this.scheduler)\n                        .filter(this.isQuickSearch) // only the quick searches get debounced\n                        .merge(queries.filter(this.isFullSearch)) // full search gets merged in without debouncing\n                        .filter(this.isValidSearch.bind(this))\n                        .distinctUntilChanged()\n                        .flatMapLatest(search => this.doSearch(search));\n                }\n\n                decorate(query, stateName) {\n                    return {\n                        query: this.searchService.stripInvalidCharacters(query),\n                        rawQuery: query,\n                        stateName: stateName\n                    };\n                }\n\n                isValidSearch(search) {\n                    return !!search.query && search.query.length >= this.config.search.minimumCharacters;\n                }\n\n                isQuickSearch(search) {\n                    return search.stateName == 'search.quickresults';\n                }\n\n                isFullSearch(search) {\n                    return search.stateName == 'search.results';\n                }\n\n                showLoading(query, observable) {\n                    this.$rootScope.$broadcast(\n                        'message:loading',\n                        this.toPromise(observable),\n                        undefined,\n                        'Search'\n                    );\n                }\n\n                toPromise(observable) {\n                    // rx has a built in toPromise function, but if the observable\n                    //    completes without emitting a value (as happens with our\n                    //    .takeUntil() calls), the promise never gets resolved.\n                    // This function mimics the built in behavior, but will resolve\n                    //    even if no value has been emitted\n\n                    return this.$q(function (resolve, reject) {\n                        let value;\n                        observable.subscribe(\n                            v => value = v,\n                            reject,\n                            () => resolve(value)\n                        );\n                    });\n                }\n\n                doSearch(search) {\n                    this.$rootScope.$emit('Analytics:issue-search');\n                    let resultObservable = this.searchService.getComponentResults(search.query)\n                        .retry(3)\n                        .takeUntil(this.queries)\n                        .map(result => angular.extend(search, { isError: false, data: result }))\n                        .catch(e => this.rx.Observable.just(angular.extend(search, { isError: true, data: e })))\n                        .shareReplay(); // Don't want to kick off an extra request when we show loading spinner\n\n                    if (this.isFullSearch(search)) {\n                        this.searchService.saveRecentSearch(search.rawQuery);\n                    }\n\n                    this.showLoading(search.rawQuery, resultObservable);\n\n                    return resultObservable;\n                }\n\n                onKey(event) {\n                    this.$rootScope.$emit('searchInput:key', event);\n                    if (event.keyCode === 27) {\n                        this.exitSearch();\n                    }\n                }\n\n                exitSearch() {\n                    this.$rootScope.$emit('Analytics:search-exit');\n                    this.shouldFocusInput = false;\n                    this.searchResultsTitle = '';\n\n                    if (this.previousState && this.previousState.name) {\n                        this.$state.go(this.previousState.name, this.previousState.fromParams);\n                    } else {\n                        this.$state.go('ovp.livetv');\n                    }\n                    this.$timeout(function () {\n                        angular.element('#search-link').focus();\n                    }, 0, false);\n                }\n            }\n        });\n})();\n"],"sourceRoot":"/source/"}