{"version":3,"sources":["ovpApp/components/ovp/ovp-click-confirm/ovp-click-confirm.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;;;IAEA,QAAQ,OAAO,sCAAsC,CAAC,4BACjD,WAAW,6BAA6B,2BACxC,QAAQ,iBAAiB,eACzB,UAAU,mBAAmB;;;IAGlC,SAAS,0BAA0B,QAAQ;QACvC,OAAO,UAAU,YAAY;YACzB,OAAO,MAAM;YACb,OAAO,QAAQ;;;QAGnB,OAAO,SAAS,YAAY;YACxB,OAAO,MAAM;;;;;IAKrB,SAAS,cAAc,UAAU,IAAI,kBAAkB,cAAc,QAAQ;QACzE,OAAO,UAAU,aAAa,UAAU,QAAQ,QAAQ;;;YAGpD,IAAI,aAAa,YAAY,KAAK;gBAC9B,aAAa,GAAG;gBAChB,eAAgB,OAAO,OAAO,iBAAiB;gBAC/C,gBAAgB,iBACI;;YAGxB,WAAW,eAAe;;YAE1B,cAAc,KAAK,UAAU,UAAU;;gBAEnC,WAAW,UAAU,YAAY;oBAC7B,OAAO,OAAO,SAAS,YAAY,EAAE,QAAQ;;;;;gBAKjD,WAAW,kBAAkB,YAAY;oBACrC,OAAO,QAAQ,QAAQ;;;gBAG3B,WAAW,QAAQ,aAAa,KAAK;oBACjC,UAAU;oBACV,eAAe;oBACf,yBAAyB;oBACzB,UAAU;mBACX;eAEJ,YAAY;gBACX,MAAM;;;YAGV,WAAW,QAAQ,KAAK,YAAY;gBAChC,WAAW;;;;;;IAOvB,SAAS,gBAAgB,eAAe;QACpC,OAAO;YACH,UAAU;YACV,OAAO;;;YAGP,UAAU,CAAC;YACX,MAAM,SAAA,KAAU,OAAO,SAAS,OAAO;;gBAEnC,IAAI,CAAC,MAAM,SAAS;oBAChB,MAAM;;;;gBAIV,QAAQ,GAAG,SAAS,UAAU,GAAG;;oBAE7B,cAAc,OAAO,SAAS,OAAO;oBACrC,EAAE;;;gBAGN,MAAM,IAAI,YAAY,YAAY;oBAC9B,QAAQ;;;;;KAKvB","file":"ovpApp/components/ovp/ovp-click-confirm/ovp-click-confirm.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.components.ovp.clickConfirm', ['ovpApp.components.popup'])\n        .controller('OvpClickConfirmController', OvpClickConfirmController)\n        .factory('clickOverride', clickOverride)\n        .directive('ovpClickConfirm', ovpClickConfirm);\n\n    /* @ngInject */\n    function OvpClickConfirmController($scope) {\n        $scope.confirm = function () {\n            $scope.popup.close();\n            $scope.ngClick.call();\n        };\n\n        $scope.cancel = function () {\n            $scope.popup.close();\n        };\n    }\n\n    /* @ngInject */\n    function clickOverride($timeout, $q, $templateRequest, popUpService, $parse) {\n        return function (parentScope, $element, $attrs, $event) {\n\n            // Create a new scope for the popup\n            var popupScope = parentScope.$new(false),\n                popupDefer = $q.defer(),\n                clickConfirm =  $parse($attrs.ovpClickConfirm)(popupScope),\n                templateDefer = $templateRequest(\n                                    '/js/ovpApp/components/ovp/ovp-click-confirm/ovp-click-confirm.html'\n                                );\n\n            popupScope.clickConfirm = clickConfirm;\n\n            templateDefer.then(function (template) {\n\n                popupScope.ngClick = function () {\n                    $parse($attrs.ngClick)(popupScope, { $event: $event });\n                };\n\n                // This dialog is never shown on the player page,\n                // so we always return the jQLite wrapped body element\n                popupScope.parentContainer = function () {\n                    return angular.element('body');\n                };\n\n                popupScope.popup = popUpService.show({\n                    template: template,\n                    showCloseIcon: false,\n                    overlayClickClosesPopup: false,\n                    deferred: popupDefer\n                }, popupScope);\n\n            }, function () {\n                throw 'Error pulling template';\n            });\n\n            popupDefer.promise.then(function () {\n                popupScope.$destroy();\n            });\n        };\n    }\n\n\n    /* @ngInject */\n    function ovpClickConfirm(clickOverride) {\n        return {\n            restrict: 'A',\n            scope: false,\n            // Has to run prior to ngClick and after\n            // ovp-button for disabled buttons.\n            priority: -1,\n            link: function (scope, element, attrs) {\n\n                if (!attrs.ngClick) {\n                    throw 'ngClick directive must be provided as an attribute for use with ovp-click-confirm.';\n                }\n\n                // Add our new click handler with confirm\n                element.on('click', function (e) {\n                    // Handle click ourselves if ngClick was provided.\n                    clickOverride(scope, element, attrs, e);\n                    e.stopImmediatePropagation();\n                });\n\n                scope.$on('$destroy', function () {\n                    element.off();\n                });\n            }\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}