{"version":3,"sources":["ovpApp/settings/stb-parentalControls/stb-parentalControls.js"],"names":[],"mappings":"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","file":"ovpApp/settings/stb-parentalControls/stb-parentalControls.js","sourcesContent":["(() => {\n    'use strict';\n    angular.module('ovpApp.settings.stb.parentalControls', [\n        'ovpApp.settings.stb.parentalControls.allowedRatings',\n        'ovpApp.settings.stb.parentalControls.changeBlockingPin',\n        'ovpApp.settings.stb.parentalControls.contentBlock',\n        'ovpApp.settings.parentalControls.channelBlock',\n        'ovpApp.settings.stb.parentalControls.toggle',\n        'ovpApp.parentalControlsDialog',\n        'ovpApp.services.stbSettingsService'\n    ])\n    .component('stbParentalControls', {\n        bindings: {\n            preferences: '<',\n            allowedRatings: '<',\n            currentStb: '<',\n            isPrimaryAccount: '<',\n            properties: '<',\n            channelList: '<'\n        },\n        templateUrl: '/js/ovpApp/settings/stb-parentalControls/stb-parentalControls.html',\n        controller: class StbParentalControls {\n            /* @ngInject */\n            constructor(messages, config, $log, alert, $rootScope, StbSettingsService, errorCodesService) {\n                angular.extend(this, {messages, config, $log, alert, $rootScope,\n                    StbSettingsService, errorCodesService});\n            }\n\n            $onInit() {\n                this.channelCards = [];\n                this.initChannels();\n\n                // Bind to this to pass it as a callback function to channelBlock component\n                this.clearAllChannelBlocks = this.clearAllChannelBlocks.bind(this);\n                this.toggleCardBlock = this.toggleCardBlock.bind(this);\n                this.isChannelBlocked = this.isChannelBlocked.bind(this);\n                this.blockCard = this.blockCard.bind(this);\n                this.unblockCard = this.unblockCard.bind(this);\n            }\n\n            initChannels() {\n                this.channelCards = this.channelList;\n                this.onFilterChanged();\n            }\n\n            getBlockedChannelArray() {\n                return this.preferences.parentalControls.blockedChannels;\n            }\n\n            clearBlockedChannelArray() {\n                this.preferences.parentalControls.blockedChannels = [];\n            }\n            clearAllChannelBlocks($event) {\n                $event.stopPropagation();\n                $event.preventDefault();\n                var unblockPromise = this.StbSettingsService.updateBlockedChannels(this.currentStb, [])\n                .then(() => {\n                        this.clearBlockedChannelArray();\n                        this.initChannels();\n                    }, (error) => {\n                        this.$log.error(error);\n                        this.alert.open({\n                            message: this.errorCodesService.getMessageForCode('WGE-1001')\n                        });\n                    });\n                this.$rootScope.$broadcast(\n                    'message:loading',\n                     unblockPromise,\n                    'Unblocking all channels...',\n                    undefined\n                );\n            }\n\n            toggleCardBlock($event, card) {\n                $event.stopPropagation();\n                $event.preventDefault();\n                if (this.isChannelBlocked(card)) {\n                    this.unblockCard(card);\n                } else {\n                    this.blockCard(card);\n                }\n            }\n            onFilterChanged() {\n                this.filteredCards = this.channelCards\n                .filter((channel) => !this.callSignFilter || channel.callSign.match(this.callSignFilter))\n                .sort((a, b) => a.channelNumber - b.channelNumber);\n                // Add an empty \"card\" for the clearAll button\n                this.filteredCards.unshift({});\n            }\n\n            getCardNumber(card) {\n                return card.channelNumber;\n            }\n\n            getCardName(card) {\n                return card.callSign;\n            }\n\n            getCardImage(card) {\n                return card.fullLogoUrl;\n            }\n\n            isChannelBlocked(card) {\n                let blockedChannelArray = this.getBlockedChannelArray();\n                if (Array.isArray(blockedChannelArray)) {\n                    return blockedChannelArray.find(x => x.channelNumber === card.channelNumber) !== undefined;\n                } else {\n                    return false;\n                }\n            }\n\n            blockCard(card) {\n                let blockedChannelArray = this.getBlockedChannelArray();\n                var duplicateChannels = this.getDuplicateChannels(card);\n                duplicateChannels.forEach((channel) => {\n                    blockedChannelArray.push(channel);\n                });\n                this.StbSettingsService.updateBlockedChannels(this.currentStb, blockedChannelArray);\n            }\n            unblockCard(card) {\n                let blockedChannelArray = this.getBlockedChannelArray();\n                var duplicateChannels = this.getDuplicateChannels(card);\n                duplicateChannels.forEach((channel) => {\n                    var channelObject = blockedChannelArray.find(x =>\n                        x.channelNumber === channel.channelNumber);\n                    var index = blockedChannelArray.indexOf(channelObject);\n                    if (index > -1) {\n                        blockedChannelArray.splice(index, 1);\n                    }\n                });\n                this.StbSettingsService.updateBlockedChannels(this.currentStb, blockedChannelArray);\n            }\n\n            getDuplicateChannels(card) {\n                var channelList = this.channelCards;\n                return channelList.filter((channel)=> {\n                    return (channel.mystroServiceId === card.mystroServiceId);\n                }).map((card) => {\n                    return {channelNumber : parseInt(card.channelNumber)};\n                });\n            }\n        }\n    });\n})();\n"],"sourceRoot":"/source/"}