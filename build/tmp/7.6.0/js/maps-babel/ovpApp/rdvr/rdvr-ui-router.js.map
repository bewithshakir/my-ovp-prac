{"version":3,"sources":["ovpApp/rdvr/rdvr-ui-router.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;;;;;;IAMA,QAAQ,OAAO,sBAAsB,CACjC,aACA,8BACA,iCAEH,IAAI,KACJ,OAAO;;;IAGR,SAAS,IAAI,cAAc,kBAAkB,YAAY,QAAQ;QAC7D,WAAW,iBACN,UAAU,YAAM;YACb,IAAI,QAAQ,iBAAiB,SAAS,OAAO,QAAQ;YACrD,IAAI,SAAS,CAAC,MAAM,WAAW;gBAC3B,gBAAgB,YACX,KAAK,UAAA,OAAK;oBALf,OAKmB,OAAO,GAAG;;;;;;;IAM7C,SAAS,OAAO,gBAAgB,cAAc,oBAAoB;;QAE9D,mBAAmB,KAAK,QAAQ,CAAC,UAAU,UAAU,QAAQ;YACzD,OAAO,GAAG;;;QAGd,mBAAmB,KAAK,QAAQ,CAAC,UAAU,UAAU,QAAQ;YACzD,OAAO,GAAG;;;QAGd,mBAAmB,KAAK,2BAA2B,CAAC,UAAU,UAAU,QAAQ;YAC5E,OAAO,GAAG;;;;QAId,eAAe,MAAM,WAAW;YAC5B,YAAY;YACZ,MAAM;gBACF,YAAY,aAAa;gBACzB,WAAW;;;gBAGX,SAAS;;YAEb,KAAK;YACL,SAAS;;gBAEL,4BAAa,SAAA,YAAU,YAAY;oBAC/B,OAAO,WAAW,UACb,KAAK,YAAA;wBAJN,OAIY,WAAW;;;;YAGnC,OAAO;gBACH,eAAe;;oBAEX,qDAAY,SAAA,WAAU,QAAQ,kBAAkB,QAAQ;wBACpD,OAAO,YAAY,iBAAiB;wBACpC,OAAO,QAAQ;;oBAEnB,aAAa;;gBAEjB,SAAS;oBACL,WAAW;;;;;QAKvB,eAAe,MAAM,yBAAyB;YAC1C,YAAY;YACZ,MAAM;gBACF,WAAW;;YAEf,KAAK;YACL,WAAW;;;QAGf,eAAe,MAAM,qBAAqB;YACtC,YAAY;YACZ,MAAM;gBACF,WAAW;;YAEf,KAAK;YACL,WAAW;;;QAGf,eAAe,MAAM,oBAAoB;YACrC,YAAY;YACZ,MAAM;gBACF,WAAW;;YAEf,KAAK;YACL,WAAW;;;QAGf,SAAS,SAAS,YAAY;YAC1B,OAAO,WAAW,WAAW,SAAS,eACjC,KAAK,YAAM;gBACR,IAAM,OAAO,WAAW,KAAK;gBAC7B,IAAI,gBAAa;gBACjB,IAAI,SAAS,WAAW;oBACpB,gBAAgB;uBACb;oBACH,IAAM,mBAAmB,WAAW,WAAW,IAAI;oBACnD,gBAAgB,CAAC,iBAAiB,SAAS,MAAM;;;gBAGrD,IAAI,eAAe;oBACf,IAAM,aAAa,WAAW,WAAW,IAAI;oBAC7C,OAAO,gBAAgB;;;;;;IAM3C,SAAS,gBAAgB,YAAY;QACjC,OAAO,WAAW,mBAAmB,KAAK,YAAM;YAC5C,OAAO,WAAW,gBAAgB,KAAK,UAAA,WAAa;gBAChD,OAAO,WAAW,oBAAoB,KAAK,UAAA,OAAS;oBAChD,IAAI,UAAU;;oBAEd,IAAI,cAAc,UAAU,OAAO,UAAU,QAAQ;wBACjD,UAAU;;;oBAGd,OAAO;;;;;KAKtB","file":"ovpApp/rdvr/rdvr-ui-router.js","sourcesContent":["(function () {\n    'use strict';\n\n    /*\n     * rdvr ui-router config\n     */\n\n    angular.module('ovpApp.rdvr.router', [\n        'ui.router',\n        'ovpApp.services.stbService',\n        'ovpApp.rdvr.rdvrStateService'\n        ])\n    .run(run)\n    .config(config);\n\n    /* @ngInject */\n    function run($transitions, rdvrStateService, stbService, $state) {\n        stbService.currentStbSource\n            .subscribe(() => {\n                let state = rdvrStateService.getState($state.current.name);\n                if (state && !state.enabled()) {\n                    getDefaultState(stbService)\n                        .then(state => $state.go(state));\n                }\n            });\n    }\n\n    /* @ngInject */\n    function config($stateProvider, CAPABILITIES, $urlRouterProvider) {\n        //legacy redirect\n        $urlRouterProvider.when('/DVR', ['$state', function ($state) {\n            $state.go('ovp.dvr');\n        }]);\n\n        $urlRouterProvider.when('/dvr', ['$state', function ($state) {\n            $state.go('ovp.dvr');\n        }]);\n\n        $urlRouterProvider.when('/dvr/rdvr/my-recordings', ['$state', function ($state) {\n            $state.go('ovp.dvr.my-recordings');\n        }]);\n        //end legacy redirect\n\n        $stateProvider.state('ovp.dvr', {\n            redirectTo: redirect,\n            data: {\n                capability: CAPABILITIES.RDVR,\n                subheader: 50,\n\n                // can't select non-DVR\n                dvrOnly: true\n            },\n            url: '/rdvr',\n            resolve: {\n                /* @ngInject */\n                setTopBoxes: function (stbService) {\n                    return stbService.getSTBs()\n                        .then(() => stbService.selectDefaultDvr());\n                }\n            },\n            views: {\n                'subMenu@ovp': {\n                    /* @ngInject */\n                    controller: function ($scope, rdvrStateService, $state) {\n                        $scope.menuItems = rdvrStateService.states;\n                        $scope.state = $state;\n                    },\n                    templateUrl: '/js/ovpApp/rdvr/sub-header/sub-header.html'\n                },\n                appView: {\n                    component: 'rdvrPage'\n                }\n            }\n        });\n\n        $stateProvider.state('ovp.dvr.my-recordings', {\n            redirectTo: redirect,\n            data: {\n                pageTitle: 'DVR - My Recordings'\n            },\n            url: '/my-recordings',\n            component: 'myRecordings'\n        });\n\n        $stateProvider.state('ovp.dvr.scheduled', {\n            redirectTo: redirect,\n            data: {\n                pageTitle: 'DVR - Scheduled'\n            },\n            url: '/scheduled',\n            component: 'rdvrScheduled'\n        });\n\n        $stateProvider.state('ovp.dvr.priority', {\n            redirectTo: redirect,\n            data: {\n                pageTitle: 'DVR - Priority'\n            },\n            url: '/priority',\n            component: 'rdvrPriority'\n        });\n\n        function redirect(transition) {\n            return transition.injector().getAsync('setTopBoxes')\n                .then(() => {\n                    const name = transition.to().name;\n                    let needsRedirect;\n                    if (name === 'ovp.dvr') {\n                        needsRedirect = true;\n                    } else {\n                        const rdvrStateService = transition.injector().get('rdvrStateService');\n                        needsRedirect = !rdvrStateService.getState(name).enabled();\n                    }\n\n                    if (needsRedirect) {\n                        const stbService = transition.injector().get('stbService');\n                        return getDefaultState(stbService);\n                    }\n                });\n        }\n    }\n\n    function getDefaultState(stbService) {\n        return stbService.selectDefaultDvr().then(() => {\n            return stbService.getCurrentStb().then(setTopBox => {\n                return stbService.defaultDvrLanding().then(state => {\n                    let toState = 'ovp.dvr.my-recordings';\n\n                    if (setTopBox && (setTopBox.dvr || setTopBox.isDvr)) {\n                        toState = state;\n                    }\n\n                    return toState;\n                });\n            });\n        });\n    }\n}());\n"],"sourceRoot":"/source/"}