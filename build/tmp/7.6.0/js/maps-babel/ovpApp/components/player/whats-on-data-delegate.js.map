{"version":3,"sources":["ovpApp/components/player/whats-on-data-delegate.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,iCAAiC,CACrC,gBACA,uBACA,kBAEH,QAAQ,8BAA8B;;;IAG3C,SAAS,2BAA2B,cAAc,eAAe,IAAI,QAAQ,yBAAyB;QAClG,IAAI,SAAS,cAAc;;QAE3B,OAAO,IAAI,aAAa;YACpB,OAAO;YACP,eAAe,SAAA,cAAC,MAAI;gBAHhB,OAGqB,CAAC,KAAK;;YAC/B,YAAY;YACZ,UAAU,SAAA,WAAA;gBADN,OACY;;YAChB,WAAW,SAAA,UAAC,MAAI;gBACZ,OADiB,KAAK,aAAa,WAAW;;YAClD,SAAS,SAAA,QAAC,MAAI;gBAGV,OAHe,KAAK,aAAa,WAAW;;YAChD,YAAY,SAAA,WAAC,MAAI;gBAKb,OALkB,KAAK,cAAc,CAAC,KAAK;;YAC/C,QAAQ;YACR,WAAW,SAAA,UAAC,MAAS;gBACjB,IAAI,UAAU,CAAC,KAAK;gBACpB,IAAI,WAAW,KAAK,UAAU,CAAC,KAAK,QAAQ,SAAS;gBACrD,OAAO,wBAAwB,UAAU,SAAS,UAC7C,KAAK,UAAA,QAAM;oBAMZ,OANgB,OAAO;;;YAE/B,SAAS;YACT,6BAA6B,cAAc,cAAc,YAAY;gBACjE,OAAO,KAAK;eACb;YACH,iBAAiB;YACjB,kBAAkB;YAClB,MAAM;YACN,uBAAuB;YACvB,qBAAqB,SAAA,oBAAC,MAAS;gBAC3B,OAAO,KAAK,eAAgB,KAAK,kBAAkB;;YAEvD,aAAa,SAAA,YAAC,MAAS;gBACnB,OAAO,KAAK,kBAAkB;;YAElC,gBAAgB,SAAA,eAAC,MAAS;gBACtB,IAAI,QAAQ,KAAK,MAAM,KAAK,kBAAkB;gBAC9C,IAAI,UAAU,KAAK,MAAM,KAAK,kBAAkB;;gBAEhD,IAAI,mBAAmB;;gBAEvB,IAAI,QAAQ,GAAG;oBACX,iBAAiB,KAAK,QAAQ;;;gBAGlC,IAAI,UAAU,GAAG;oBACb,iBAAiB,KAAK,UAAU;;;gBAGpC,OAAO,iBAAiB,KAAK,QAAQ;;YAEzC,SAAS,SAAA,QAAC,MAAS;gBACf,IAAI,MAAM,KAAK,QAAQ;gBACvB,OAAO,OAAO,KAAK,gBACf,MAAM,KAAK,eAAgB,KAAK,kBAAkB;;YAE1D,eAAe;YACf,cAAc;YACd,cAAc;YACd,cAAc,OAAO,UAAA,MAAQ;gBACzB,OAAO,YAAwB;oBAO3B,IAPa,UAAO,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,KAAE,UAAA;;oBACzB,IAAI,MAAM,KAAK,WAAW,KAAK,QAAQ;oBACvC,IAAI,CAAC,KAAK;wBACN,OAAO;;;oBAGX,MAAM,kBAAkB,KAAK;oBAC7B,MAAM,kBAAkB,KAAK,YAAY,OAAO,MAAM;;oBAEtD,IAAI,QAAQ,OAAO;wBACf,MAAM,kBAAkB,KAAK,WAAW,QAAQ;;oBAEpD,IAAI,QAAQ,QAAQ;wBAChB,MAAM,kBAAkB,KAAK,YAAY,QAAQ;;;oBAGrD,IAAI,QAAQ,UAAU,QAAO,aAAW;wBACpC,MAAM,kBAAkB,KAAK,aAAa,QAAO;2BAC9C;wBACH,MAAM,kBAAkB,KAAK;;oBAEjC,OAAO,IAAI,QAAQ,WAAW;;;YAGtC,UAAU,OAAO,cAAc;YAC/B,oBAAoB;YACpB,gBAAgB;;;;;QAKpB,SAAS,kBAAkB,KAAK,aAAa;YACzC,IAAI,KAAK;gBACL,IAAI,WAAW,IAAI,SAAS;gBAC5B,OAAO,OAAO,WAAW,MAAM,OAAO;mBACnC;gBACH,OAAO;;;;KAIlB","file":"ovpApp/components/player/whats-on-data-delegate.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.player.whatsOnDelegate', [\n            'dataDelegate',\n            'ovpApp.dataDelegate',\n            'ovpApp.config'\n        ])\n        .factory('whatsOnViewModelDefinition', whatsOnViewModelDefinition);\n\n    /* @ngInject */\n    function whatsOnViewModelDefinition(DataDelegate, delegateUtils, $q, config, parentalControlsService) {\n        let cached = delegateUtils.cached;\n\n        return new DataDelegate({\n            title: 'title',\n            tmsProgramIds: (data) => [data.tmsProgramId],\n            tmsGuideId: 'tmsGuideId',\n            isSeries: () => false,\n            isEpisode: (data) => data.tmsProgramId.startsWith('EP'),\n            isMovie: (data) => data.tmsProgramId.startsWith('MV'),\n            allRatings: (data) => data.allRatings || [data.rating],\n            rating: 'rating',\n            isBlocked: (data) => {\n                let ratings = [data.rating];\n                let guideIds = data.channel ? [data.channel.tmsId] : undefined;\n                return parentalControlsService.isBlocked(ratings, guideIds)\n                    .then(result => result.isBlocked);\n            },\n            channel: 'channel',\n            isBlockedByParentalControls: delegateUtils.promiseCached(function () {\n                return this.isBlocked;\n            }, 'ParentalControls:updated'),\n            longDescription: 'shortDesc', // Only have a short description\n            shortDescription: 'shortDesc',\n            year: 'metadata.year',\n            scheduledStartTimeSec: 'startTimeSec',\n            scheduledEndTimeSec: (data) => {\n                return data.startTimeSec + (data.durationMinutes * 60);\n            },\n            durationSec: (data) => {\n                return data.durationMinutes * 60;\n            },\n            runtimeDisplay: (data) => {\n                let hours = Math.floor(data.durationMinutes / 60);\n                let minutes = Math.floor(data.durationMinutes % 60);\n\n                let formattedRuntime = [];\n\n                if (hours > 0) {\n                    formattedRuntime.push(hours + ' hr');\n                }\n\n                if (minutes > 0) {\n                    formattedRuntime.push(minutes + ' min');\n                }\n\n                return formattedRuntime.join(' ') || 'N/A';\n            },\n            isOnNow: (data) => {\n                let now = Date.now() / 1000;\n                return now >= data.startTimeSec &&\n                    now < data.startTimeSec + (data.durationMinutes * 60);\n            },\n            episodeNumber: 'metadata.episode',\n            seasonNumber: 'metadata.season',\n            episodeTitle: 'metadata.title',\n            networkImage: cached(data => {\n                return function (options = {}) {\n                    let uri = data.channel && data.channel.logoUrl;\n                    if (!uri) {\n                        return '';\n                    }\n\n                    uri = appendQueryString(uri, 'sourceType=colorhybrid');\n                    uri = appendQueryString(uri, 'apikey=' + config.oAuth.consumerKey);\n\n                    if (options.width) {\n                        uri = appendQueryString(uri, 'width=' + options.width);\n                    }\n                    if (options.height) {\n                        uri = appendQueryString(uri, 'height=' + options.height);\n                    }\n\n                    if (angular.isDefined(options.default)) {\n                        uri = appendQueryString(uri, 'default=' + options.default);\n                    } else {\n                        uri = appendQueryString(uri, 'default=true');\n                    }\n                    return uri.replace('http://', 'https://');\n                };\n            }),\n            imageUri: cached(delegateUtils.createProductImageFunction()),\n            vodProviderAssetId: 'vodProviderAssetId',\n            vodTmsSeriesId: 'vodTmsSeriesId'\n        });\n\n        /////////\n\n        function appendQueryString(uri, queryString) {\n            if (uri) {\n                let hasQuery = uri.includes('?');\n                return uri + (hasQuery ? '&' : '?') + queryString;\n            } else {\n                return '';\n            }\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}