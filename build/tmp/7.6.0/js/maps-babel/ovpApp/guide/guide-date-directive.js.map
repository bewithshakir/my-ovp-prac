{"version":3,"sources":["ovpApp/guide/guide-date-directive.js"],"names":[],"mappings":"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","file":"ovpApp/guide/guide-date-directive.js","sourcesContent":["/* globals document */\n(function () {\n    'use strict';\n\n    angular.module('ovpApp.guide')\n        .directive('guideDate', GuideDateDirective);\n\n\n    function GuideDateDirective(moment, $timeout, GuideService, $rootScope, $interpolate, rx) {\n\n\n        return {\n            restrict: 'E',\n            templateUrl: '/js/ovpApp/guide/guide-date-directive.html',\n            scope: {\n                onDateToggle: '=',\n                jumpToDay: '=',\n                times: '='\n            },\n            compile: function (tElement) {\n                var template = tElement.find('.time-container').html(),\n                    interpol = $interpolate(template);\n                tElement.find('.time-container').empty();\n                return function ($scope, $element) {\n                    var days = [],\n                        dayHeight = 0,\n                        zero = GuideService.getZeroHour(),\n                        startMoment = moment(zero),\n                        timesDeregister,\n                        localTimeIndex = 0,\n                        pendingMove = false,\n                        pendingPage = null,\n                        currentDay = null;\n\n                    $scope.timeIndex = 0;\n                    $scope.dayOffset = 0;\n                    $scope.dates = days;\n                    $scope.showDate = false;\n                    $scope.dateCarouselConfig = {\n                        ariaLabel: '',\n                        supportVariableWidth: true,\n                        arrowIconClass: 'small-arrow-icon',\n                        useArrows: false\n                    };\n\n                    generateDayList(startMoment.hours());\n\n                    updateCurrentDate(currentDay);\n\n                    // escape key should close date picker\n                    tElement.on('keyup', e => {\n                        if (e.which === 27) {\n                            if ($scope.showDate) {\n                                $scope.toggleDate();\n                                $timeout(() => {\n                                    angular.element('.date-picker-button').focus();\n                                });\n                            }\n                        }\n                    });\n\n                    $scope.$on('guide:timejump', (event, time) => {\n                        generateDayList(moment(time).hours());\n                    });\n\n                    $rootScope.$on('guide:updateTodaysDate', (event) => {\n                        $scope.handleDateClick(days[0], event);\n                    });\n\n                    $scope.jumpTo = function (date) {\n                        $rootScope.$broadcast('guide:timejump', date.start);\n                        startMoment = moment(date.start);\n                        pendingMove = true;\n                        localTimeIndex = $scope.times.indexOf(date.start);\n                        if (localTimeIndex < 0) {\n                            localTimeIndex = 0;\n                        }\n                        $scope.currentDate = date;\n                    };\n\n                    $scope.toggleDate = function () {\n                        $scope.showDate = !$scope.showDate;\n                        $scope.onDateToggle($scope.showDate);\n                        if ($scope.showDate) {\n                            focusCurrent();\n                        }\n                    };\n\n                    $scope.nextTimeBlock = function () {\n                        sendPageUpdate(4);\n                    };\n\n                    $scope.prevTimeBlock = function () {\n                        sendPageUpdate(-4);\n                    };\n\n                    timesDeregister = $scope.$watch('times', function (nv) {\n                        if (nv) {\n                            let contain = $element.find('.time-container');\n                            contain.append(nv.reduce((times, time, idx) => {\n                                times += interpol({\n                                    time: time,\n                                    visible: idx < 4\n                                });\n                                return times;\n                            }, ''));\n                            timesDeregister();\n                        }\n                    });\n\n                    //Find the height we need to shift the display by to show the _next_ element\n                    $timeout(function () {\n                        dayHeight = $element.find('.day-box').height();\n                    }, 100);\n\n\n                    $rootScope.$eventToObservable('guide:timeScroll')\n                        //Using debounce to limit the number of updates, this also keeps the screen reader happy\n                        .debounce(function () {\n                            return rx.Observable.timer(600);\n                        })\n                        .subscribe(function (data) {\n                            let hoursPastStart = data[1];\n                            $scope.timeIndex =  2 * (Math.floor(hoursPastStart));\n                            localTimeIndex = $scope.timeIndex;\n                            // Calculate currentTime where the user has scrolled to.\n                            let currentPosition = $scope.times[$scope.timeIndex];\n                            // Calculate the day from currentPosition.\n                            let daymovedTo = moment(currentPosition).startOf('day');\n                            // Set currentDay to the day where user has scrolled to.\n                            // This will be used to update the date/day in the day-box-container.\n                            currentDay = days.find(d => d.startOfDay === (daymovedTo.unix() * 1000));\n                            updateCurrentDate(currentDay);\n                            pendingMove = false;\n                            $scope.$apply();\n                        });\n\n                    function updateCurrentDate(currentDay) {\n                        let alertDate = $element.find('#date-time-alert').html();\n                        let newDate = startMoment.format('dddd MMMM Do');\n                        if (newDate !== alertDate) {\n                            $element.find('#date-time-alert').html(newDate);\n                        }\n                        $scope.currentDate = {\n                            dow: currentDay.dow,\n                            day: currentDay.day,\n                            ariaLabel: currentDay.ariaLabel,\n                            start: currentDay.start\n                        };\n                    }\n\n                    $scope.handleDateClick = function (item, $event) {\n                        currentDay = item;\n                        $scope.jumpTo(item);\n                        $event.preventDefault();\n\n                        if ($event.stopPropagation) {\n                            $event.stopPropagation();\n                        }\n                        //Force close instead of using toggleDate to make sure we are closing\n                        $scope.showDate = false;\n                        $scope.onDateToggle($scope.showDate);\n                    };\n\n                    $scope.focusDayBox = function () {\n                        $element.find('.day-box-holder').focus();\n                    };\n\n                    function generateDayList(hours) {\n                        zero = new Date(zero).setHours(hours);\n                        startMoment = moment(zero);\n                        days = []; // Reset\n                        $scope.dates = days;\n\n                        days.push({\n                            dow: 'Today',\n                            ariaLabel: 'Today, ' + moment(zero).format('MMMM Do'),\n                            day: moment(zero).format('MMM Do'),\n                            start: startMoment.unix() * 1000,\n                            startOfDay: startMoment.startOf('day').unix() * 1000\n                        });\n                        for (let i = 1; i < 14; i++) {\n                            let cd = moment(zero).add(i, 'days');\n                            let day = {\n                                dow: cd.format('dddd'),\n                                ariaLabel: cd.format('dddd, MMMM Do'),\n                                day: cd.format('MMM Do'),\n                                start: cd.unix() * 1000,\n                                startOfDay: cd.startOf('day').unix() * 1000\n                            };\n                            days.push(day);\n                        }\n                        currentDay = days[0];\n                    }\n\n                    function sendPageUpdate(moveIndex) {\n                        if ($scope.times[localTimeIndex + moveIndex]) {\n                            localTimeIndex = localTimeIndex + moveIndex;\n                            if (!pendingMove && pendingPage === null) {\n                                // set the startMoment when it has been changed\n                                // due to scrolling. It is used by timescroll to set the correct date.\n                                startMoment = moment($scope.times[localTimeIndex]);\n                                $rootScope.$broadcast('guide:timejump', $scope.times[localTimeIndex]);\n                                pendingMove = true;\n                            } else {\n                                if (pendingPage) {\n                                    $timeout.cancel(pendingPage);\n                                    pendingPage = null;\n                                }\n                                pendingPage = $timeout(function () {\n                                    $rootScope.$broadcast('guide:timejump', $scope.times[localTimeIndex]);\n                                    pendingMove = true;\n                                    pendingPage = null;\n                                });\n                            }\n                            updateTimeVisibility(localTimeIndex);\n                        }\n                    }\n\n                    function updateTimeVisibility(startIndex) {\n                        let range = getRange(startIndex, 4);\n                        // set the existing visible to hidden\n                        let visibleTimes = document.querySelectorAll('.time-position[aria-hidden=false]');\n                        for (var i = 0; i < visibleTimes.length; i++) {\n                            angular.element(visibleTimes[i]).attr('aria-hidden', true);\n                        }\n\n                        for (var n = 0; n < range.length; n++) {\n                            let el = document.querySelector('.time-position[time=\"' + $scope.times[range[n]] + '\"]');\n                            if (el) {\n                                angular.element(el).attr('aria-hidden', false);\n                            }\n                        }\n                    }\n\n                    function getRange(start, number) {\n                        return Array.from(new Array(number), (x,i) => i + start);\n                    }\n\n                    function focusCurrent() {\n                        //Make sure the UI has been updated\n                        $timeout(function () {\n                            var el = $element.find('.day-box:[start=' + currentDay.start + ']');\n                            if (el.length > 0) {\n                                el.focus();\n                            } else {\n                                $element.find('.day-box').first().focus();\n                            }\n                        });\n                    }\n                };\n            }\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}