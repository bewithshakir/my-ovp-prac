{"version":3,"sources":["ovpApp/data-delegates/recording.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,uBACP,QAAQ,gCAAgC;;;IAG7C,SAAS,6BAA6B,cAAc,eAAe,iBAAiB,IAAI,yBAAyB;QAC7G,IAAI,SAAS,cAAc;;QAE3B,OAAO,IAAI,aAAa;YACpB,OAAO;YACP,cAAc;YACd,eAAe,SAAA,gBAAY;gBACvB,OAAO,CAAC,KAAK;;YAEjB,cAAc,SAAA,aAAU,MAAM;gBAC1B,OAAO,KAAK,gBAAiB,KAAK,mBAAmB,KAAK,gBAAgB;;YAE9E,aAAa;YACb,WAAW,SAAA,YAAY;gBACnB,OAAO,CAAC,CAAC,KAAK;;YAElB,SAAS,SAAA,UAAY;gBACjB,OAAO,KAAK,cAAc,MAAM,KAAK,cAAc,GAAG,UAAU,GAAG,OAAO;;YAE9E,WAAW;YACX,mBAAmB;YACnB,aAAa;YACb,cAAc;YACd,OAAO;YACP,YAAY;YACZ,WAAW;YACX,UAAU;YACV,gBAAgB;YAChB,iBAAiB;YACjB,eAAe;YACf,cAAc;YACd,iBAAiB;YACjB,kBAAkB;YAClB,MAAM;YACN,QAAQ;YACR,oBAAoB;YACpB,WAAW,SAAA,YAAA;gBACP,OADa;;YACjB,SAAS,SAAA,UAAA;gBAGL,OAHW;;YACf,QAAQ,SAAA,OAAU,MAAM;gBACpB,OAAO,QAAQ,KAAK,mBAAmB,KAAK,gBAAgB,UAAU;;YAE1E,aAAa,SAAA,cAAY;gBACrB,OAAO,KAAK,OAAO,KAAK;;YAE5B,YAAY,SAAA,aAAY;gBACpB,OAAO,CAAC,KAAK;;YAEjB,QAAQ;YACR,WAAW,SAAA,UAAU,MAAM;gBACvB,IAAI,KAAK,cAAc,KAAK,WAAW,SAAS,GAAG;oBAC/C,OAAO,wBAAwB,UAAU,KAAK,YACzC,KAAK,UAAA,QAAU;wBACZ,KAAK,gBAAgB,OAAO;wBAC5B,OAAO,OAAO;;uBAEnB;oBACH,OAAO,GAAG,QAAQ;;;YAG1B,6BAA6B,cAAc,cAAc,YAAY;;;gBAGjE,OAAO,KAAK;eACb;YACH,iBAAiB;YACjB,UAAU,OAAO,cAAc,2BAC3B,SAAS,OAAO,MAAM;gBAClB,OAAO,KAAK,mBAAmB,KAAK,gBAAgB;;YAG5D,oBAAoB,OAAO,UAAU,MAAM;gBACvC,IAAI,KAAK,SAAS;oBACd,OAAO,KAAK,gBAAgB;uBACzB;oBACH,IAAI,KAAK,cAAc;wBACnB,OAAA,YAAiB,KAAK,eAAY,cAAY,KAAK;;;;YAI/D,YAAY,OAAO,YAAY;gBAC3B,IAAI,KAAK,WAAW;oBAChB,OAAO,CAAC,kBAAkB;wBACtB,aAAa,KAAK;wBAClB,WAAW,KAAK;wBAChB,SAAS,KAAK;wBACd,cAAc,KAAK,cAAc;;uBAElC;oBACH,OAAO,CAAC,iBAAiB;wBACrB,OAAO,KAAK,cAAc;wBAC1B,WAAW,KAAK;wBAChB,SAAS,KAAK;;;;YAI1B,UAAU,SAAA,WAAY;gBAClB,OAAO,gBAAgB,0BAA0B,KAAK,cAAc;;YAExE,WAAW,SAAA,YAAY;gBACnB,IAAI,KAAK,UAAU;oBACf,OAAQ,KAAK,SAAS,oBAAoB,KAAK,SAAS,iBAAkB;;;;;KAKzF","file":"ovpApp/data-delegates/recording.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.dataDelegate')\n        .factory('recordingViewModelDefinition', recordingViewModelDefinition);\n\n    /* @ngInject */\n    function recordingViewModelDefinition(DataDelegate, delegateUtils, BookmarkService, $q, parentalControlsService) {\n        let cached = delegateUtils.cached;\n\n        return new DataDelegate({\n            title: 'programMetadata.title',\n            episodeTitle: 'programMetadata.episodeTitle',\n            tmsProgramIds: function () {\n                return [this.tmsProgramId];\n            },\n            tmsProgramId: function (data) {\n                return data.tmsProgramId || (data.programMetadata && data.programMetadata.tmsProgramId);\n            },\n            tmsSeriesId: 'programMetadata.tmsSeriesId',\n            isEpisode: function () {\n                return !!this.tmsSeriesId;\n            },\n            isMovie: function () {\n                return this.tmsProgramIds[0] && this.tmsProgramIds[0].substring(0, 2) === 'MV';\n            },\n            dsQueryId: 'dsQueryId', // Analytics\n            searchResultIndex: 'searchResultIndex', // Analytics\n            searchFacet: 'searchFacet', // Analytics\n            recordSeries: 'recordSeries',\n            isNew: 'isNew',\n            conflicted: 'conflicted',\n            startTime: 'startUnixTimestampSeconds',\n            settings: 'settings',\n            displayChannel: 'displayChannel',\n            mystroServiceId: 'mystroServiceId',\n            episodeNumber: 'programMetadata.episodeNumber',\n            seasonNumber: 'programMetadata.seasonNumber',\n            longDescription: 'programMetadata.shortDescription',\n            shortDescription: 'programMetadata.longDescription',\n            crew: 'programMetadata.actors',\n            actors: 'programMetadata.actors',\n            actorsAndDirectors: 'programMetadata.actors',\n            directors: () => [],\n            writers: () => [],\n            genres: function (data) {\n                return data && data.programMetadata && data.programMetadata.genres || [];\n            },\n            genreString: function () {\n                return this.genres.join(', ');\n            },\n            allRatings: function () {\n                return [this.rating];\n            },\n            rating: 'programMetadata.rating',\n            isBlocked: function (data) {\n                if (this.allRatings && this.allRatings.length > 0) {\n                    return parentalControlsService.isBlocked(this.allRatings)\n                        .then(result => {\n                            data.blockedReason = result.reason;\n                            return result.isBlocked;\n                        });\n                } else {\n                    return $q.resolve(false);\n                }\n            },\n            isBlockedByParentalControls: delegateUtils.promiseCached(function () {\n                //This returns a value always, not a promise - the 'isBlocked' getter\n                //provides access to the promise directly.\n                return this.isBlocked;\n            }, 'ParentalControls:updated'),\n            isBlockedReason: 'blockedReason',\n            imageUri: cached(delegateUtils.createProductImageFunction(\n                function getUri(data) {\n                    return data.programMetadata && data.programMetadata.imageUrl;\n                }\n            )),\n            releaseInformation: cached(function (data) {\n                if (this.isMovie) {\n                    return data.programMetadata.releaseYear;\n                } else {\n                    if (this.seasonNumber) {\n                        return `Season ${this.seasonNumber} Episode ${this.episodeNumber}`;\n                    }\n                }\n            }),\n            clickRoute: cached(function () {\n                if (this.isEpisode) {\n                    return ['product.series', {\n                        tmsSeriesId: this.tmsSeriesId,\n                        serviceId: this.mystroServiceId,\n                        airtime: this.startTime,\n                        tmsProgramId: this.tmsProgramIds[0]\n                    }];\n                } else {\n                    return ['product.event', {\n                        tmsId: this.tmsProgramIds[0],\n                        serviceId: this.mystroServiceId,\n                        airtime: this.startTime\n                    }];\n                }\n            }),\n            bookmark: function () {\n                return BookmarkService.getBookmarkByTmsProgramId(this.tmsProgramIds[0]);\n            },\n            playedPct: function () {\n                if (this.bookmark) {\n                    return (this.bookmark.playMarkerSeconds / this.bookmark.runtimeSeconds) * 100;\n                }\n            }\n        });\n    }\n})();\n"],"sourceRoot":"/source/"}