{"version":3,"sources":["ovpApp/directives/ovp-dropdown.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,8BAA8B,CAClC,kCACA,4BAEH,UAAU,eAAe;;;IAG9B,SAAS,cAAc;;;;;;;;;;;;;;;;QAgBnB,OAAO;YACH,kBAAkB;YAClB,aAAa;YACb,YAAY;YACZ,cAAc;YACd,MAAM;YACN,UAAU;YACV,OAAO;gBACH,SAAS;gBACT,UAAU;;;;QAIlB,SAAS,KAAK,QAAQ;YAClB,OAAO,GAAG,cAAc,OAAO,GAAG,OAAO,eAAe;;;;;IAKhE,SAAS,WAAW,QAAQ,aAAa;QACrC,IAAI,KAAK;QACT,GAAG,SAAS,EAAE,QAAQ;QACtB,GAAG,WAAW;QACd,GAAG,SAAS,GAAG,UAAU;QACzB,GAAG,QAAQ,GAAG,SAAS;QACvB,GAAG,cAAc,GAAG,OAAO,kBAAkB,YAAY,GAAG,OAAO,gBAAgB,CAAC;QACpF,GAAG,gBAAgB;QACnB,GAAG,QAAQ;;QAEX;;;;QAIA,SAAS,WAAW;;QAIpB,SAAS,WAAW;YAChB,IAAI,aAAa;YACjB,IAAI,GAAG,OAAO,OAAO;gBACjB,IAAI,QAAQ,WAAW,GAAG,OAAO,QAAQ;oBACrC,OAAO,GAAG,OAAO,MAAM;uBACpB;oBACH,OAAO,GAAG,OAAO;;mBAElB;gBACH,OAAO,cAAc,WAAW,QAAQ;;;;QAIhD,SAAS,gBAAgB;YACrB,OAAO,GAAG,MAAM,GAAG;;;QAGvB,SAAS,MAAM,MAAM;YACjB,IAAI,QAAQ,GAAG,MAAM,QAAQ;YAC7B,IAAI,UAAU,GAAG,aAAa;gBAC1B,GAAG,cAAc;gBACjB,OAAO,MAAM,wBAAwB;;;YAGzC,IAAI,KAAK,eAAe;gBACpB,KAAK;;YAET,GAAG,cAAc;;;QAGrB,QAAQ,OAAO,MAAM,YAAY,0BAA0B,EAAC,QAAQ;;KAEvE","file":"ovpApp/directives/ovp-dropdown.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.directives.dropdown', [\n            'ovpApp.components.baseDropdown',\n            'ovpApp.directives.focus'\n        ])\n        .directive('ovpDropdown', ovpDropdown);\n\n    /* @ngInject */\n    function ovpDropdown() {\n        // Usage:\n        // <ovp-dropdown items=\"someArray\" config=\"configObj\"></ovp-dropdown>\n        //\n        // someArray = [{\n        //    text: \"this will display on a row of the dropdown\",\n        //    clickCallback: () => console.log(\"I've been clicked!\")\n        // }]\n        //\n        // config = {\n        //    title: (string or function) specifies what to display on the dropdown button itself. If a function\n        //        the function will be called with whatever the currently selected item is as a parameter.\n        //    description: (string) a message that will be visible at the top of the dropdown list after the\n        //        dropdown is expanded. This message cannot be clicked.\n        //    startingIndex: (number) The index of the item that should be selected initially.\n        // }\n        return {\n            bindToController: true,\n            templateUrl: '/js/ovpApp/directives/ovp-dropdown.html',\n            controller: Controller,\n            controllerAs: 'vm',\n            link: link,\n            restrict: 'EA',\n            scope: {\n                'items': '=',\n                'config': '='\n            }\n        };\n\n        function link($scope) {\n            $scope.vm.focusButton = $scope.vm.config.focusOnLoad || false;\n        }\n    }\n\n    /* @ngInject */\n    function Controller($scope, $controller) {\n        let vm = this;\n        vm.status = { isOpen: false };\n        vm.getTitle = getTitle;\n        vm.config = vm.config || {};\n        vm.items = vm.items || [];\n        vm.activeIndex = vm.config.startingIndex !== undefined ? vm.config.startingIndex : -1;\n        vm.getActiveItem = getActiveItem;\n        vm.click = click;\n\n        activate();\n\n        ///////////////////\n\n        function activate() {\n\n        }\n\n        function getTitle() {\n            let activeItem = getActiveItem();\n            if (vm.config.title) {\n                if (angular.isFunction(vm.config.title)) {\n                    return vm.config.title(activeItem);\n                } else {\n                    return vm.config.title;\n                }\n            } else {\n                return activeItem && activeItem.text || '';\n            }\n        }\n\n        function getActiveItem() {\n            return vm.items[vm.activeIndex];\n        }\n\n        function click(item) {\n            let index = vm.items.indexOf(item);\n            if (index !== vm.activeIndex) {\n                vm.activeIndex = index;\n                $scope.$emit('dropdown:itemclicked', item);\n            }\n\n            if (item.clickCallback) {\n                item.clickCallback();\n            }\n            vm.focusButton = true;\n        }\n\n        angular.extend(this, $controller('BaseDropdownController', {$scope: $scope}));\n    }\n})();\n"],"sourceRoot":"/source/"}