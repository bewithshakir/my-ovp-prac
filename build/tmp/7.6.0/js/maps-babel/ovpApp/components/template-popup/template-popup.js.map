{"version":3,"sources":["ovpApp/components/template-popup/template-popup.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;;yGACT;IACA,QAAQ,OAAO,mCAAmC,CAC1C,2BACA,2BACA,UACA,cAGP,QAAQ,iBAAiB,eACzB,SAAS,aAAa;QACnB,OAAO;;;;IAIX,SAAS,cAAc,IAAI,WAAW,kBAAkB,cAAc,cAAc;QAChF,IAAI,SAAS,SAAT,OAAmB,aAAa,OAAO,SAAS;YAChD,KAAK,cAAc;YACnB,KAAK,QAAQ;YACb,KAAK,UAAU,WAAW;;;QAG9B,OAAO,UAAU,WAAW,UAAU,OAAO;YACzC,KAAK,QAAQ;;;QAGjB,OAAO,UAAU,WAAW,YAAY;YACpC,OAAO,KAAK;;;QAGhB,OAAO,UAAU,QAAQ,YAAY;YACjC,KAAK,MAAM,MAAM;;;QAGrB,OAAO,UAAU,cAAc,YAAY;YACvC,KAAK,MAAM,MAAM,YAAY;;;QAGjC,OAAO,UAAU,WAAW,YAAY;YACpC,KAAK,MAAM,MAAM,SAAS;;;QAG9B,OAAO,UAAU,OAAO,YAAY;YAChC,IAAI,aAAa,GAAG;gBAChB,OAAO;gBACP,gBAAgB,iBAAiB,KAAK;;;YAG1C,KAAK,MAAM,kBAAkB,YAAY;;gBAErC,IAAI,gBAAgB,UAAU,IAAI;gBAClC,OAAO,cAAc,qBACb,QAAQ,QAAQ,oBAAoB,QAAQ,QAAQ;;;YAGhE,cAAc,KAAK,UAAU,UAAU;gBACnC,KAAK,MAAM,QAAQ,aAAa,KAAK;oBACjC,UAAU;oBACV,eAAe,QAAQ,UAAU,KAAK,QAAQ,iBAC1C,KAAK,QAAQ,gBAAgB;oBACjC,WAAW,QAAQ,UAAU,KAAK,QAAQ,aACtC,KAAK,QAAQ,YAAY;oBAC7B,yBAAyB,KAAK,QAAQ,2BAA2B;oBACjE,UAAU;oBACV,QAAQ,KAAK,MAAM;mBACpB,KAAK;eACT,YAAY;gBACX,MAAM;;;YAGV,WAAW,QAAQ,KAAK,YAAY;gBAChC,KAAK,MAAM;gBACX,KAAK,WAAW;;;YAGpB,KAAK,MAAM,gBAAgB,aAAa,UAAU,IAAI,YAAY;gBAC9D,KAAK;;;YAGT,OAAO,WAAW;;;QAGtB,OAAO;;KAEV","file":"ovpApp/components/template-popup/template-popup.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.components.templatePopup', [\n            'ovpApp.directives.focus',\n            'ovpApp.components.popup',\n            'ngAria',\n            'ui.router'\n        ]\n    )\n    .factory('TemplatePopup', TemplatePopup)\n    .constant('PopupType', {\n        ALERT: 'ALERT'\n    });\n\n    /* @ngInject */\n    function TemplatePopup($q, $injector, $templateRequest, popUpService, $transitions) {\n        var TPopup = function (templateUrl, scope, options) {\n            this.templateUrl = templateUrl;\n            this.scope = scope;\n            this.options = options || {};\n        };\n\n        TPopup.prototype.setScope = function (scope) {\n            this.scope = scope;\n        };\n\n        TPopup.prototype.getScope = function () {\n            return this.scope;\n        };\n\n        TPopup.prototype.close = function () {\n            this.scope.popup.close();\n        };\n\n        TPopup.prototype.removeClass = function () {\n            this.scope.popup.removeClass(arguments);\n        };\n\n        TPopup.prototype.addClass = function () {\n            this.scope.popup.addClass(arguments);\n        };\n\n        TPopup.prototype.show = function () {\n            var popupDefer = $q.defer(),\n                self = this,\n                templateDefer = $templateRequest(this.templateUrl);\n            // If video is playing and playerWrapper is visible,\n            // append any popup to playerWrapper div else append it to the body.\n            self.scope.parentContainer = function () {\n                // Eliminate circular dependency with playerService by getting a reference here at runtime.\n                let playerService = $injector.get('playerService');\n                return playerService.isValidPlayRoute() ?\n                        angular.element('#playerWrapper') : angular.element('body');\n            };\n\n            templateDefer.then(function (template) {\n                self.scope.popup = popUpService.show({\n                    template: template,\n                    showCloseIcon: angular.isDefined(self.options.showCloseIcon) ?\n                        self.options.showCloseIcon : true,\n                    className: angular.isDefined(self.options.className) ?\n                        self.options.className : '',\n                    overlayClickClosesPopup: self.options.overlayClickClosesPopup || false,\n                    deferred: popupDefer,\n                    config: self.scope.config\n                }, self.scope);\n            }, function () {\n                throw 'Error pulling template';\n            });\n\n            popupDefer.promise.then(function () {\n                self.scope.offPopupClose();\n                self.getScope().$destroy();\n            });\n\n            this.scope.offPopupClose = $transitions.onSuccess({}, function () {\n                self.close();\n            });\n\n            return popupDefer.promise;\n        };\n\n        return TPopup;\n    }\n}());\n"],"sourceRoot":"/source/"}