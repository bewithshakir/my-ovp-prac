{"version":3,"sources":["ovpApp/guide/guide-subheader-controller.js"],"names":[],"mappings":"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","file":"ovpApp/guide/guide-subheader-controller.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.guide')\n        .controller('GuideSubheaderController', GuideSubheaderController);\n\n    /* @ngInject */\n    function GuideSubheaderController($scope, $log, GuideService, $rootScope, ovpStorage, storageKeys, messages,\n        alert, $state, favoritesService, loadingDefer, $timeout, profileService, $q, modal,\n        CONFIRM_BUTTON_TYPE, errorCodesService) {\n        var vm = this;\n\n        vm.goToNow = goToNow;\n        vm.setPresetFilter = setPresetFilter;\n        vm.showDate = false;\n\n        vm.guideTime = null;\n        vm.timeIndex = 0;\n\n        let FILTER = {\n            QAM: () => true,\n            IP: () => true,\n            FAVORITES_QAM: (channel) => channel.favorite,\n            HD_QAM: (channel) => channel.hd,\n            SUBSCRIBED_IP: (channel) => channel.subscribed !== false,\n            TWCTV_QAM: (channel) => channel.twcTvEntitled,\n            FAVORITES_IP: (channel) => channel.favorite,\n            HD_IP: (channel) => channel.hd,\n            RECORDABLE_IP: (channel) => channel.cdvrRecordable\n        };\n\n        let TEST = {\n            FAVORITES: () => {\n                let fave = favoritesService.getFavorites();\n                if (!fave || fave.length === 0) {\n                    // This will remove the loading spinner from the screen which\n                    // gets invoked when we come to the Guide state.\n                    if (loadingDefer && loadingDefer.promise.$$state.pending) {\n                        loadingDefer.resolve();\n                    }\n                    const options = {\n                        preOkMessage: errorCodesService.getMessageForCode('WFV-1000'),\n                        okLabel: CONFIRM_BUTTON_TYPE.OK,\n                        cancelLabel: CONFIRM_BUTTON_TYPE.CANCEL,\n                        okAction: () => {\n                            $state.go('ovp.settings.favorites');\n                        },\n                        cancelAction: () => {\n                            setPresetFilter(vm.presets[0]);\n                        },\n                        showCloseIcon: false,\n                        overlayClickClosesPopup: false,\n                        ariaLabel: 'Favorites',\n                        ariaDescription: messages.getMessageForCode('MSG-9102')\n                    };\n\n                    modal.open({\n                        showCloseIcon: false,\n                        component: 'confirm',\n                        ariaDescribedBy: 'descriptionBlockText',\n                        ariaLabelledBy: 'labelText',\n                        resolve: {\n                            options\n                        }\n                    });\n\n                    return false;\n                }\n                return true;\n            }\n        };\n\n        let LABEL = {\n            ALL: 'All Channels',\n            FAVORITES: 'Favorites',\n            HD: 'HD',\n            ON_PC: 'On PC',\n            SUBSCRIBED: 'Subscribed',\n            RECORDABLE: 'Recordable'\n        };\n\n        let ID = {\n            ALL: 'all',\n            FAVORITES: 'favorites',\n            HD: 'hd',\n            ON_PC: 'onpc',\n            SUBSCRIBED: 'subscribed',\n            RECORDABLE: 'recordable'\n        };\n\n        let TITLE = {\n            ALL: 'View all your channels',\n            FAVORITES: 'View your favorite channels',\n            HD: 'View only HD channels',\n            ON_PC: 'View only streaming channels',\n            SUBSCRIBED: 'View only subscribed channels',\n            RECORDABLE: 'View only recordable channels'\n        };\n\n        vm.presets = [];\n\n        vm.filters = {\n            text: '',\n            preset: null\n        };\n\n        initFilterMenu();\n\n        vm.onDateToggle = onDateToggle;\n        vm.jumpToDay = jumpToDay;\n\n        $scope.$watch(() => GuideService.times, (nv) => {\n            vm.times = nv;\n        });\n\n        $scope.$watch('vm.channelSearch', function (nv) {\n            vm.filters.text = '';\n            let isValidNv = /^[a-z\\d]*$/i.test(nv);\n            if (nv && isValidNv) {\n                if (isFinite(nv) && !profileService.isSpecU()) {\n                    searchChannel(nv);\n                } else {\n                    vm.filters.text = nv;\n                }\n            } else if (vm.filters.text && isValidNv) {\n                vm.filters.text = nv;\n            }\n        });\n\n        function searchChannel(nv) {\n            //Let us put a timeout before sending guide:channelSearch so that grid is updated\n            //before searching the channel number.\n            $timeout(function () {\n                $rootScope.$broadcast('guide:channelSearch', nv);\n            });\n        }\n\n        $scope.$watch('vm.filters.text', function (nv, ov) {\n            if (nv != ov) {\n                $rootScope.$broadcast('guide:updateFilter', vm.filters);\n            }\n        });\n\n        $rootScope.$on('guide:timeScroll', function (event, hoursPastStart) {\n            vm.timeIndex =  2 * (Math.floor(hoursPastStart));\n            if (vm.times && vm.times[vm.timeIndex]) {\n                vm.guideTime = vm.times[vm.timeIndex];\n                $scope.$apply();\n            }\n        });\n\n        function getFilterPreset() {\n            let id = ovpStorage.getItem(storageKeys.guideFilter), preset;\n            if (id) {\n                preset = vm.presets.find(preset => preset.id === id);\n            }\n            return preset || vm.presets[0];\n        }\n\n        function onDateToggle(val) {\n            vm.showDate = val;\n        }\n\n        function jumpToDay(time) {\n            $rootScope.$broadcast('guide:timejump', time);\n        }\n\n        function goToNow() {\n            $rootScope.$broadcast('guide:timejump', vm.times[0]);\n            $rootScope.$broadcast('guide:updateTodaysDate');\n        }\n\n        function setPresetFilter(preset, evt = null) {\n            if (!preset || (preset.test && !preset.test())) {\n                return false;\n            }\n            vm.filters.preset = preset;\n            ovpStorage.setItem(storageKeys.guideFilter, preset.id);\n            $rootScope.$broadcast('guide:updateFilter', vm.filters);\n\n\n            // Analytics\n            if (evt !== null) {\n                $rootScope.$broadcast('Analytics:guide:updateFilter', {\n                    filter: preset,\n                    triggeredBy: (evt === null ? 'application' : 'user')\n                });\n            }\n\n            //After updating the filter if there was an existing search on,\n            //we need to search again\n            if (isFinite(vm.channelSearch)) {\n                searchChannel(vm.channelSearch);\n            }\n            return preset;\n        }\n\n        /**\n         * Initialize the filters menue based on the capabilities.\n         */\n        function initFilterMenu() {\n            profileService.isIpOnlyEnabled().then(isIpEnabled => {\n                let isSpecU = profileService.isSpecU();\n\n                if (isIpEnabled) {\n                    // This is an IP only service. Only entitled IP channels are sent.\n                    // Omit the \"On PC\"\n                    addFilter(ID.ALL, TITLE.ALL, LABEL.ALL, FILTER.IP);\n                    addFilter(ID.FAVORITES, TITLE.FAVORITES, LABEL.FAVORITES, FILTER.FAVORITES_IP, TEST.FAVORITES);\n                } else {\n                    addFilter(ID.ALL, TITLE.ALL, LABEL.ALL, FILTER.QAM);\n                    addFilter(ID.FAVORITES, TITLE.FAVORITES, LABEL.FAVORITES, FILTER.FAVORITES_QAM, TEST.FAVORITES);\n                    if (!isSpecU) {\n                        //HD and ON PC filters do not apply for SpecU\n                        addFilter(ID.HD, TITLE.HD, LABEL.HD, FILTER.HD_QAM);\n                        addFilter(ID.ON_PC, TITLE.ON_PC, LABEL.ON_PC, FILTER.TWCTV_QAM);\n                    }\n                }\n\n                setPresetFilter(getFilterPreset());\n            });\n        }\n\n        /**\n         * Add the filter to the presets\n         * @param id The ID of the filter\n         * @param title The filter title\n         * @param label The filter label\n         * @param filter The filter method\n         */\n        function addFilter(id, title, label, filter, test) {\n            vm.presets.push(\n                {\n                    id:     id,\n                    title:  title,\n                    label:  label,\n                    filter: filter,\n                    test: test\n                }\n            );\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}