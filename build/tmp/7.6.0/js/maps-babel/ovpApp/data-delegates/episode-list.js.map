{"version":3,"sources":["ovpApp/data-delegates/episode-list.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;;;0FACT;IACA,QAAQ,OAAO,uBACV,QAAQ,kCAAkC,gCAC1C,IAAI;;;;;;;;;IAST,SAAS,+BAA+B,cAAc,QAAQ,IAC1D,eAAe,yBAAyB,iBAAiB,qBACzD,2BAA2B;QAC3B,IAAI,SAAS,cAAc;;QAE3B,OAAO,IAAI,aAAa;YACpB,eAAe,SAAA,gBAAA;gBADX,OACiB;;YACrB,OAAO;YACP,aAAa;YACb,WAAW;YACX,mBAAmB;YACnB,aAAa;YACb,UAAU,SAAA,WAAA;gBACN,OADY;;YAChB,WAAW,SAAA,YAAA;gBAGP,OAHa;;YACjB,SAAS;YACT,8BAA8B;YAC9B,oBAAoB;YACpB,0BAA0B;YAC1B,uBAAuB;YACvB,wBAAwB;YACxB,mBAAmB,OAAO,UAAU,MAAM;gBACtC,OAAO,KAAK,QACP,IAAI,UAAA,QAAM;oBAIX,OAJe,OAAO,SAAS,OAAO,UAAC,OAAO,SAAY;wBACtD,IAAI,CAAC,QAAQ,WAAW;4BACpB,OAAO,QAAQ;+BACZ;4BACH,OAAO;;uBAEZ;mBACF,OAAQ,UAAC,OAAO,OAAK;oBAKtB,OAL2B,SAAS;mBAAQ;;;YAGpD,aAAa,SAAA,YAAU,MAAM;;;;gBAIzB,IAAI,gBAAgB,UAAU,KAAK,OAAO;gBAC1C,OAAO,cAAc,iBAAiB,MAAM,KAAK,QAAQ;;YAE7D,YAAY;YACZ,QAAQ;YACR,WAAW,SAAA,UAAU,MAAM;gBACvB,OAAO,wBAAwB,UAC3B,KAAK,QAAQ,YACb,KAAK,sBACL,KAAK,QAAQ,WACZ,KAAK,UAAA,QAAU;oBACZ,KAAK,gBAAgB,OAAO;oBAC5B,OAAO,OAAO;;;YAG1B,6BAA6B,cAAc,cAAc,YAAY;;;gBAGjE,OAAO,KAAK;eACb;YACH,iBAAiB;YACjB,YAAY;YACZ,oBAAoB;YACpB,qBAAqB;YACrB,gBAAgB;YAChB,eAAe;YACf,aAAa,cAAc;YAC3B,MAAM,OAAO,UAAU,MAAM;gBAGzB,IAAI,QAAQ;;gBAFZ,IAAI,KAAK,QAAQ,MAAM;oBACnB,KAAK,QAAQ,KAAK,QAAQ,UAAA,YAAU;wBAKhC,OALoC,WAAW,cAAW;;oBAC9D,OAAO,KAAK,QAAQ,KAAK,IAAI,UAAA,GAAC;wBAO1B,OAP8B,0BAA0B,eAAe;;uBACxE;oBACH,OAAO;;;YAGf,QAAQ,OAAO,YAAY;gBACvB,OAAO,KAAK,KAAK,OAAO,UAAA,YAAU;oBAS9B,OATkC,WAAW,QAAQ;;;YAE7D,cAAc,OAAO,YAAY;gBAC7B,OAAO,KAAK,OAAO,IAAI,UAAA,OAAK;oBAWxB,OAX4B,MAAM;mBAAM,MAAM,GAAG,GAAG,KAAK;;YAEjE,oBAAoB,OAAO,YAAY;gBACnC,OAAO,KAAK,KAAK,OAAO,UAAA,YAAU;oBAa9B,OAbkC,WAAW,QAAQ,WAAW,WAAW,QAAQ;;;YAE3F,WAAW,OAAO,YAAY;gBAC1B,OAAO,KAAK,KAAK,OAAO,UAAA,YAAU;oBAe9B,OAfkC,WAAW,QAAQ;;;YAE7D,SAAS,OAAO,YAAY;gBACxB,OAAO,KAAK,KAAK,OAAO,UAAA,YAAU;oBAiB9B,OAjBkC,WAAW,QAAQ;;;YAE7D,0BAA0B;YAC1B,eAAe,OAAO,UAAU,MAAM;gBAClC,OAAO,KAAM,WACT,KAAK,QAAQ,kBACb,KAAK,QAAQ,eAAe,iBAAkB;;YAEtD,cAAc,OAAO,YAAY;gBAC7B,OAAO,KAAK,cAAc;;YAE9B,SAAS;YACT,cAAc,OAAO,cAAc;;YAEnC,aAAa,OAAO,UAAU,MAAM;gBAChC,OAAO,KAAK,WACR,KAAK,QAAQ,kBACb,KAAK,QAAQ,eAAe,WAC3B,IAAI,UAAA,QAAM;oBAcX,OAde,OAAO,iBAAiB;mBACtC,OAAO,UAAA,GAAC;oBAeT,OAfa,CAAC,CAAC;mBACd,OAAO,UAAC,MAAM,SAAY;oBACvB,QAAQ,QAAQ,UAAA,MAAQ;wBACpB,IAAI,cAAc,QAAQ,OAAO;4BAC7B,IAAI,KAAK,QAAQ,QAAQ,cAAc,QAAQ,SAAS,GAAG;gCACvD,KAAK,QAAQ,KAAK,cAAc,QAAQ;;+BAEzC,IAAI,cAAc,QAAQ,OAAO;4BACpC,IAAI,KAAK,WAAW,QAAQ,cAAc,QAAQ,SAAS,GAAG;gCAC1D,KAAK,WAAW,KAAK,cAAc,QAAQ;;;;oBAIvD,OAAO;mBACR,EAAC,SAAS,IAAI,YAAY;;YAErC,eAAe;YACf,mBAAmB;YACnB,UAAU,OAAO,cAAc;YAC/B,eAAe,OAAO,UAAU,MAAM;gBAClC,OAAO,KAAK,WAAW,KAAK,QAAQ,kBAChC,gBAAgB,eAAe,KAAK,QAAQ;;YAEpD,SAAS,OAAO,UAAU,MAAM;gBAe5B,IAAI,SAAS;;gBAdb,IAAI,KAAK,SAAS;oBACd,OAAO,KAAK,QAAQ,IAAI,UAAA,QAAU;wBAC9B,OAAO,WAAW,OAAO,SAAS,IAAI,UAAA,SAAW;4BAC7C,IAAI,KAAK,gBAAgB,eAAe;4BACxC,GAAG,eAAY;4BACf,OAAO;;wBAEX,OAAO;;uBAER;oBACH,OAAO;;;YAGf,kBAAkB;YAClB,YAAY;YACZ,YAAY,OAAO,UAAU,MAAM;gBAC/B,OAAO,CAAC,kBAAkB;oBACtB,aAAa,KAAK;oBAClB,KAAK,KAAK;;;YAGlB,QAAQ,OAAO,UAAU,MAAM;gBAC3B,IAAI,QAAQ,KAAK,SAAS;oBACtB,IAAI,KAAK,QAAQ,QAAQ;wBACrB,OAAO,KAAK,QAAQ,OAAO,IAAI,UAAA,GAAC;4BAiB5B,OAjBgC,EAAE;;2BACnC,IAAI,KAAK,QAAQ,kBAAkB,KAAK,QAAQ,eAAe,QAAQ,QAAQ;wBAClF,OAAO,KAAK,QAAQ,eAAe,QAAQ,OAAO,IAAI,UAAA,GAAC;4BAmBnD,OAnBuD,EAAE;;;uBAE9D;oBACH,OAAO;;;YAGf,aAAa,SAAA,cAAY;gBACrB,OAAO,KAAK,SAAS,KAAK,OAAO,KAAK,QAAQ;;YAElD,gBAAgB;YAChB,QAAQ;YACR,SAAS;YACT,UAAU;YACV,uBAAuB;YACvB,qBAAqB;YACrB,eAAe;YACf,OAAO;YACP,kBAAkB;;;;;IAK1B,SAAS,iBAAiB,gCAAgC,iBAAiB;QACvE,SAAS,cAAc,OAAO;YAC1B,OAAO,MAAM,SAAS;;;QAG1B,gBAAgB,2BAA2B,gCAAgC;;KAE9E","file":"ovpApp/data-delegates/episode-list.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.dataDelegate')\n        .factory('episodeListViewModelDefinition', episodeListViewModelDefinition)\n        .run(registerDelegate);\n\n    /**\n     * \"Episode-list\" objects are used to represent a series, usually in a non\n     * search context. Not to be confused with \"Series\" objects, which are also\n     * used to represent a series, but only come up inside search.\n     */\n\n    /* @ngInject */\n    function episodeListViewModelDefinition(DataDelegate, config, $q,\n        delegateUtils, parentalControlsService, delegateFactory, EntitlementsService,\n        personViewModelDefinition) {\n        let cached = delegateUtils.cached;\n\n        return new DataDelegate({\n            resultDisplay: () => 'Series',\n            title: 'title',\n            tmsSeriesId: 'tmsSeriesId',\n            dsQueryId: 'dsQueryId', // Analytics\n            searchResultIndex: 'searchResultIndex', // Analytics\n            searchFacet: 'searchFacet', // Analytics\n            isSeries: () => true,\n            isEpisode: () => false,\n            actions: 'actionGroups.defaultGroup.actionObjects',\n            cdvrChannelPickerTmsGuideIds: 'cdvrChannelPickerTmsGuideIds',\n            availableOutOfHome: 'availableOutOfHome',\n            linearAvailableOutOfHome: 'linearAvailableOutOfHome',\n            vodAvailableOutOfHome: 'vodAvailableOutOfHome',\n            tvodAvailableOutOfHome: 'tvodAvailableOutOfHome',\n            episodesAvailable: cached(function (data) {\n                return data.seasons\n                    .map(season => season.episodes.reduce((total, episode) => {\n                        if (!episode.isPreview) {\n                            return total + 1;\n                        } else {\n                            return total;\n                        }\n                    }, 0))\n                    .reduce(((total, count) => total += count), 0);\n            }),\n\n            newEpisodes: function (data) {\n                //TODO: this is dependant on time, so the current caching won't work.\n                //  But millisecond accuracy is far from necessary (heck, hours would\n                //  probably be ok), so adding a timeout to the caching would be nice.\n                let thresholdMsec = 3600000 * 24 * config.newEpisodeThreshold;\n                return delegateUtils.getEpisodesSince(data, Date.now() - thresholdMsec);\n            },\n            allRatings: 'details.allRatings',\n            rating: 'details.allRatings[0]',\n            isBlocked: function (data) {\n                return parentalControlsService.isBlocked(\n                    data.details.allRatings,\n                    data.ipTmsGuideServiceIds,\n                    data.details.allIpVPPs)\n                    .then(result => {\n                        data.blockedReason = result.reason;\n                        return result.isBlocked;\n                    });\n            },\n            isBlockedByParentalControls: delegateUtils.promiseCached(function () {\n                //This returns a value always, not a promise - the 'isBlocked' getter\n                //provides access to the promise directly.\n                return this.isBlocked;\n            }, 'ParentalControls:updated'),\n            isBlockedReason: 'blockedReason',\n            isEntitled: 'details.entitled',\n            isLinearEntitledIp: 'details.linearEntitledIp',\n            isLinearEntitledQam: 'details.linearEntitledQam',\n            isTvodEntitled: 'details.tvodEntitled',\n            isOutOfWindow: 'vodOutOfWindow',\n            description: delegateUtils.descriptionTypes,\n            crew: cached(function (data) {\n                if (data.details.crew) {\n                    data.details.crew.forEach(crewMember => crewMember.parentAsset = this);\n                    return data.details.crew.map(c => personViewModelDefinition.createInstance(c));\n                } else {\n                    return [];\n                }\n            }),\n            actors: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'actor');\n            }),\n            actorsString: cached(function () {\n                return this.actors.map(actor => actor.name).slice(0, 3).join(', ');\n            }),\n            actorsAndDirectors: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'actor' || crewMember.role == 'director');\n            }),\n            directors: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'director');\n            }),\n            writers: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'writer');\n            }),\n            watchListProviderAssetId: 'details.latest_episode.details.watchListProviderAssetID',\n            tmsProgramIds: cached(function (data) {\n                return (data.details &&\n                    data.details.latest_episode &&\n                    data.details.latest_episode.tmsProgramIds) || [];\n            }),\n            tmsProgramId: cached(function () {\n                return this.tmsProgramIds[0];\n            }),\n            network: 'network',\n            networkImage: cached(delegateUtils.createNetworkImageFunction()),\n            //Compile the format and details list for display on the product page\n            streamProps: cached(function (data) {\n                return data.details &&\n                    data.details.latest_episode &&\n                    data.details.latest_episode.streamList\n                    .map(stream => stream.streamProperties.attributes)\n                    .filter(a => !!a)\n                    .reduce((list, current) => {\n                        current.forEach(attr => {\n                            if (delegateUtils.formats[attr]) {\n                                if (list.formats.indexOf(delegateUtils.formats[attr]) < 0) {\n                                    list.formats.push(delegateUtils.formats[attr]);\n                                }\n                            } else if (delegateUtils.details[attr]) {\n                                if (list.attributes.indexOf(delegateUtils.details[attr]) < 0) {\n                                    list.attributes.push(delegateUtils.details[attr]);\n                                }\n                            }\n                        });\n                        return list;\n                    }, {formats: [], attributes: []});\n            }),\n            totalEpisodes: 'details.totalEpisodes',\n            isSeriesRecording: 'details.seriesRecording',\n            imageUri: cached(delegateUtils.createProductImageFunction()),\n            latestEpisode: cached(function (data) {\n                return data.details && data.details.latest_episode &&\n                    delegateFactory.createInstance(data.details.latest_episode);\n            }),\n            seasons: cached(function (data) {\n                if (data.seasons) {\n                    return data.seasons.map(season => {\n                        season.episodes = season.episodes.map(episode => {\n                            let ep = delegateFactory.createInstance(episode);\n                            ep.parentSeries = this;\n                            return ep;\n                        });\n                        return season;\n                    });\n                } else {\n                    return [];\n                }\n            }),\n            commonSenseMedia: 'details.commonSenseMediaV2.rating',\n            metaCritic: 'details.metacritic.rating',\n            clickRoute: cached(function (data) {\n                return ['product.series', {\n                    tmsSeriesId: data.tmsSeriesId,\n                    uri: data.uri\n                }];\n            }),\n            genres: cached(function (data) {\n                if (data && data.details) {\n                    if (data.details.genres) {\n                        return data.details.genres.map(g => g.name);\n                    } else if (data.details.latest_episode && data.details.latest_episode.details.genres) {\n                        return data.details.latest_episode.details.genres.map(g => g.name);\n                    }\n                } else {\n                    return [];\n                }\n            }),\n            genreString: function () {\n                return this.genres ? this.genres.join(', ') : '';\n            },\n            sportsCategory: 'details.sportsResultsCategory',\n            isLive: 'details.isLive',\n            isOnNow: 'details.isOnNow',\n            isReplay: 'details.isReplay',\n            scheduledStartTimeSec: 'details.schedStartTimeSec',\n            scheduledEndTimeSec: 'details.schedEndTimeSec',\n            staleDvrCache: 'details.staleDvrCache',\n            price: null,\n            rentalExpiration: null\n        });\n    }// end series factory function\n\n    /* @ngInject */\n    function registerDelegate(episodeListViewModelDefinition, delegateFactory) {\n        function isEpisodeList(asset) {\n            return asset.type === 'episode_list';\n        }\n\n        delegateFactory.registerDelegateDefinition(episodeListViewModelDefinition, isEpisodeList);\n    }\n}());\n"],"sourceRoot":"/source/"}