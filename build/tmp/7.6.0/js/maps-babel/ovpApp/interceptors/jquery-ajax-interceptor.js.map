{"version":3,"sources":["ovpApp/interceptors/jquery-ajax-interceptor.js"],"names":[],"mappings":"AAAA;AACA;;AAAA,CAAC,YAAY;;4FACT;IACA,QAAQ,OAAO,8BAA8B,CAAC,iBAAiB,iBAC1D,IAAI;;;;;;;IAOT,SAAS,sBAAsB,WAAW,SAAS,cAAc,QAAQ;QACrE,IAAI,IAAI,OAAO;YACX,eAAe,EAAE;;QAErB,EAAE,cAAc,UAAU,SAAS;YAC/B,IAAI,cAAa,QAAQ;YACzB,OAAO,OAAO,SAAS;;gBAEnB,YAAY,SAAA,WAAU,KAAK,UAAU;oBACjC,IAAI,QAAQ,QAAQ,MAAM;wBACtB,IAAI,SAAS,aAAa,eAAe;wBACzC,IAAI,iBAAiB,iBAAiB,OAAO;;;wBAG7C,WAAW,YAAY;wBACvB,SAAS,UAAU,CAAC;4BAChB,KAAK;4BACL,OAAO,OAAO;;;;oBAItB,IAAI,eAAc,OAAO,gBAAe,YAAY;wBAChD,YAAW,KAAK;;;;;gBAKxB,WAAW;oBACP,iBAAiB;;;;;QAK7B,EAAE,OAAO,UAAU,SAAS;YACxB,IAAI;;;YAGJ,IAAI,WAAW,CAAC,QAAQ,iBAAiB,QAAQ,OAAO,QAAQ,IAAI,QAAQ,OAAO,YAAY,GAAG;gBAE9F,IAAI,OAAO,CAAC,YAAY;oBADxB,IAAI,MAAM,IAAI;;;oBAGd,aAAa,kBAAkB,KAAK,UAAU,eAAe;wBACzD,IAAI,eAAe;4BACf,aAAa,SAAS,KAAK,IAAI,SAAS,KAAK,IAAI;+BAC9C;4BACH,IAAI,QAAQ,OAAO;gCACf,QAAQ,MAAM;;4BAElB,IAAI,OAAO;;;oBAGnB,OAAA;wBAGQ,GAHD,IAAI;;;;gBAOX,IAAI,OAAO,SAAS,UAAU,OAAO,KAAK;mBANvC;gBACH,UAAU,aAAa;;;YAG3B,OAAO;;;QAGX,SAAS,QAAQ,KAAK;YAClB,OAAO,OAAO,MAAM,OAAO,KAAK,UAAU,MAAM;gBAC5C,IAAI,IAAI,QAAQ,MAAM;gBACtB,OAAO,KAAK,OAAO,IAAI,QAAQ,OAAO;;;;QAI9C,SAAS,aAAa,aAAa;YAC/B,IAAI,WAAW,IAAI;YACnB,IAAI,CAAC,aAAa;gBACd,SAAS;mBACN;gBACH,YAAY,gBAAgB;gBAC5B,YAAY,aAAa,YAAY,cAAc;;gBAEnD,aAAa,aACR,KAAK,SAAS,QAAQ,KAAK,WAC3B,KAAK,SAAS,OAAO,KAAK;;YAEnC,OAAO,SAAS;;;KAGvB","file":"ovpApp/interceptors/jquery-ajax-interceptor.js","sourcesContent":["/* globals Deferred, window */\n(function () {\n    'use strict';\n    angular.module('ovpApp.interceptors.jquery', ['ovpApp.config', 'ovpApp.oauth'])\n        .run(jqueryAjaxInterceptor);\n\n    /**\n     * Moved from the oauth-manager in an attempt to reduce legacy module code. This sets up the jquery.ajax method\n     * to add the oauth tokens to jquery ajax reqests.\n     */\n    /* @ngInject */\n    function jqueryAjaxInterceptor($injector, selectn, OauthService, config) {\n        var $ = window.jQuery,\n            originalAjax = $.ajax ;\n\n        $.ajaxPrefilter(function (options) {\n            var beforeSend = options.beforeSend;\n            Object.assign(options, {\n                // sign request if it's through PI\n                beforeSend: function (xhr, settings) {\n                    if (isOauth(options.url)) {\n                        let header = OauthService.getOAuthHeader(options);\n                        xhr.setRequestHeader('Authorization', header.Authorization);\n\n                        // set data for headers (required for IE CORS)\n                        settings = settings || {};\n                        settings.headers = [{\n                            key: 'Authorization',\n                            value: header.Authorization\n                        }];\n                    }\n\n                    if (beforeSend && typeof beforeSend === 'function') {\n                        beforeSend(xhr, settings);\n                    }\n                },\n\n                // send headers for CORS\n                xhrFields: {\n                    withCredentials: true\n                }\n            });\n        });\n\n        $.ajax = function (options) {\n            var promise; // promise when done\n\n            // only check oauth token if going through PI\n            if (options && !options.bypassRefresh && options.url && options.url.indexOf(config.piHost) === 0) {\n                let def = new Deferred();\n                //Check if the user is authenticated before continuing. This is effectively the same as the\n                //Angular oauthInterceptor. Just for legacy requests.\n                OauthService.isAuthenticated().then(function (authenticated) {\n                    if (authenticated) {\n                        afterRefresh(options).done(def.resolve).fail(def.reject);\n                    } else {\n                        if (options.error) {\n                            options.error('not_logged_in');\n                        }\n                        def.reject('not_logged_in');\n                    }\n                });\n                return def.promise();\n            } else {\n                promise = originalAjax(options);\n            }\n\n            return promise;\n        };\n\n        function isOauth(url) {\n            return config.oAuth.routes.some(function (path) {\n                var c = selectn(path, config);\n                return c && url && url.indexOf(c) === 0;\n            });\n        }\n\n        function afterRefresh(ajaxOptions) {\n            var deferred = new Deferred();\n            if (!ajaxOptions) {\n                deferred.resolve();\n            } else {\n                ajaxOptions.bypassRefresh = true;\n                ajaxOptions.statusCode = ajaxOptions.statusCode || {};\n\n                originalAjax(ajaxOptions)\n                    .done(deferred.resolve.bind(deferred))\n                    .fail(deferred.reject.bind(deferred));\n            }\n            return deferred.promise();\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}