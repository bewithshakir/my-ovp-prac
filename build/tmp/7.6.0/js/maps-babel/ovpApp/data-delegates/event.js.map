{"version":3,"sources":["ovpApp/data-delegates/event.js"],"names":[],"mappings":"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","file":"ovpApp/data-delegates/event.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.dataDelegate')\n        .factory('eventViewModelDefinition', eventViewModelDefinition)\n        .run(registerDelegate);\n\n    /**\n     * \"Event\" objects are used to represent a movie or episode, usually in a non\n     * search context. Not to be confused with \"Product\" objects, which are also\n     * used to represent a movie, but only come up inside search.\n     */\n\n    /* @ngInject */\n    function eventViewModelDefinition(DataDelegate, BookmarkService, $q,\n        delegateUtils, $filter, parentalControlsService, dateFormat, delegateFactory,\n        EntitlementsService, config, $state, messages, streamViewModelDefinition, CDVR_STATE,\n        personViewModelDefinition) {\n        let cached = delegateUtils.cached;\n\n        return new DataDelegate({\n            _mutator: function (data) {\n                return data && data.media && data.media.results && data.media.results[0] || data;\n            },\n            resultDisplay: function () {\n                return this.isEpisode ? 'Episode' : 'Movie';\n            },\n            title: 'title',\n            seriesTitle: cached(function (data) {\n                if (data.details && data.details.programType) {\n                    if (data.details.programType === 'Series') {\n                        return data.seriesTitle;\n                    } else {\n                        //This is not a series, return undefined\n                        return undefined;\n                    }\n                } else {\n                    //We don't know what this is so just blindly return seriesTitle\n                    return data.seriesTitle;\n                }\n            }),\n            tmsProgramIds: 'tmsProgramIds',\n            tmsSeriesId: 'tmsSeriesId',\n            dsQueryId: 'dsQueryId', // Analytics\n            searchResultIndex: 'searchResultIndex', // Analytics\n            searchFacet: 'searchFacet', // Analytics\n            providerAssetIds: 'providerAssetIds',\n            isSeries: () => false,\n            isEpisode: function (data) {\n                return data.details &&\n                    data.details.programType &&\n                    data.details.programType == 'Series';\n            },\n            actions: 'actionGroups.defaultGroup.actionObjects',\n            hasOtherWaysToWatch: function () {\n                return this.hasWatchHereActions || this.hasWatchOnTvActions;\n            },\n            hasWatchOnTvActions: function () {\n                return this.watchOnTvActions.length > 0;\n            },\n            watchOnTvActions: cached(function (data) {\n                let watchOnTvGroup = (data.actionGroups.othersGroup || [])\n                    .find(action => action.title === 'Watch On TV');\n                return (watchOnTvGroup && watchOnTvGroup.actionObjects) || [];\n            }),\n            hasWatchHereActions: function () {\n                return this.watchHereActions.length > 0;\n            },\n            watchHereActions: cached(function (data) {\n                let watchGroup = (data.actionGroups.othersGroup || [])\n                    .find(action => action.title === 'Watch Here');\n                return (watchGroup && watchGroup.actionObjects) || [];\n            }),\n            otherWaysToWatch: 'actionGroups.othersGroup',\n            allRatings: 'details.allRatings',\n            rating: 'details.allRatings[0]',\n            isBlocked: function (data) {\n                if (data.details.allRatings && data.details.allRatings.length > 0) {\n                    return parentalControlsService.isBlocked(data.details.allRatings,\n                        data.ipTmsGuideServiceIds,\n                        data.details.allIpVPPs)\n                        .then(result => {\n                            data.blockedReason = result.reason;\n                            return result.isBlocked;\n                        });\n                } else {\n                    return $q.resolve(false);\n                }\n            },\n            isBlockedByParentalControls: delegateUtils.promiseCached(function () {\n                //This returns a value always, not a promise - the 'isBlocked' getter\n                //provides access to the promise directly.\n                return this.isBlocked;\n            }, 'ParentalControls:updated'),\n            isBlockedReason: 'blockedReason',\n            longDescription: 'details.long_desc',\n            shortDescription: 'details.short_desc',\n            year: 'details.year',\n            crew: cached(function (data) {\n                if (data.details.crew) {\n                    data.details.crew.forEach(crewMember => crewMember.parentAsset = this);\n                    return data.details.crew.map(c => personViewModelDefinition.createInstance(c));\n                } else {\n                    return [];\n                }\n            }),\n            actors: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'actor');\n            }),\n            actorsString: cached(function () {\n                return this.actors.map(actor => actor.name).slice(0, 3).join(', ');\n            }),\n            actorsAndDirectors: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'actor' || crewMember.role == 'director');\n            }),\n            directors: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'director');\n            }),\n            writers: cached(function () {\n                return this.crew.filter(crewMember => crewMember.role == 'writer');\n            }),\n            watchListProviderAssetId: 'details.watchListProviderAssetID',\n            streamList: cached(function (data) {\n                return data.streamList ? data.streamList.map(s => streamViewModelDefinition.createInstance(s)) : [];\n            }),\n            network: 'network',\n            networkImage: cached(delegateUtils.createNetworkImageFunction()),\n            availableOutOfHome: 'availableOutOfHome',\n            linearAvailableOutOfHome: 'linearAvailableOutOfHome',\n            vodAvailableOutOfHome: 'vodAvailableOutOfHome',\n            tvodAvailableOutOfHome: 'tvodAvailableOutOfHome',\n            imageUri: cached(delegateUtils.createProductImageFunction()),\n            defaultStream: cached(function () {\n                return delegateUtils.getDefaultStream(this);\n            }),\n            runtimeDisplay: cached(function () {\n                let stream = this.defaultStream;\n                return stream && dateFormat.runtime(stream.streamProperties.runtimeInSeconds);\n            }),\n            genres: cached(function (data) {\n                if (data && data.details && data.details.genres) {\n                    return data.details.genres.map(g => g.name);\n                } else {\n                    return [];\n                }\n            }),\n            genreString: function () {\n                return this.genres.join(', ');\n            },\n            //Compile the format and details list for display on the product page\n            streamProps: cached(function () {\n                return delegateUtils.getStreamProps(this.streamList);\n            }),\n            programType: cached(function (data) {\n                return data.details.programType;\n            }),\n            contentClass: cached(function (data) {\n                var stream = this.defaultStream;\n                var programType = data.details.programType;\n                var streamProps;\n\n                if (!stream) {\n                    return undefined;\n                }\n\n                streamProps = stream.streamProperties;\n\n                if (stream.type === 'LINEAR') {\n                    return 'linear';\n                } else if (stream.type === 'ONLINE_ONDEMAND') {\n                    if (programType === 'Preview') {\n                        return 'extra';\n                    } else {\n                        return streamProps.ondemandStreamType;\n                    }\n                } else {\n                    return undefined;\n                }\n            }),\n            expires: cached(function () {\n                var stream = this.defaultStream;\n                if (stream &&\n                    stream.streamProperties &&\n                    stream.streamProperties.endTime) {\n\n                    return dateFormat.relative(parseInt(stream.streamProperties.endTime));\n                }\n            }),\n            commonSenseMedia: 'details.commonSenseMediaV2.rating',\n            programMetadata: 'details.programMetadata',\n            metaCritic: 'details.metacritic.rating',\n            clickRoute: cached(function (data) {\n                if (data.details &&\n                    data.details.sportsResultsCategory &&\n                    data.details.isLive &&\n                    (data.details.isOnNow ||\n                        (data.details.schedStartTimeSec < (Date.now() / 1000) &&\n                            data.details.schedEndTimeSec > (Date.now() / 1000)))) {\n                    let id = (data.details && data.details.onNowGuideServiceId) || data.tmsGuideServiceIds[0];\n                    return ['ovp.livetv', {tmsid: id}];\n                } else {\n                    return ['product.event', {\n                        tmsId: data.tmsProgramIds[0],\n                        uri: data.uri\n                    }];\n                }\n            }),\n            bookmark: function (data) {\n                let bookmark, stream = this.defaultStream;\n                if (stream && stream.streamProperties) {\n                    bookmark = stream.streamProperties.bookmark;\n                }\n                if (!bookmark) {\n                    bookmark = BookmarkService.getBookmarkByTmsProgramId(data.tmsProgramIds[0]);\n                }\n                // NGC-4273: Because of ODN bug we are getting invalid playMarkerSeconds value\n                // when we play an asset till end on ODN STB.\n                if (bookmark) {\n                    bookmark.playMarkerSeconds = Math.min(bookmark.playMarkerSeconds, bookmark.runtimeSeconds);\n                }\n                return bookmark;\n            },\n            playedPct: function () {\n                if (this.bookmark) {\n                    return (this.bookmark.playMarkerSeconds / this.bookmark.runtimeSeconds) * 100;\n                }\n            },\n            sportsCategory: 'details.sportsResultsCategory',\n            isLive: 'details.isLive',\n            isOnNow: function (data) {\n                return data.details.isLive ||\n                    data.details.isOnNow ||\n                    this.streamList.some(stream => stream.isLinearStream && stream.isOnNow);\n            },\n            isReplay: 'details.isReplay',\n            isPreview: function (data) {\n                return data.details && data.details.programType == 'Preview';\n            },\n            scheduledStartTimeSec: 'details.schedStartTimeSec',\n            scheduledEndTimeSec: 'details.schedEndTimeSec',\n            isEntitled: function (data) {\n                if (this.tvodStream) {\n                    // Tvod assets arent technically entitled until they are purchased\n                    //  but we don't want to scare the user away with key icons\n                    return true;\n                } else {\n                    return data.details.entitled;\n                }\n            },\n            isLinearEntitledIp: 'details.linearEntitledIp',\n            isLinearEntitledQam: 'details.linearEntitledQam',\n            isTvodEntitled: 'details.tvodEntitled',\n            isOutOfWindow: 'vodOutOfWindow',\n            viewStatus: function () {\n                if (this.isOnNow) {\n                    return 'On Now';\n                } else if (this.playedPct > 0) {\n                    return this.playedPct;\n                } else if (this.cdvrRecordedStream) {\n                    return 'DVR';  // UNISTR - DVR\n                } else if (this.dvrStream) {\n                    return 'DVR';\n                } else if (this.entitledOnDemandStream) {\n                    return 'On Demand';\n                } else if (this.nextLinearStream) {\n                    return dateFormat.relative.short(parseInt(this.nextLinearStream.streamProperties.startTime));\n                } else {\n                    return '----';\n                }\n            },\n            cdvrStartTime: function () {\n                let stream = this.streamList.find(stream => {\n                    if (stream.streamProperties.cdvrRecording) {\n                        return stream.streamProperties.cdvrRecording.cdvrState === CDVR_STATE.SCHEDULED ||\n                            stream.streamProperties.cdvrRecording.cdvrState === CDVR_STATE.IN_PROGRESS;\n                    } else {\n                        return false;\n                    }\n                });\n                if (stream) {\n                    return stream.streamProperties.startTime;\n                }\n            },\n            cdvrRecordedStream: function () {\n                // Only recorded streams have a stream type of CDVR\n\n                return this.streamList.find(stream => stream.type === 'CDVR');\n            },\n            cdvrRecordingGuideId: 'details.latest_episode.streamList[0].streamProperties.cdvrRecording.tmsGuideId',\n\n            // Returns true if there are CDVR recordings and none are in the completed state\n            cdvrHasNotCompleted: function () {\n                let hasCdvr = false;\n                let hasNotCompleted = this.streamList.some(stream => {\n                    let cdvrRecording = stream.streamProperties && stream.streamProperties.cdvrRecording;\n                    if (cdvrRecording) {\n                        hasCdvr = true;\n                    }\n                    return cdvrRecording && stream.cdvrNotCompleted;\n                });\n\n                return hasCdvr && hasNotCompleted;\n            },\n            cdvrRecording: cached(function () {\n                if (this.defaultStream) {\n                    let stream = this.defaultStream;\n                    if (stream &&\n                        stream.streamProperties &&\n                        stream.streamProperties.cdvrRecording) {\n                        return stream.streamProperties.cdvrRecording;\n                    }\n                }\n            }),\n            dvrStream: function () {\n                return this.streamList.find(stream => stream.type === 'DVR');\n            },\n            entitledOnDemandStream: function () {\n                return this.streamList.find(stream => stream.isOnDemandStream && stream.isEntitled);\n            },\n            tvodStream: function () {\n                return this.streamList.find(stream => {\n                    //Price is available in the mini list\n                    return (stream.type === 'ONLINE_ONDEMAND' &&\n                        stream.streamProperties.price > 0);\n                });\n            },\n            entitledTvodStream: function () {\n                return this.streamList.find(str => str.streamProperties.tvodEntitlement);\n            },\n            freeODStream: function () {\n                return this.streamList.find(stream => {\n                    //Price is 0 in the mini list\n                    return (stream.type === 'ONLINE_ONDEMAND' &&\n                        Math.round(stream.streamProperties.price) === 0);\n                });\n            },\n            linearStream: function () {\n                return this.streamList.find(stream => stream.type === 'LINEAR');\n            },\n            // Selects the linear stream that is in the future but closest to the current time.\n            //    Won't select a stream that is currently airing.\n            nextLinearStream: function () {\n                let now = Date.now();\n                return this.streamList\n                    .filter(stream => stream.type == 'LINEAR')\n                    .filter(stream => parseInt(stream.streamProperties.startTime) > now)\n                    .sort((a, b) => parseInt(a.streamProperties.startTime) - parseInt(b.streamProperties.startTime))\n                    [0];\n\n            },\n            seasonNumber: 'details.season_number',\n            episodeNumber: 'details.episode_number',\n            originalAirDate: 'details.original_air_date',\n            isBlockedByRating: function () {\n                throw 'Depreciated, isBlockedByRating should no longer be used';\n            },\n            otherWaysAction: function () {\n                if (this.actions) {\n                    return this.actions.find((action) => {\n                        return (action.actionType === 'otherWaysToWatch');\n                    });\n                } else {\n                    return false;\n                }\n            },\n            staleDvrCache: 'details.staleDvrCache',\n            price: delegateUtils.promiseCached(function (data) {\n                let price;\n                let rent = data && data.actionGroups &&\n                    data.actionGroups.defaultGroup &&\n                    data.actionGroups.defaultGroup.actionObjects &&\n                    data.actionGroups.defaultGroup.actionObjects.find(\n                         action => action.actionType === 'rentOnDemand');\n\n                if (rent) {\n                    price = this.streamList[rent.streamIndex].streamProperties.price;\n                } else if (this.tvodStream) {\n                    price = this.tvodStream.streamProperties.price;\n                } else if (this.freeODStream) {\n                    price = messages.getMessageForCode('MSG-9069');\n                }\n\n                return price;\n            }),\n            rentalExpiration: cached(function () {\n                if (this.streamList) {\n                    let entitledStream = this.entitledTvodStream;\n                    if (entitledStream) {\n                        let entitled = entitledStream.streamProperties.tvodEntitlement;\n                        let date = new Date(entitled.rentalEndTimeUtcSeconds * 1000);\n                        return 'Expires ' + dateFormat.absolute.tiny.atTime(date);\n                    }\n                }\n                return null;\n            }),\n            playable: function () {\n                if (this.rentalExpiration !== null || this.isEntitled) {\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            playAction: function (data) {\n                return () => {\n                    if (this.playable) {\n                        $state.go('ovp.ondemand.playProduct', {\n                            productID: data.tmsProgramIds[0],\n                            rented: (this.rentalExpiration) ? true : false\n                        });\n                    }\n                };\n            },\n            isComplexOffering: cached(function () {\n                return this.streamList.filter(strm =>\n                    strm.type === 'ONLINE_ONDEMAND' &&\n                        strm.streamProperties.price > 0 &&\n                        !strm.streamProperties.tvodEntitlement\n                ).length > 1;\n            }),\n            episode: 'details.episode_number',\n            season: 'details.season_number'\n\n        });\n    }\n\n    /* @ngInject */\n    function registerDelegate(eventViewModelDefinition, delegateFactory) {\n        function isEvent(asset) {\n            let type = asset.type ||\n                (asset.media &&\n                    asset.media.results &&\n                    asset.media.results[0] &&\n                    asset.media.results[0].type);\n\n            return type === 'event';\n        }\n\n        delegateFactory.registerDelegateDefinition(eventViewModelDefinition, isEvent);\n    }\n}());\n"],"sourceRoot":"/source/"}