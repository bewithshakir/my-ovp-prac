{"version":3,"sources":["ovpApp/config/ovp-config-class.js"],"names":[],"mappings":"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","file":"ovpApp/config/ovp-config-class.js","sourcesContent":["/* globals console, window, platform */\n(function () {\n    'use strict';\n    /**\n     * OvpConfig class contains a few helper functions as well as some functions that help bootstrap the config\n     * object at the beginning of execution.\n     *\n     * This should be created in the index.html and should fill in the following environment injections. If we are\n     * using an activity config, this should fetch that explicitly and then continue with the app instantiation\n     */\n    window.OvpConfig = class {\n        constructor(defaults, version, environments) {\n            this.deviceId = null;\n            this.version = version;\n            this.environmentStorageKey = 'env';\n            this.environmentKey = 'prod';\n            this.osVersion = 'none';\n            this.deviceType = 'none';\n            this.majorMinorVersion = this.parseMajorMinorVersion(version);\n\n            this.getOrCreateDeviceId();\n            this.parseEnvironmentOptions(environments);\n            this.setInitialConfigDefaults(defaults);\n            this.storeCurrentVersion();\n        }\n\n        /**\n         * Initialize is separate from constructor to allow the initial fetch to happen after\n         * contructor is completed\n         * @param {Function} done Callback function after initialize is completed\n         * @param {String} defaultEnvironmentKey Default environment name if none is set in LocalStorage\n         */\n        initialize(done, defaultEnvironmentKey = 'prod') {\n            /*\n                1) Apply defaults\n                2) Apply environment config\n                3) Apply Public TDCS Config\n                ----\n                4) Apply Authenticated TDCS Config\n            */\n            this.environmentKey = this.getStoredEnvironmentKey(defaultEnvironmentKey);\n            this.osVersion = platform.os.family.toUpperCase() + '-' + platform.os.version;\n            this.deviceType = platform.name.toUpperCase() + '-' + platform.version;\n\n            if (this.environmentMap[this.environmentKey]) {\n                this.installOverrides(this.environmentMap[this.environmentKey]);\n            }\n\n            if (this.environmentKey !== 'prod') {\n                let urlConfigs = this.fetchUrlParamConfigs();\n                this.installOverrides(urlConfigs);\n            }\n\n            this.fetchConfig((error, tdcsConfigs) => {\n                if (!error) {\n                    this.installOverrides(tdcsConfigs);\n                    this.applyLocalConfigOverrides();\n                }\n                done(error, this);\n            });\n        }\n\n        parseMajorMinorVersion(version) {\n            try {\n                return version.match(/^[0-9]+\\.[0-9]+/)[0];\n\n            } catch (err) {\n                throw 'Unable to parse app version ' + version;\n            }\n            return '0.0';\n        }\n\n        /**\n         * Parse the potential environment options and\n         * @param {String} environments base64 encoded json string\n         */\n        parseEnvironmentOptions(environments) {\n            //Parse and assign potential environments to instance.\n            try {\n                this.environments = environments ? JSON.parse(window.atob(environments)) : [];\n                this.environmentMap = this.environments.reduce((memo, environ) => {\n                    memo[environ.name] = environ;\n                    return memo;\n                }, {});\n            } catch (err) {\n                console.error('Problem while trying to decode / parse environments');\n                this.environments = [];\n            }\n        }\n\n        setDeviceType() {\n            return;\n        }\n\n        setInitialConfigDefaults(defaults) {\n            Object.assign(this, defaults);\n        }\n\n        storeCurrentVersion() {\n            if (window.sessionStorage) {\n                try {\n                    window.sessionStorage.setItem('appVersion', JSON.stringify(this.version));\n                } catch (err) {\n                    console.error('Unable to store appVersion');\n                }\n            }\n        }\n\n        storeEnvironmentKey(environmentKey) {\n            if (window.sessionStorage && window.localStorage) {\n                try {\n                    window.localStorage.setItem(this.environmentStorageKey, environmentKey);\n                } catch (err) {\n                    console.error('Unable to store selected environment');\n                }\n            }\n        }\n\n        getEnvironmentsMap() {\n            return this.environmentMap;\n        }\n\n        getEnvironments() {\n            return this.environments;\n        }\n\n        installOverrides(overrides) {\n            //Instead of activityConfig, messagesOverrides,\n            this.currentConfig = this.deepApply(this, overrides);\n        }\n\n        fetchConfig(done) {\n            let url = this.piHost + this.services.config;\n            url += '&apikey=' + window.encodeURIComponent(this.oAuth.consumerKey);\n            url += '&deviceId=' + window.encodeURIComponent(this.deviceId).toUpperCase();\n            url += '&appVersion=' + window.encodeURIComponent(this.majorMinorVersion);\n            url += '&deviceType=' + window.encodeURIComponent(this.deviceType);\n            url += '&osVersion=' + window.encodeURIComponent(this.osVersion);\n            if (!this.piHost) {\n                throw 'Unable to get pihost';\n            }\n            this._nativeXHR(url, (err, result) => {\n                if (result) {\n                    let config = JSON.parse(result);\n                    if (config.config) {\n                        config = config.config;\n                    } else if (config.settings) {\n                        config = config.settings; //Legacy support\n                    } else if (!config) {\n                        config = {};\n                    }\n                    done(null, config);\n                } else {\n                    console.warn('Unable to retrieve activityConfig, ' + err);\n                    done(err);\n                }\n            });\n        }\n\n        fetchUrlParamConfigs() {\n            let searchString = '', search = {};\n            if (window.location.search.indexOf('?') > 0) {\n                searchString = window.location.search.split('?')[1];\n                search = searchString.split('?').reduce((memo, pair) => {\n                    let [key, value] = pair.split('=');\n                    memo[key] = value;\n                    return memo;\n                }, {});\n            }\n\n            return Object.keys(search).filter(key => key.startsWith('config.') || key === 'env').reduce((memo, key) => {\n                memo[key.replace('config.', '')] = search[key];\n                return memo;\n            }, {});\n        }\n\n        _nativeXHR (url, done, method = 'GET') {\n            let xhr = new window.XMLHttpRequest();\n            xhr.open(method, url);\n            xhr.onload = function () {\n                done(null, xhr.response);\n            };\n            xhr.onerror = function () {\n                done(xhr.response);\n            };\n            xhr.send();\n        }\n\n        getBool(property) {\n            if (property === undefined || property === null) {\n                throw 'Activity config property was not defined or provided and attempted to be used.';\n            }\n            return property.toString() === 'true';\n        }\n\n        deepApply(obj, source = {}) {\n            Object.keys(source).forEach(key => {\n                if (typeof source[key] === 'object') {\n                    if (!obj[key]) {\n                        obj[key] = {};\n                    }\n                    this.deepApply(obj[key], source[key]);\n                } else {\n                    obj[key] = source[key];\n                }\n            });\n        }\n\n        randomGuid() {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                /*jslint bitwise: true */\n                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n                return v.toString(16);\n            });\n        }\n\n        getOrCreateDeviceId() {\n            if (window.localStorage) {\n                try {\n                    this.deviceId = window.localStorage.getItem('device_id');\n                    if (!this.deviceId) {\n                        this.deviceId = this.randomGuid();\n                        window.localStorage.setItem('device_id', JSON.stringify(this.deviceId));\n                    } else {\n                        this.deviceId = JSON.parse(this.deviceId);\n                    }\n                } catch (err) {\n                    console.error('Unable to retrieve stored deviceId: ' + err);\n                }\n            } else {\n                this.deviceId = this.randomGuid();\n            }\n        }\n\n        getStoredEnvironmentKey(defaultEnv) {\n            let env = defaultEnv;\n            if (window.sessionStorage) {\n                let storedEnv;\n                try {\n                    storedEnv = window.localStorage.getItem(this.environmentStorageKey);\n                } catch (err) {\n                    console.error('Unable to retrieve storage data, ' + err);\n                }\n\n                if (storedEnv) {\n                    try {\n                        env = JSON.parse(storedEnv);\n                    } catch (e) {\n                        env = storedEnv;\n                    }\n                }\n            }\n\n            this.environmentKey = env;\n            return env;\n        }\n\n        applyLocalConfigOverrides() {\n            if (window.sessionStorage) {\n                let localOverrides = window.sessionStorage.getItem('configOverride');\n                if (localOverrides) {\n                    try {\n                        let configs = JSON.parse(localOverrides);\n                        this.installOverrides(configs);\n                    } catch (e) {\n                        console.warn('Local overrides are not valid json, ignored');\n                    }\n                }\n            }\n        }\n    };\n}());\n"],"sourceRoot":"/source/"}