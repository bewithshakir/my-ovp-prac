{"version":3,"sources":["ovpApp/analytics/events/productActionAnalytics.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/events/productActionAnalytics.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.productActionAnalytics', [\n        'ovpApp.config',\n        'ovpApp.analytics.analyticsService',\n        'ovpApp.analytics.analyticsAssetHelper'\n    ])\n    .factory('productActionAnalytics', productActionAnalytics)\n    .run(function loadHandler(productActionAnalytics) {\n            return productActionAnalytics;\n        });\n\n    /* @ngInject */\n    function productActionAnalytics(actionTypeMap, $state, $rootScope, analyticsService,\n        $log, analyticsAssetHelper, navigation) {\n\n        // Access the analytics state so we can track when controllers\n        // are active or not.\n        let analyticsState = analyticsService.state;\n\n        function attachEventListeners() {\n            try {\n                $rootScope.$on('product:action', handleProductAction);\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        /**\n         * Conditionally generate a venona event for the given product action.\n         * @param e event\n         * @param action The action to execute.\n         * @param asset Optional asset upon which to execute the action.\n         * @param stream Optional stream to which action applies.\n         */\n        function handleProductAction(e, action, asset, stream) {\n            try {\n\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: handleProductAction: ' + action.actionType, action, asset, stream);\n                }\n\n                switch (action.actionType) {\n\n                    case actionTypeMap.addToWatchList.id:\n                        navigation.selectAction(null,  {\n                            operationType: 'watchListAdd',\n                            elementStandardizedName: 'watchListAdd'\n                        });\n                        break;\n\n                    case actionTypeMap.removeFromWatchList.id:\n                        navigation.selectAction(null,  {\n                            operationType: 'watchListRemove',\n                            elementStandardizedName: 'watchListRemove'\n                        });\n                        break;\n\n                    case actionTypeMap.watchOnDemandIP.id:\n                    case actionTypeMap.resumeOnDemandIP.id:\n\n                        let isResume = actionTypeMap.resumeOnDemandIP.id === action.actionType;\n\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'vod',\n                            scrubbingCapability: 'all',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: isResume ? 'resume' : 'watch'\n                        });\n                        break;\n\n                    case actionTypeMap.watchLiveIP.id:\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'linear',\n                            contentClass: 'linear',\n                            scrubbingCapability: 'none',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: 'liveTvWatch'\n                        });\n                        break;\n\n                    case actionTypeMap.resumeOnDemandOnTv.id:\n                    case actionTypeMap.watchOnDemandOnTv.id:\n\n                        let isStartVod = actionTypeMap.watchOnDemandOnTv.id === action.actionType;\n\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'vod',\n                            scrubbingCapability: 'all',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: isStartVod ? 'start' : 'resume'\n                        });\n                        break;\n\n                    case actionTypeMap.watchLiveOnTv.id:\n\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'linear',\n                            contentClass: 'linear',\n                            scrubbingCapability: 'none',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: 'liveTvWatch'\n                        });\n                        break;\n\n                    case actionTypeMap.playRecordingOnTv.id:\n\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'dvr',\n                            contentClass: 'dvr',\n                            scrubbingCapability: 'all',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: 'dvrWatch'\n                        });\n                        break;\n\n                    case actionTypeMap.cdvrPlayRecording.id:\n                    case actionTypeMap.cdvrResumeRecording.id:\n                        let isStartRecording = actionTypeMap.cdvrPlayRecording.id === action.actionType;\n\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'dvr',\n                            contentClass: 'cdvr',\n                            scrubbingCapability: 'all',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: isStartRecording ? 'start' : 'resume'\n                        });\n                        break;\n\n                    case actionTypeMap.cdvrScheduleRecording.id:\n\n                        let payload = {\n                            context: 'cdvr',\n                            featureType: 'cdvrRequestToRecord',\n                            featureStepName: 'productPage',\n                            featureCurrentStep: 1,\n                            elementStandardizedName: 'cdvrRecord',\n                            asset: asset,\n                            stream: stream,\n                            action: action\n                        };\n\n                        // If this is an episode of a series, add the appropriate\n                        // section & subsection data.\n                        if (angular.isDefined(asset.tmsSeriesId)) {\n                            payload.pageSectionName = 'episodeListArea';\n                            payload.pageSubSectionName = 'episodeConversionArea';\n                        }\n\n                        navigation.selectAction(null, payload);\n                        break;\n\n                    case actionTypeMap.cdvrScheduleSeriesRecording.id:\n\n                        let cdvrRecordSeriesPayload = {\n                            context: 'cdvr',\n                            featureType: 'cdvrRequestToRecord',\n                            featureStepName: 'productPage',\n                            featureCurrentStep: 1,\n                            elementStandardizedName: 'cdvrRecord',\n                            pageSectionName: 'conversionArea',\n                            pageSubSectionName: 'episodeConversionArea',\n                            asset: asset,\n                            stream: stream,\n                            action: action\n                        };\n\n                        // Additional data population based on state name.\n                        switch ($state.current.name) {\n                            case 'product.series.episodes':\n                                cdvrRecordSeriesPayload.navPagePrimaryName = 'episodes';\n                                break;\n                            case 'product.series.info':\n                                cdvrRecordSeriesPayload.navPagePrimaryName = 'info';\n                                break;\n                        }\n\n                        navigation.selectAction(null, cdvrRecordSeriesPayload);\n                        break;\n\n                    case actionTypeMap.cdvrCancelSeriesRecording.id:\n\n                        navigation.selectAction(null,  {\n                            context: 'cdvr',\n                            featureType: 'cdvrRequestToCancel',\n                            featureStepName: 'productPage',\n                            featureCurrentStep: 1,\n                            elementStandardizedName: 'cdvrCancelRecording',\n                            asset: asset,\n                            stream: stream,\n                            action: action\n                        });\n                        break;\n\n                    case actionTypeMap.cdvrCancelRecording.id:\n                        navigation.selectAction(null,  {\n                            context: 'cdvr',\n                            featureType: 'cdvrRequestToCancel',\n                            featureStepName: 'productPage',\n                            featureCurrentStep: 1,\n                            elementStandardizedName: 'cdvrCancelRecording',\n                            asset: asset,\n                            stream: stream,\n                            action: action\n                        });\n                        break;\n\n                    case actionTypeMap.cdvrDeleteRecording.id:\n                        navigation.selectAction(null,  {\n                            context: 'cdvr',\n                            featureType: 'cdvrRequestToDelete',\n                            featureStepName: 'productPage',\n                            featureCurrentStep: 1,\n                            elementStandardizedName: 'cdvrDeleteRecording',\n                            asset: asset,\n                            stream: stream,\n                            action: action\n                        });\n                        break;\n\n                    case actionTypeMap.otherWaysToWatch.id:\n                        navigation.selectAction(null,  {\n                            elementStandardizedName: 'otherWaysToWatch',\n                            pageSectionName: 'episodeListArea',\n                            pageSubSectionName: 'episodeConversionArea'\n                        });\n                        break;\n\n                    case actionTypeMap.rentOnDemand.id:\n\n                        // Create a new TVOD flow state object to track this transaction.\n                        analyticsState.setTvodFlowState({\n                            context: 'tvodFlow',\n                            featureType: 'tvodPurchase',\n                            featureName: 'tvod',\n                            purchaseStopSeen: false,\n                            featureNumberOfSteps: 100\n                        });\n\n                        // Create new transaction ID by telling SDK we're starting a new flow.\n                        // This is especially necessary after an abandoned TVOD flow.\n                        analyticsService.getSDK().restartFlow();\n\n                        navigation.selectAction(null,  {\n                            category: 'navigation',\n                            context: 'tvodFlow',\n                            elementUiName: actionTypeMap.rentOnDemand.label(asset, action),\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: 'rent',\n                            triggeredBy: 'user',\n                            operationType: 'buttonClick',\n                            featureStepName: 'selectAction_rent',\n                            featureCurrentStep: 1\n                        });\n\n                        navigation.tvodPurchaseStart();\n                        break;\n\n                    case actionTypeMap.watchTrailerIP.id:\n                        navigation.selectAction(null,  {\n                            operationType: 'playButtonClicked',\n                            asset: asset,\n                            stream: stream,\n                            action: action,\n                            playbackType: 'vod',\n                            contentClass: 'trailer',\n                            scrubbingCapability: 'all',\n                            pageSectionName: 'conversionArea',\n                            elementStandardizedName: 'watchTrailer'\n                        });\n                        break;\n\n                    default:\n                        $log.debug('Analytics: handleProductAction - ignored: ' + action.actionType);\n                        break;\n                }\n            }\n            catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        // Now attach the event listeners.\n        attachEventListeners();\n\n        return {\n            handleProductAction,\n            attachEventListeners\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}