{"version":3,"sources":["ovpApp/services/splunk-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/splunk-service.js","sourcesContent":["/* global console */\n(function () {\n    'use strict';\n    angular.module('ovpApp.services.splunk', [\n        'ovpApp.config',\n        'lib.platform',\n        'lib.splunk',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.services.capabilitiesService',\n        'ovpApp.services.profileService',\n        'ovpApp.oauth',\n        'ovpApp.services.stbService',\n        'ovpApp.version',\n        'ovpApp.legacy.deviceid',\n        'ovpApp.adBlockerDetection'\n    ])\n    .factory('SplunkService', SplunkService)\n    .factory('$exceptionHandler', $exceptionHandler)\n    .run(subscribe);\n\n    /**\n     * create an individual Splunk message payload, which consists of a standard OVP message header and an event\n     * specific message body.\n     *\n     */\n\n    /* @ngInject */\n    function SplunkService(config, platform, ovpStorage, storageKeys, $interval,\n        version, capabilitiesService, CAPABILITIES, stbService, deviceid, $q, OauthService, $log, $window,\n        adBlockerDetection, splunk, profileService) {\n\n        let loggingEnabled = config.getBool(config.splunkControlParameters.splunkLoggingEnabled),\n            heartbeatEnabled = config.getBool(config.splunkControlParameters.splunkHeartbeatEnabled),\n            osVersion = platform.os.family + ' ' + platform.os.version,\n            browserVersion = platform.name + ' ' + platform.version,\n            //oohDrmEnabled = false, // not used as of June 2016\n            sessionGuid = config.randomGuid();\n\n        let service = {\n            sendPlayerStatus,\n            sendPlayerError,\n            sendServiceError,\n            sendError,\n            sendCustomMessage,\n            updateCapabilities,\n            flush,\n            toggleNetworkConnectivity\n        };\n\n        activate();\n\n        return service;\n\n        ///////////////////////////////\n\n        function activate() {\n            updateCapabilities();\n            updateFlashPlayerVersion();\n            updateStbInfo();\n            updateAdBlockerStatus();\n\n            splunk.init(config);\n\n            splunk.updateConfiguration(config);\n            splunk.setUserSessionId(sessionGuid);\n            splunk.setAppVersion(version.appVersion);\n            splunk.setEnvironment(config.environmentKey);\n            splunk.setOSVersion(osVersion);\n            splunk.setBrowserVersion(browserVersion);\n            splunk.setDeviceId(deviceid.get());\n\n\n            if (loggingEnabled && heartbeatEnabled) {\n                splunk.sendHeartbeat(); // send the initial heartbeat, the rest will follow on the timer\n            }\n\n        }\n\n        function updateAdBlockerStatus() {\n            adBlockerDetection.adsBlocked().then(() => {\n                // ads not blocked\n                splunk.setAdBlocker(false);\n            }, () => {\n                // ads blocked\n                splunk.setAdBlocker(true);\n            });\n        }\n\n        function updateStbInfo() {\n            OauthService.isAuthenticated().then((authenticated) => {\n                if (authenticated) {\n                    stbService.getCurrentStb().then(stb => {\n                        if (stb) {\n                            splunk.setStbInfo(stb.macAddress);\n                        }\n                    });\n                }\n            });\n        }\n\n        function flush() {\n            splunk.flush();\n        }\n\n        // capabilities are returned via a call to IPVS following user login\n        function updateCapabilities() {\n            OauthService.isAuthenticated().then((authenticated) => {\n                if (authenticated) {\n                    $q.all([capabilitiesService.hasCapability(CAPABILITIES.RDVR),\n                        capabilitiesService.hasCapability(CAPABILITIES.GUIDE),\n                        capabilitiesService.hasCapability(CAPABILITIES.LIVE),\n                        capabilitiesService.hasCapability(CAPABILITIES.ONDEMAND),\n                        capabilitiesService.hasCapability(CAPABILITIES.TUNETOCHANNEL),\n                        capabilitiesService.hasCapability(CAPABILITIES.CDVR),\n                        profileService.isTVODRentEnabled(),\n                        profileService.isTVODWatchEnabled()]).then(values => {\n                            splunk.updateCapabilities(values);\n                        });\n                }\n            });\n        }\n\n        function updateFlashPlayerVersion() {\n            var version = $window.swfobject.getFlashPlayerVersion();\n            var flashVersion = version.major + '.' + version.minor + '.' + version.release + '.' + version.build;\n            splunk.updateFlashPlayerVersion(flashVersion);\n        }\n\n        function toggleNetworkConnectivity(isOnline) {\n            config.splunkControlParameters.splunkLoggingEnabled = isOnline;\n            config.splunkControlParameters.splunkHeartbeatEnabled = isOnline;\n            config.splunkControlParameters.splunkPlayerStatusEnabled = isOnline;\n            splunk.updateConfiguration(config);\n        }\n\n        function sendError(exception, source, cause) {\n            splunk.sendError(exception, source, cause, config);\n        }\n\n        /**\n        * build and queue a Splunk service error message\n        *\n        * @param {String} errorDetails - error properties as specified in the Common Splunk Logging Standards\n        * http://mystropedia.corp.mystrotv.com/display/NGC/Common+Splunk+Logging+Standards\n        */\n        function sendServiceError(errorDetails) {\n            splunk.sendServiceError(errorDetails);\n        }\n\n        /**\n        * build and queue a Splunk player error message\n        *\n        * @param {String} errorDetails - error properties as specified in the Common Splunk Logging Standards\n        * http://mystropedia.corp.mystrotv.com/display/NGC/Common+Splunk+Logging+Standards\n        */\n        function sendPlayerError(errorDetails) {\n            splunk.sendPlayerError(errorDetails);\n        }\n\n        /**\n        * build and queue a Splunk player status message. For actual errors with the player itself, please\n        * use the sendPlayerError() API.\n        *\n        * @param {String} statusDetails - error properties as specified in the Common Splunk Logging Standards\n        * http://mystropedia.corp.mystrotv.com/display/NGC/Common+Splunk+Logging+Standards\n        */\n        function sendPlayerStatus(statusDetails) {\n            splunk.sendPlayerStatus(statusDetails);\n        }\n\n        /**\n         * Send a message which doesn't fit into any of the other categories\n         * @param {object} payload data to send\n         * @param {string} logLevel log level of the message. Defaults to ERROR\n         */\n        function sendCustomMessage(payload, logLevel) {\n            splunk.sendCustomMessage(payload, logLevel);\n        }\n\n    }\n\n    /* @ngInject */\n    function $exceptionHandler($log, $injector) {\n        return function ovpExceptionHandler(exception, cause) {\n            var SplunkService = $injector.get('SplunkService');\n            SplunkService.sendError(exception, cause, 'exceptionHandler');\n            //SplunkService.sendError(exception, cause, 'exceptionHandler');\n            //Not sending to $log.error - otherwise it might be double logged\n            console.error('Exception Logged ->', exception);\n        };\n    }\n\n    /* @ngInject */\n    function subscribe($injector, SplunkService, $rootScope, $transitions, config, splunk) {\n        $rootScope.$on('EntryService:masDefined', (event, data) => {\n            splunk.setDivision(data.market);\n            splunk.setLineup(data.lineupId);\n        });\n\n        $rootScope.$on('LocationService:locationChanged', (event, data) => {\n            splunk.setInHome(data.behindOwnModem);\n        });\n\n        $rootScope.$on('Session:setCapabilities', () => {\n            SplunkService.updateCapabilities();\n        });\n\n        $rootScope.$on('set-top-box-selected', (event, stb) => {\n            splunk.setStbInfo(stb.macAddress);\n        });\n\n        $transitions.onStart({}, function (transition) {\n            splunk.startTimer(transition.to().name);\n        });\n\n        $transitions.onSuccess({}, function (transition) {\n            splunk.setAppState(transition.to().name);\n        });\n\n        $rootScope.$on('pageChangeComplete', function (event, toState) {\n            splunk.endTimer(toState.name);\n        });\n\n        $rootScope.$on('connectivityService:statusChanged', (event, data) => {\n            SplunkService.toggleNetworkConnectivity(data);\n        });\n\n        /**\n         *  The default values for feature flippers in config/config.js may be overwritten from TDCS/Cyclops.\n         *\n         *  With Cyclops this overriding occurs prior to this service being instantiated, so this event will be\n         *  missed which is expected behavior.\n         *\n         *  With TDCS, this overriding won't happen until after this service in instantiated, the user logs in,\n         *  and the configuration file is downloaded and processed. This event will then kick off the necessary\n         *  updates to the default parameters returned to splunk.\n        */\n        $rootScope.$on('Session:setConfigOverrides', () => {\n            splunk.updateConfiguration(config);\n        });\n\n    }\n\n})();\n"],"sourceRoot":"/source/"}