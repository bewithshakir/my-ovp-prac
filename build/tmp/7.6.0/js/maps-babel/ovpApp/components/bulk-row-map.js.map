{"version":3,"sources":["ovpApp/components/bulk-row-map.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;IAEA,QAAQ,OAAO,gCAAgC,IAE9C,QAAQ,cAAc;;;IAGvB,SAAS,MAAM;;QAEX,SAAS,WAAW,QAAQ,UAAU;YAClC,KAAK,YAAY,YAAY;gBACzB,OAAO,OAAO;;;;QAItB,WAAW,UAAU,QAAQ,YAAY;YACrC,IAAI,OAAO,OAAO,KAAK;YACvB,QAAQ,QAAQ,MAAM,UAAU,OAAO;gBACnC,IAAI,CAAC,QAAQ,WAAW,KAAK,SAAS;oBAClC,OAAO,KAAK;;eAEjB;;;QAGP,WAAW,UAAU,YAAY,UAAU,OAAO;YAC9C,KAAK,SAAS;;;QAGlB,WAAW,UAAU,cAAc,UAAU,OAAO;YAChD,KAAK,SAAS;;;QAGlB,WAAW,UAAU,mBAAmB,YAAY;YAChD,IAAI,QAAQ;YACZ,QAAQ,QAAQ,MAAM,UAAU,OAAO;gBACnC,IAAI,UAAU,MAAM;oBAChB;;;YAGR,OAAO;;;QAGX,WAAW,UAAU,iBAAiB,YAAY;YAC9C,IAAI,gBAAgB;gBAChB,SAAS,KAAK;gBACd;gBAAG;;YAEP,QAAQ,QAAQ,MAAM,UAAU,OAAO,KAAK;gBACxC,IAAI,UAAU,MAAM;oBAChB,cAAc,KAAK,SAAS;;;;YAIpC,cAAc,KAAK,UAAU,GAAG,GAAG;gBAC/B,OAAO,IAAI;;;YAGf,KAAK,IAAI,GAAG,SAAS,cAAc,QAAQ,IAAI,QAAQ,KAAK;gBACxD,OAAO,OAAO,cAAc,KAAK,GAAG;;;;QAK5C,WAAW,UAAU,gBAAgB,YAAY;YAC7C,KAAK,IAAI,OAAO,MAAM;gBAClB,IAAI,KAAK,SAAS,MAAM;oBACpB,OAAO;;;YAGf,OAAO;;;QAGX,WAAW,UAAU,cAAc,YAAY;YAC3C,IAAI,WAAW;gBACX,SAAS,KAAK;YAClB,QAAQ,QAAQ,MAAM,UAAU,OAAO,KAAK;gBACxC,IAAI,UAAU,MAAM;oBAChB,SAAS,KAAK,OAAO,SAAS;;eAEnC;YACH,OAAO;;;QAGX,OAAO;;KAEV","file":"ovpApp/components/bulk-row-map.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.components.bulkRowMap', [])\n\n    .factory('BulkRowMap', Brm);\n\n    /* @ngInject */\n    function Brm() {\n\n        function BulkRowMap($scope, property) {\n            this.getMapped = function () {\n                return $scope[property];\n            };\n        }\n\n        BulkRowMap.prototype.clear = function () {\n            var keys = Object.keys(this);\n            angular.forEach(keys, function (value) {\n                if (!angular.isFunction(this[value])) {\n                    delete this[value];\n                }\n            }, this);\n        };\n\n        BulkRowMap.prototype.selectRow = function (index) {\n            this[index] = true;\n        };\n\n        BulkRowMap.prototype.unSelectRow = function (index) {\n            this[index] = false;\n        };\n\n        BulkRowMap.prototype.getSelectedCount = function () {\n            var count = 0;\n            angular.forEach(this, function (value) {\n                if (value === true) {\n                    count++;\n                }\n            });\n            return count;\n        };\n\n        BulkRowMap.prototype.removeSelected = function () {\n            var markedIndices = [],\n                mapped = this.getMapped(),\n                i, length;\n\n            angular.forEach(this, function (value, key) {\n                if (value === true) {\n                    markedIndices.push(parseInt(key));\n                }\n            });\n\n            markedIndices.sort(function (a, b) {\n                return a - b;\n            });\n\n            for (i = 0, length = markedIndices.length; i < length; i++) {\n                mapped.splice(markedIndices[i] - i, 1);\n            }\n\n        };\n\n        BulkRowMap.prototype.isRowSelected = function () {\n            for (var key in this) {\n                if (this[key] === true) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        BulkRowMap.prototype.getSelected = function () {\n            var selected = [],\n                mapped = this.getMapped();\n            angular.forEach(this, function (value, key) {\n                if (value === true) {\n                    selected.push(mapped[parseInt(key)]);\n                }\n            }, this);\n            return selected;\n        };\n\n        return BulkRowMap;\n    }\n}());\n"],"sourceRoot":"/source/"}