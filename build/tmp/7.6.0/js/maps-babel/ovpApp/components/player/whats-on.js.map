{"version":3,"sources":["ovpApp/components/player/whats-on.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QACK,OAAO,yBAAyB,CAC7B,iBACA,iCACA,4BAEH,QAAQ,WAAW;;;IAGxB,SAAS,QAAQ,QAAQ,QAAQ,4BAA4B,UAAU,IAAI;QACvE,IAAI,UAAU;YACV,KAAA;YACA,eAAA;YACA,QAAA;;;QAGJ,IAAI,gBAAa;;QAEjB,IAAM,kBAAkB,SAAS,OAAO,0CAA0C,KAAK;QACvF,IAAM,iBAAiB;;QAEvB,OAAO;;;;QAIP,SAAS,IAAI,UAAU;YACnB,OAAO,OAAO,UAAU,KAAK;;;QAGjC,SAAS,cAAc,UAAU;YAC7B,OAAO,OAAO,UAAU,KAAK,QAAQ;;;QAGzC,SAAS,OAAO,UAAU,UAAU;YAChC,IAAI,UAAU,QAAQ,QAAQ;YAC9B,IAAI,CAAC,SAAS;gBACV,WAAW,CAAC;;;YAGhB,OAAO,SACF,KAAK,UAAA,QAAU;gBACZ,IAAI,WAAW,SACV,IAAI,UAAA,SAAW;oBACZ,IAAI,WAAW,OAAO,QAAQ,UAAU;oBACxC,IAAI,aAAa,SAAS,KAAK,UAAA,SAAW;wBACtC,IAAI,QAAQ,QAAQ,eAAe;wBACnC,IAAI,MAAM,QAAS,QAAQ,kBAAkB;wBAC7C,OAAO,YAAY,SAAS,WAAW;;oBAE3C,IAAI,YAAY;wBACZ,WAAW,UAAU;;oBAEzB,OAAO;mBAEV,IAAI,UAAA,YAAU;oBANnB,OAOQ,aAAa,2BAA2B,eAAe,cAAc;;;gBAG7E,OAAO,UAAU,WAAW,SAAS;;;;QAIjD,SAAS,SAAS;YACd,IAAI,CAAC,eAAe;gBAChB,IAAI,MAAG,KAAM,OAAO,SAAS,OAAO,SAAS,cAAW;gBACxD,gBAAgB,OAAO,IAAI,KAAK,EAAC,iBAAiB,QAC7C,MAAM,GACN,IAAI,UAAA,UAAQ;oBARb,OAQiB,SAAS;mBACzB,UAAU,IAAG,SACP,YAAM;;oBAET,gBAAgB;;;gBAGxB,SAAS,YAAA;oBARL,OAQW,gBAAgB;mBAAW,gBAAgB;;YAE9D,OAAO;;;KAGd","file":"ovpApp/components/player/whats-on.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.player.whatsOn', [\n            'ovpApp.config',\n            'ovpApp.player.whatsOnDelegate',\n            'ovpApp.services.rxUtils'\n        ])\n        .factory('whatsOn', whatsOn);\n\n    /* @ngInject */\n    function whatsOn(config, rxhttp, whatsOnViewModelDefinition, $timeout, $q) {\n        let service = {\n            now,\n            nowOrImminent,\n            lineup\n        };\n\n        let lineupPromise;\n\n        const onNextThreshold = parseInt(config.thresholdForOnNextTitleUpdateInMinutes) * 60 * 1000;\n        const fifteenMinutes = 900000;\n\n        return service;\n\n        ////////////////\n\n        function now(channels) {\n            return atTime(channels, Date.now());\n        }\n\n        function nowOrImminent(channels) {\n            return atTime(channels, Date.now() + onNextThreshold);\n        }\n\n        function atTime(channels, dateMsec) {\n            let isArray = angular.isArray(channels);\n            if (!isArray) {\n                channels = [channels];\n            }\n\n            return lineup()\n                .then(lineup => {\n                    let programs = channels\n                        .map(channel => {\n                            let programs = lineup[channel.tmsId] || [];\n                            let whatsOnNow = programs.find(program => {\n                                let start = program.startTimeSec * 1000;\n                                let end = start + (program.durationMinutes * 60000);\n                                return dateMsec >= start && dateMsec < end;\n                            });\n                            if (whatsOnNow) {\n                                whatsOnNow.channel = channel;\n                            }\n                            return whatsOnNow;\n                        })\n                        .map(whatsOnNow =>\n                            whatsOnNow ? whatsOnViewModelDefinition.createInstance(whatsOnNow) : undefined\n                        );\n\n                    return isArray ? programs : programs[0]; //Return the same type that was passed in\n                });\n        }\n\n        function lineup() {\n            if (!lineupPromise) {\n                let url = `${config.piHost}${config.services.onNowOnNext}?shows=3&viewParentallyBlocked=true`;\n                lineupPromise = rxhttp.get(url, {withCredentials: true})\n                    .retry(3)\n                    .map(response => response.data)\n                    .toPromise($q)\n                    .catch(() => {\n                        //Make sure the failed promise isn't stored (preventing future request)\n                        lineupPromise = undefined;\n                    });\n\n                $timeout(() => lineupPromise = undefined, fifteenMinutes, false);\n            }\n            return lineupPromise;\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}