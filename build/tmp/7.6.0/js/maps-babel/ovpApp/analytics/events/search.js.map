{"version":3,"sources":["ovpApp/analytics/events/search.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/events/search.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.search', [\n        'ovpApp.analytics.analyticsService'\n    ])\n    .factory('search', searchEvents)\n    .run(function loadHandler(search) {\n            return search;\n        });\n\n    /* @ngInject */\n    function searchEvents($rootScope, analyticsService, $log, stringUtil) {\n\n        // Get a handle to the analytic state object for storing things.\n        let state = analyticsService.state;\n\n        // Simple enumeration for SearchMode\n        let SearchModeEnum = Object.freeze({\n            NONE: null,\n            RECENT: 'recent',\n            SUGGESTED: 'suggested'\n        });\n\n        // Simple enumeration for SearchType\n        let SearchTypeEnum = Object.freeze({\n            NONE: null,\n            PREDICTIVE: 'predictive',\n            KEYWORD: 'keyword'\n        });\n\n        // Need to track the search mode after a search so it can be included\n        // in any subsequent 'selectContent' events.\n        let searchMode = SearchModeEnum.NONE;\n\n        // Unique ID for each distinguishable search. Reset when user clicks\n        // the search icon, or resets the search field.\n        let searchId = null;\n\n        // Track the first character in the search field. If this ever changes,\n        // create a new search id, because the user is probably looking for\n        // something different now.\n        let lastKnownFirstChar = null;\n\n        // Track the last known search type. This is important when executing\n        // curated sub-searches on an existing search.\n        let lastSearchType = null;\n\n        // Track the last known queryId.\n        let lastQueryId = null;\n\n        /**\n         * Record the start of a new search.\n         */\n        $rootScope.$on('Analytics:search-start', () => {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: search-start');\n                }\n\n                searchId = stringUtil.guid();\n\n                // No search terms have been entered yet.\n                lastKnownFirstChar = null;\n\n                // Haven't chosen a search mode yet.\n                searchMode = SearchModeEnum.NONE;\n\n                let payload = {\n                    category: 'search',\n                    operationType: 'searchStarted',\n                    triggeredBy: 'user',\n                    triggeredUsing: analyticsService.getTriggeredBy(),\n                    searchId: searchId,\n                    elementStandardizedName: 'search',\n                    elementUiName: 'Search',\n                    elementType: 'link',\n                    searchType: SearchTypeEnum.PREDICTIVE\n                };\n\n                analyticsService.event('selectAction', payload);\n\n                state.setLastSearchStartedEvent(payload);\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * React to a keyup event in the search input field.\n         *\n         * @param e event\n         * @param data Key press event data.\n         */\n        $rootScope.$on('searchInput:key', (e,data) => {\n            try {\n                // If search input field is now empty, change the search id.\n                if (!data.target.value || data.target.value.length === 0) {\n                    searchId = stringUtil.guid();\n                    lastKnownFirstChar = null;\n\n                } else {\n                    // Search input field is not empty.\n                    let searchTerm = data.target.value;\n\n                    // If we don't have a previous first char, capture it now.\n                    if (!lastKnownFirstChar) {\n                        lastKnownFirstChar = searchTerm[0];\n                    }\n\n                    // If the first character has changed, generate a new search id\n                    // because the user appears to be searching for something different.\n                    else if (lastKnownFirstChar !== searchTerm[0]) {\n                        searchId = stringUtil.guid();\n                        lastKnownFirstChar = searchTerm[0];\n                    }\n                }\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * Record the closure of the search dialog.\n         */\n        $rootScope.$on('Analytics:search-exit', () => {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: search-exit');\n                }\n\n                analyticsService.event('searchClosed', {\n                    operationType: 'searchClosed',\n                    triggeredBy: 'user',\n                    searchId: searchId,\n                    category: 'search'\n                });\n\n                // Reset our search state.\n                resetSearchState();\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * React to the user clicking on a recent search result.\n         *\n         * @param e event\n         * @param data Event data for the recent search event.\n         */\n        $rootScope.$on('Analytics:search-recent-search', (e, data) => {\n            try {\n\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: search-recent-search', data);\n                }\n\n                let payload = {\n                    queryId: data.results.queryId,\n                    operationType: 'searchEntered',\n                    triggeredBy: 'user',\n                    searchId: searchId,\n                    category: 'search',\n                    numberOfSearchResults: 1,\n                    searchType: SearchTypeEnum.KEYWORD,\n                    searchText: data.results.queryString,\n                    results: [data.results.queryString],\n                    resultsMs: Math.max(0, Date.now() - state.getSearchStartedTimestamp()),\n                    rawData: data // Capture incoming event for future reprocess.\n                };\n\n                analyticsService.event('searched', payload);\n\n                // Store this as the last 'searched' event.\n                state.setLastSearchedEvent(payload);\n\n                // Record selected search mode in case user selects a result.\n                searchMode = SearchModeEnum.RECENT;\n\n                // Update guid after selecting a recent search (per reqs).\n                searchId = stringUtil.guid();\n\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * React to the performance of a search query against the external\n         * search service.\n         *\n         * @param e event\n         * @param data Event data for the search, including query and result details.\n         */\n        $rootScope.$on('Analytics:searched', (e, data) => {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: searched', data);\n                }\n\n                if (!state.getSearchStartedTimestamp()) {\n                    // If this happens, we can still record the search as a\n                    // zero-duration search, which will likely be flagged\n                    // for further investigation.\n                    $log.error('Analytics: state.getSearchStartedTimestamp() is unset.');\n                    state.setSearchStartedTimestamp(Date.now());\n                }\n\n                // Record selcted search mode.\n                searchMode = SearchModeEnum.SUGGESTED;\n\n                // Collect result count and top 5 matches\n                let resultCount = 0;\n                let topResultNames = [];\n                for (var i = 0; i < data.results.length; ++i) {\n                    let matchList = data.results[i].results;\n\n                    // Aggregate result count.\n                    resultCount += data.results[i].num_results;\n\n                    // Append topResultName count\n                    for (var j = 0; j < matchList.length; ++j) {\n                        let match = matchList[j];\n                        if (topResultNames.length < 5) {\n                            topResultNames.push(\n                                (match.tmsProgramId || match.searchStringMatch));\n                        }\n                    }\n                }\n\n                let payload = {\n                    queryId: data.queryId,\n                    operationType: 'searchEntered',\n                    triggeredBy: 'user',\n                    searchId: searchId,\n                    category: 'search',\n                    numberOfSearchResults: resultCount,\n                    searchType: data.isQuickSearch ?\n                        SearchTypeEnum.PREDICTIVE :\n                        SearchTypeEnum.KEYWORD,\n                    searchText: data.params.query,\n                    results: topResultNames,\n                    resultsMs: Math.max(0, Date.now() - state.getSearchStartedTimestamp()),\n                    rawData: data // Capture incoming event for future reprocess.\n                };\n\n                // Track the last known search type and query ID.\n                lastSearchType = payload.searchType;\n                lastQueryId = data.queryId;\n\n                analyticsService.event('searched', payload);\n\n                // Store this as the last 'searched' event.\n                state.setLastSearchedEvent(payload);\n\n                // Clear the search start timestamp so we don't accidentally\n                // reuse it for a subsequent search. This assumes searches are\n                // serialized. (If they're concurrent, this could get reused and\n                // we would see artificially short search durations.)\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: Clearing search started timestamp');\n                }\n                state.setSearchStartedTimestamp(null);\n\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * React to the performance of a search query against the external\n         * search service.\n         *\n         * @param e event\n         * @param data Event data for the search, including query and result details.\n         */\n        $rootScope.$on('Analytics:sub-search', (e, data) => {\n            if (analyticsService.isDebug()) {\n                $log.debug('Analytics: sub-search', data);\n            }\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: sub-search', data, state);\n                }\n\n                if (!state.getSearchStartedTimestamp()) {\n\n                    // If this happens, we can still record the search as a\n                    // zero-duration search, which will likely be flagged\n                    // for further investigation.\n                    $log.error('Analytics: state.getSearchStartedTimestamp() is unset.');\n                    state.setSearchStartedTimestamp(Date.now());\n                }\n\n                // Collect result count and top 5 matches\n                // let resultCount = data.results.length;\n                let topResultNames = [];\n                let idx = 0;\n                while (topResultNames.length < 5 && idx < data.results.length) {\n\n                    let match = data.results[idx];\n\n                    if (match.tmsProgramId) {\n                        topResultNames.push(match.tmsProgramIds[0]);\n                    } else if (angular.isDefined(match.tmsProgramIds) &&\n                        Array.isArray(match.tmsProgramIds) &&\n                        match.tmsProgramIds.length > 0) {\n                        topResultNames.push(match.tmsProgramIds[0]);\n                    }\n                    idx += 1;\n                }\n\n                let payload = {\n                    operationType: 'searchEntered',\n                    triggeredBy: 'user',\n                    searchId: searchId,\n                    category: 'search',\n                    numberOfSearchResults: data.results.length,\n                    searchType: lastSearchType,\n                    searchText: data.searchText,\n                    results: topResultNames,\n                    resultsMs: Math.max(0, Date.now() - state.getSearchStartedTimestamp())\n                };\n\n                analyticsService.event('searched', payload);\n\n                // Store this as the last 'searched' event.\n                payload.rawData = data;\n                state.setLastSearchedEvent(payload);\n\n                // Clear the search start timestamp so we don't accidentally\n                // reuse it for a subsequent search. This assumes searches are\n                // serialized. (If they're concurrent, this could get reused and\n                // we would see artificially short search durations.)\n                state.setSearchStartedTimestamp(null);\n\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * React to the issuance of a search query to the external search\n         * service. Used to detect the duration before results are returned.\n         */\n        $rootScope.$on('Analytics:issue-search', () => {\n            try {\n                state.setSearchStartedTimestamp(Date.now());\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: issue-search. timestamp=' + state.getSearchStartedTimestamp());\n                }\n\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * Receive a selection by the user, which could be a Person, Movie, Series,\n         * Team, etc. Propagate as a selectAction or selectContent event as appropriate.\n         *\n         * @param e event\n         * @param data Event data for the selection.\n         */\n        $rootScope.$on('Analytics:search-select-item', (e, data) => {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: search-select-item. searchId=' + searchId +\n                        ', started=' + state.getSearchStartedTimestamp(), data);\n                }\n\n                data.pageSectionName = data.pageSectionName || 'searchResultsArea';\n                data.triggeredUsing = analyticsService.getTriggeredBy();\n\n                // If we don't have a search ID, we need to create one based on the\n                // most recent search event. This can happen when the user begins\n                // playing a search result, then navigates backs to the result page\n                // (via the browser back button) and selects another asset.\n                if (!searchId) {\n                    replayPastSearchEvents(data.asset.dsQueryId);\n                }\n\n                if (!data.asset.resultDisplay || ['Title', 'Movie', 'Series'].indexOf(data.asset.resultDisplay) >= 0) {\n                    $rootScope.$emit('Analytics:selectContent', data);\n                } else {\n                    curatedSelectAction(data, data.asset.resultDisplay);\n\n                    if (data.generateSelectContent && data.asset.tmsProgramId) {\n                        $rootScope.$emit('Analytics:selectContent', data);\n                    }\n                }\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        });\n\n        /**\n         * We've received a search-select event after our search context was\n         * discarded. To compensate, we'll create a new search context here,\n         * based on the last known search.\n         *\n         * @param newQueryId The queryId used for the incoming selected item or content.\n         *\n         */\n        function replayPastSearchEvents(newQueryId) {\n            if (analyticsService.isDebug()) {\n                $log.debug('Analytics: replayPastSearchEvents()');\n            }\n\n            let searchStarted = angular.copy(state.getLastSearchStartedEvent());\n            let searched = angular.copy(state.getLastSearchedEvent());\n\n            if (!searchStarted || !searched) {\n                $log.error('Analytics: Prior search events not found');\n                return;\n            }\n\n            // Update events with new searchId.\n            searchId = stringUtil.guid();\n\n            searchStarted.searchId = searchId;\n            searchStarted.triggeredBy = 'application';\n            searchStarted.triggeredUsing = 'backButton';\n            analyticsService.event('selectAction', searchStarted);\n\n            searched.searchId = searchId;\n            searched.queryId = newQueryId;\n            searched.triggeredBy = 'application';\n            searched.triggeredUsing = 'backButton';\n            analyticsService.event('searched', searched);\n        }\n\n        /**\n         * Clear the search state.\n         */\n        function resetSearchState() {\n            if (analyticsService.isDebug()) {\n                $log.debug('Analytics: search:resetSearchState');\n            }\n\n            searchId = null;\n            searchMode = SearchModeEnum.NONE;\n            state.setSearchStartedTimestamp(null);\n            lastKnownFirstChar = null;\n            lastSearchType = null;\n            lastQueryId = null;\n        }\n\n        /**\n         * React to a Analytics:search-reset event by clearing the search state.\n         */\n        $rootScope.$on('Analytics:search-reset', (e) => {\n            if (analyticsService.isDebug()) {\n                $log.debug('Analytics: search-reset', e);\n            }\n\n            resetSearchState();\n        });\n\n        /**\n         * Publish a selectAction event to indicate the user chose\n         * to refine their search by person, sports, or other category.\n         *\n         * @param data Data about the user's selection.\n         */\n        function curatedSelectAction(data, category) {\n            try {\n\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: curatedSelectAction', data, category);\n                }\n\n                // Capture result facet. Does not exist for DVR recordings.\n                let selectedResultFacet = (data.asset.resultDisplay &&\n                    data.asset.resultDisplay.toLowerCase()) || null;\n                let payload = {\n                    category: 'search',\n                    triggeredBy: 'user',\n                    triggeredUsing: analyticsService.getTriggeredBy(),\n                    operationType: 'unknown',\n                    searchId: searchId,\n                    elementStandardizedName: 'search',\n                    elementUiName: 'Search',\n                    elementType: 'link',\n                    selectedResultName: data.asset.title,\n                    selectedResultFacet: selectedResultFacet,\n                    queryId: data.asset.dsQueryId,\n                    elementIndex: data.asset.searchResultIndex\n                };\n\n                if (category) {\n                    if (category === 'Person') {\n                        payload.operationType = 'curatedSearchCastAndCrew';\n                        payload.selectedResultFacet = 'person';\n                    } else if (category === 'Sports') {\n                        payload.operationType = 'curatedSearchSports';\n                        payload.selectedResultFacet = 'sports';\n                    } else if (category === 'Team') {\n                        payload.operationType = 'curatedSearchTeam';\n                        payload.selectedResultFacet = 'team';\n                    } else if (category === 'Networks') {\n                        payload.operationType = 'curatedSearchNetworks';\n                        payload.selectedResultFacet = 'network';\n                    }\n                }\n\n                analyticsService.event('selectAction', payload);\n            } catch (ex) {\n                $log.error('Analytics: search error', ex);\n            }\n        }\n\n        return {};\n    }\n}());\n"],"sourceRoot":"/source/"}