{"version":3,"sources":["ovpApp/services/error-codes.js"],"names":[],"mappings":"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","file":"ovpApp/services/error-codes.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.services.errorCodes', [\n        'ovpApp.config',\n        'ovpApp.config.errorCodes.defaults',\n        'ovpApp.config.errorCodes.overrides'\n    ])\n    .factory('errorCodesService', ErrorCodesService);\n\n    /* @ngInject */\n    function ErrorCodesService(config, $http, $q, ERROR_CODES_DEFAULTS,\n        ERROR_CODES_OVERRIDES, $rootScope, $log, $interval) {\n        //json structure\n        let errorCodes = {}; //\n        const endpoint = config.piHost + '/tdcs/public/errors';\n\n        let service = {\n            getMessageForCode,\n            getHeaderForCode,\n            getAlertForCode,\n            getAltForCode,\n            getErrorCodes,\n            subscribe\n        };\n\n        activate();\n        return service;\n\n\n        function activate() {\n            importLocalCodes();\n            getErrorCodes();\n            setupUpdateTimer();\n        }\n\n        function importLocalCodes() {\n            errorCodes = angular.merge(ERROR_CODES_DEFAULTS.errorCodes, ERROR_CODES_OVERRIDES.errorCodes);\n            errorCodes = errorCodes.reduce((memo, ecode) => {\n                if (ecode.full_error_code) {\n                    memo[ecode.full_error_code] = ecode;\n                }\n                return memo;\n            }, {});\n        }\n\n        function subscribe(scope, callback) {\n            let handler = $rootScope.$on('errorCodesService:ready', callback);\n            scope.$on('$destroy', handler);\n        }\n\n        function notify() {\n            $rootScope.$emit('errorCodesService:ready');\n        }\n\n        function getErrorCodes() {\n            //retrieve error codes from server\n            let data = {clientType: 'ONEAPP-OVP', apiKey: config.oAuth.consumerKey};\n\n            //TODO:  if-modified-since header\n\n            $http({\n                method: 'GET',\n                url: endpoint,\n                params: data,\n                bypassRefresh: true\n            }).then((data) => {\n                if (data && data.data && data.data.errorCodes) {\n                    data.data.errorCodes.forEach(error => {\n                        if (error.full_error_code) {\n                            let code = normalizeErrorCode(error.full_error_code);\n                            errorCodes[code] = error;\n                        }\n                    });\n                    return errorCodes;\n                } else {\n                    return $q.reject('No data returned');\n                }\n            }).catch((e) => {\n                $log.error('Unable to fetch error codes from ECDB', e);\n            }).finally(() => {\n                notify();\n            });\n        }\n\n        function setupUpdateTimer() {\n            $interval(() => {\n                getErrorCodes();\n            }, config.errorCodesService.checkIntervalMs);\n        }\n\n        function getMessageForCode(code, replaceVars = {}) {\n            let message = '';\n            let errorCode = getCode(code);\n            if (errorCode) {\n                message = errorCode.full_customer_message;\n                replaceVars.CODE = code;\n                message = subVars(message, replaceVars);\n            }\n            return message;\n        }\n\n        function getHeaderForCode(code, replaceVars = {}) {\n            let header = '';\n            let errorCode = getCode(code);\n            if (errorCode) {\n                header = errorCode.header;\n                replaceVars.CODE = code;\n                header = subVars(header, replaceVars);\n            }\n            return header;\n        }\n\n        function getAlertForCode(code, replaceVars = {}) {\n            let errorCode = getCode(code);\n            replaceVars.CODE = code;\n            return {\n                message: subVars(errorCode.message, replaceVars),\n                title: (errorCode.header) ? subVars(errorCode.header, replaceVars) : null,\n                buttonText: 'OK'\n            };\n        }\n\n        function getAltForCode(code, replaceVars = {}) {\n            let errorCode = getCode(code);\n            let alt = '';\n            replaceVars.CODE = code;\n            if (errorCode) {\n                alt = errorCode.altText;\n                alt = subVars(alt, replaceVars);\n            }\n            return alt;\n        }\n\n        function getCode(code) {\n            let errorCode = errorCodes[normalizeErrorCode(code)];\n            // fallback onto 9000 if a specific error code does not exist\n            if (!errorCode) {\n                errorCode = errorCodes['WLI-9000'];\n            }\n            return errorCode;\n        }\n\n        function subVars(message, replaceVars) {\n            if (replaceVars) {\n                message = Object.keys(replaceVars).reduce((memo, key) => {\n                    if (memo) {\n                        return memo.replace('{{' + key + '}}', replaceVars[key]);\n                    }\n                    return '';\n                }, message);\n            }\n            return message;\n        }\n\n        /*\n         Ensure that the error codes all follow the same format\n         */\n        function normalizeErrorCode(code) {\n            return (code + '').toUpperCase();\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}