{"version":3,"sources":["ovpApp/analytics/events/sessionAnalytics.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/events/sessionAnalytics.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.sessionAnalytics', [\n        'ovpApp.analytics.analyticsService',\n        'ovpApp.analytics.analyticsAssetHelper',\n        'ovpApp.config'\n    ])\n    .factory('sessionAnalytics', sessionEvents)\n    .run(function loadHandler(sessionAnalytics) {\n            return sessionAnalytics;\n        });\n\n    /* @ngInject */\n    function sessionEvents($rootScope, analyticsService, profileService,\n        lineupService, stbService, $q, $log, config, analyticsAssetHelper, $window) {\n\n        // Track our network location data.\n        let locationData = null;\n\n        // Track our account features.\n        let accountFeatures = null;\n\n        // Track our video zone.\n        let videoZone = null;\n\n        // Track whether or not we have called userConfigSet.\n        let userConfigSetCalled = false;\n\n        /**\n         * React to a change in location.\n         *\n         * @param e event\n         * @param data Event data for the location.\n         */\n        function locationChanged(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: locationChanged', data);\n                }\n\n                // If location data is new, or has changed, update\n                // the SDK.\n                if (locationData === null ||\n                    locationData.behindOwnModem !== data.behindOwnModem) {\n\n                    // Capture the new value\n                    locationData = data;\n\n                    // If this is a change to the user config, flush existing\n                    // events so this update will apply only to new events.\n                    if (userConfigSetCalled) {\n                        analyticsService.flush();\n                    }\n\n                    // Update the SDK\n                    analyticsService.getSDK().setNetworkStatus({\n                        networkStatus: data.behindOwnModem ? 'onNet' : 'offNet'\n                    });\n\n                    // Optionally invoke userConfig method if all user config\n                    // data has been collected.\n                    updateUserConfigIfNeeded();\n                }\n            } catch (ex) {\n                $log.error('Analytics: locationChanged error', ex);\n            }\n        }\n\n        /**\n         * React to the retrieval of capabilities.\n         *\n         * @param e event\n         * @param data Event data for the location.\n         */\n        function receiveProfileData() {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: receiveProfileData');\n                }\n\n                $q.all([\n                    profileService.isAccessibilityEnabled(),\n                    profileService.isIptvPackage(),\n                    profileService.isCdvrEnabled()\n                ])\n                .then(result => {\n\n                    try {\n                        let [isAccessible, hasIpTv, hasCDVR] = result;\n\n                        // If account features data is new, or has changed, update\n                        // the SDK.\n                        if (accountFeatures === null ||\n                            accountFeatures.accessibility !== isAccessible ||\n                            accountFeatures.boxless !== hasIpTv ||\n                            accountFeatures.cDvr !== hasCDVR\n                        ) {\n                            accountFeatures = {\n                                accessibility: isAccessible,\n                                boxless: hasIpTv,\n                                cDvr: hasCDVR\n                            };\n\n                            // If this is a change to the user config, flush existing\n                            // events so this update will apply only to new events.\n                            if (userConfigSetCalled) {\n                                analyticsService.flush();\n                            }\n\n                            if (analyticsService.isDebug()) {\n                                $log.debug('Analytics: Updating accountFeatures', accountFeatures);\n                            }\n                            analyticsService.getSDK().setAccountFeatures(accountFeatures);\n\n                            updateUserConfigIfNeeded();\n                        }\n                    } catch (ex) {\n                        $log.error('Analytics: capabilities error', ex);\n                    }\n                }, function (error) {\n                    $log.error('Analytics: profileService error', error);\n                });\n            } catch (ex) {\n                $log.error('Analytics: capabilities error', ex);\n            }\n        }\n\n        /**\n         * React to the retrieval of the lineup.\n         *\n         * @param e event\n         * @param data Event data for the location.\n         */\n        function sessionLineup(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: lineup', data);\n                }\n\n                // If account features data is new, or has changed, update\n                // the SDK.\n                if (videoZone === null ||\n                    videoZone.division !== data.market ||\n                    videoZone.lineup !== data.lineupId\n                ) {\n                    videoZone = {\n                        division: data.market,\n                        lineup: data.lineupId\n                    };\n\n                    // If this is a change to the user config, flush existing\n                    // events so this update will apply only to new events.\n                    if (userConfigSetCalled) {\n                        analyticsService.flush();\n                    }\n\n                    if (analyticsService.isDebug()) {\n                        $log.debug('Analytics: Updating videoZone', videoZone);\n                    }\n                    analyticsService.getSDK().setVideoZone(videoZone);\n\n                    updateUserConfigIfNeeded();\n                }\n            } catch (ex) {\n                $log.error('Analytics: lineup error', ex);\n            }\n        }\n\n        /**\n         * Inform the SDK that all initial session configuration data for this session\n         * has been set. This only happens once per session, at the beginning.\n         * Afterwards, the individual configuration data items can continue to be\n         * changed, but there's no need to re-invoke the SDK's 'userConfigSet'\n         * method.\n         */\n        function updateUserConfigIfNeeded() {\n\n            if (locationData !== null &&\n                accountFeatures !== null &&\n                videoZone !== null &&\n                userConfigSetCalled === false) {\n\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: processing event: userConfigSet for this session',\n                        locationData, accountFeatures, videoZone);\n                }\n\n                // Update experiment and variant IDs\n                if (config.dePayload) {\n                    analyticsService.getSDK().setExperimentConfigurations({\n                        experimentUuids: analyticsAssetHelper.objToArray(config.dePayload.experimentUuids),\n                        variantUuids: analyticsAssetHelper.objToArray(config.dePayload.variantUuids)\n                    });\n                } else {\n                    analyticsService.getSDK().setExperimentConfigurations({\n                        experimentUuids: [],\n                        variantUuids: []\n                    });\n                }\n\n                // Change our applicationName to 'SpecU', if needed.\n                if (profileService.isSpecU()) {\n                    analyticsService.getSDK().setApplicationName({applicationName: 'SpecU'});\n                } else if (profileService.isBulkMDU()) {\n                    analyticsService.getSDK().setApplicationName({applicationName: 'BulkMDU'});\n                }\n\n                analyticsService.getSDK().userConfigSet();\n                userConfigSetCalled = true;\n            }\n        }\n\n        /**\n         * Report channel availability.\n         *\n         * @param e event\n         * @param data Event data containing channel information.\n         */\n        function channelInfo(e, data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: channelInfo', data);\n                }\n\n                // Event payload includes channel counts.\n                let payload = {\n                    numberAvailableChannels: 0,\n                    numberUnavailableChannels: 0\n                };\n\n                if (data && data.channels && Array.isArray(data.channels)) {\n                    let unblockedChannelIds = [];\n\n                    for (var i = 0; i < data.channels.length; ++i) {\n                        let channel = data.channels[i];\n\n                        // Count the available and unavailable channels.\n                        if (isChannelAvailable(channel)) {\n                            ++payload.numberAvailableChannels;\n                            unblockedChannelIds.push(channel.tmsGuideId);\n                        } else {\n                            ++payload.numberUnavailableChannels;\n                        }\n                    }\n\n                    // If we only have a few channels available, include their IDs.\n                    if (unblockedChannelIds.length < 10) {\n                        payload.availableChannels = unblockedChannelIds;\n                    }\n                }\n\n                analyticsService.event('checkAvailableChannels', payload);\n\n            } catch (ex) {\n                $log.error('Analytics: channelInfo error', ex);\n            }\n        }\n\n        /**\n         * Determine if the given channel is available for viewing or not.\n         * @param channel to evaluate\n         * @return True if the channel is available.\n         */\n        function isChannelAvailable(channel) {\n            let available = (\n                channel !== null &&\n                channel.twcTvParentallyBlocked === false &&\n                channel.twcTvEntitled === true\n            );\n            return available;\n        }\n\n        /**\n         * Prepare to resume this session after the page refreshes.\n        */\n        function prepareForRefresh(e, data = {}) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: prepareForRefresh, url=' + $window.location.href, data);\n                }\n\n                analyticsService.getSDK().set('isOnline', false);\n            } catch (ex) {\n                $log.error('Analytics: prepareForRefresh error', ex);\n            }\n        }\n\n        /**\n         * Function for attaching event listeners.\n         */\n        function attachEventListeners() {\n            try {\n                $rootScope.$on('Session:lineup', sessionLineup);\n                $rootScope.$on('Session:profileRefreshed', receiveProfileData);\n                $rootScope.$on('Analytics:locationRetrieved', locationChanged);\n                $rootScope.$on('Analytics:channel-info', channelInfo);\n                $rootScope.$on('Analytics:prepareForRefresh', prepareForRefresh);\n            }\n            catch (ex) {\n                $log.error('Analytics navigation:', ex);\n            }\n        }\n\n        attachEventListeners();\n\n        return {\n            channelInfo,\n            sessionLineup,\n            receiveProfileData,\n            locationChanged,\n            isChannelAvailable\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}