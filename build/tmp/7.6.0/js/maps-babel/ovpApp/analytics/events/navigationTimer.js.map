{"version":3,"sources":["ovpApp/analytics/events/navigationTimer.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;IAEA,QAAQ,OAAO,2CAA2C,CACtD,qCACA,4BACA,kBAEH,QAAQ,mBAAmB,iBAC3B,wBAAI,SAAS,YAAY,iBAAiB;QACnC,OAAO;;;;IAIf,SAAS,gBAAgB,MAAM,UAAU,YAAY,QAAQ;;QAEzD,IAAI,eAAe;;QAEnB,IAAI,cAAc;;QAElB,SAAS,WAAW,YAAY,UAAU;YACtC,IAAI;;;;;gBAKA,IAAI,eAAe,YAAY,eAAe,cAC1C,YAAY,aAAa,UAAU;;;oBAGnC,OAAO;;;;gBAIX,IAAI,cAAc;;;oBAGd,SAAS,OAAO;oBAChB,WAAW,MAAM,iCAAiC;oBAClD,OAAO;;;;gBAIX,cAAc;oBACV,YAAY;oBACZ,UAAU;oBACV,gBAAgB;;;gBAGpB,eAAe,SACX,YAAY;;oBAER,WAAW,MAAM,qBAAqB;mBAE1C,YAAY;;gBAEhB,WAAW,MAAM,+BAA+B;gBAChD,OAAO;cAEX,OAAO,IAAI;gBACP,KAAK,MAAM,8BAA8B;;;;QAIjD,SAAS,cAAc;YACnB,IAAI;gBACA,IAAI,cAAc;oBACd,SAAS,OAAO;oBAChB,WAAW,MAAM,iCAAiC;oBAClD,eAAe;;cAGvB,OAAO,IAAI;gBACP,KAAK,MAAM,8BAA8B;;;;QAIjD,SAAS,4BAA4B;;YAEjC,IAAI,iBAAiB;;YAErB,IAAI;gBACA,IAAI,UAAU,OAAO,aAAa,OAAO,UAAU,mBAAmB;oBAClE,iBAAiB,OAAO,UAAU;;cAG1C,OAAO,IAAI;gBACP,KAAK,MAAM,8BAA8B;;;YAG7C,OAAO;;;QAGX,OAAO;YACH,YAAY;YACZ,aAAa;;;KAGpB","file":"ovpApp/analytics/events/navigationTimer.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.navigationTimer', [\n        'ovpApp.analytics.analyticsService',\n        'ovpApp.legacy.stringUtil',\n        'ovpApp.config'\n    ])\n    .factory('navigationTimer', navigationTimer)\n    .run(function loadHandler(navigationTimer) {\n            return navigationTimer;\n        });\n\n    /* @ngInject */\n    function navigationTimer($log, $timeout, $rootScope, config) {\n\n        let timeoutTimer = null;\n\n        let description = null;\n\n        function startTimer(appSection, pageName) {\n            try {\n                // $log.debug('Analytics: navigationTimer::startTimer:' + appSection + ', ' +\n                //     pageName, config);\n\n                // If we're already timing for this page, return existing timer.\n                if (description && description.appSection === appSection &&\n                    description.pageName === pageName) {\n                    // $log.debug('Analytics navigationTimer::startTime Ignoring ' +\n                    //     'request for duplicate timer.', timeoutTimer);\n                    return timeoutTimer;\n                }\n\n                // If a timer is already in progress, cancel it now.\n                if (timeoutTimer) {\n                    // $log.warn('Analytics navigationTimer::startTime Cancelling ' +\n                    //     'ongoing request for other page', description);\n                    $timeout.cancel(timeoutTimer);\n                    $rootScope.$emit('Analytics:nav-timer-cancelled', description);\n                    return timeoutTimer;\n                }\n\n                // Create new timer and announce it.\n                description = {\n                    appSection: appSection,\n                    pageName: pageName,\n                    durationMillis: getTimeoutDurationForPage()\n                };\n\n                timeoutTimer = $timeout(\n                    function () {\n                        // $log.debug('NavTimer: Timeout fired!');\n                        $rootScope.$emit('Analytics:timeout', description);\n                    },\n                    description.durationMillis);\n\n                $rootScope.$emit('Analytics:nav-timer-started', description);\n                return timeoutTimer;\n            }\n            catch (ex) {\n                $log.error('Analytics navigationTimer:', ex);\n            }\n        }\n\n        function cancelTimer() {\n            try {\n                if (timeoutTimer) {\n                    $timeout.cancel(timeoutTimer);\n                    $rootScope.$emit('Analytics:nav-timer-cancelled', description);\n                    timeoutTimer = null;\n                }\n            }\n            catch (ex) {\n                $log.error('Analytics navigationTimer:', ex);\n            }\n        }\n\n        function getTimeoutDurationForPage() {\n\n            let durationMillis = 30000; // Default timeout in milliseconds.\n\n            try {\n                if (config && config.analytics && config.analytics.pageTimeoutMillis) {\n                    durationMillis = config.analytics.pageTimeoutMillis;\n                }\n            }\n            catch (ex) {\n                $log.error('Analytics navigationTimer:', ex);\n            }\n\n            return durationMillis;\n        }\n\n        return {\n            startTimer: startTimer,\n            cancelTimer: cancelTimer\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}