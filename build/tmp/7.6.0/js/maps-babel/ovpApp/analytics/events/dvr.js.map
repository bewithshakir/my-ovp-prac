{"version":3,"sources":["ovpApp/analytics/events/dvr.js"],"names":[],"mappings":"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","file":"ovpApp/analytics/events/dvr.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.dvr', [\n        'ovpApp.analytics.analyticsService'\n    ])\n    .factory('analyticsDvr', dvrEvents)\n    .run(function loadHandler(analyticsDvr) {\n            return analyticsDvr;\n        });\n\n    /* @ngInject */\n    function dvrEvents($rootScope, analyticsService, $log, analyticsAssetHelper) {\n\n        function cdvrRequestToRecord(asset, action, settings, errorData) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: cdvrRequestToRecord', asset, action, settings, errorData);\n                }\n\n                let data = {\n                    success: (errorData && errorData.error ? false : true),\n                    context: 'cdvr',\n                    featureName: 'cdvr',\n                    featureCurrentStep: 4,\n                    featureStepName: 'requestToRecord',\n                    featureNumberOfSteps: 100,\n                    featureType: 'cdvrRequestToRecord',\n                    recordingOptions: analyticsAssetHelper.extractRecordingOptions(asset)\n                };\n\n                if (errorData) {\n                    data.errorType = 'cdvr';\n                    data.errorCode = errorData.errorCode;\n                    data.errorMessage = errorData.errorMessage;\n                    data.clientErrorCode = extractErrorCode(errorData.error);\n                }\n\n                if (action && action.actionType === 'cdvrScheduleRecording') {\n                    data.recordingOptions.recordingScheduleType = 'Single';\n                } else if (action && action.actionType === 'cdvrScheduleSeriesRecording') {\n                    data.recordingOptions.recordingScheduleType = 'Series';\n                }\n\n                // Extend recordingOption with settings, if available.\n                if (settings) {\n                    data.recordingOptions = angular.extend(data.recordingOptions,\n                            analyticsAssetHelper.convertAllValuesToStrings(settings));\n                }\n\n                analyticsService.event('requestToRecord', data);\n\n            } catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        function extractErrorCode(error) {\n            let errCode = '' + error.status;\n            if (error.data && error.data.context && error.data.context.detailedResponseCode) {\n                errCode = error.data.context.detailedResponseCode;\n            }\n\n            return errCode;\n        }\n\n        function cdvrRequestToCancel(asset, action, settings, errorData) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: cdvrRequestToCancel', asset, action, settings, errorData);\n                }\n\n                let data = {\n                    success: (errorData ? false : true),\n                    context: 'cdvr',\n                    featureName: 'cdvr',\n                    featureCurrentStep: 4,\n                    featureStepName: 'requestToCancelRecording',\n                    featureNumberOfSteps: 100,\n                    featureType: 'cdvrRequestToCancel',\n                    recordingOptions: analyticsAssetHelper.extractRecordingOptions(asset)\n                };\n\n                if (action && action.actionType === 'cdvrCancelRecording') {\n                    data.recordingOptions.recordingScheduleType = 'Single';\n                } else if (action && action.actionType === 'cdvrCancelSeriesRecording') {\n                    data.recordingOptions.recordingScheduleType = 'Series';\n                }\n\n                if (errorData) {\n                    data.errorType = 'cdvr';\n                    data.errorCode = errorData.errorCode;\n                    data.errorMessage = errorData.errorMessage;\n                    data.clientErrorCode = extractErrorCode(errorData.error);\n                }\n\n                analyticsService.event('requestToCancelRecording', data);\n\n            } catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        function cdvrRequestToDelete(asset, action, errorData) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: cdvrRequestToDelete: asset, action, errorData', asset, action, errorData);\n                }\n\n                let data = {\n                    success: (errorData ? false : true),\n                    context: 'cdvr',\n                    featureName: 'cdvr',\n                    featureCurrentStep: 4,\n                    featureNumberOfSteps: 100,\n                    featureStepName: 'requestToDeleteRecording',\n                    featureType: 'cdvrRequestToDelete',\n                    recordingOptions: analyticsAssetHelper.extractRecordingOptions(asset)\n                };\n\n                if (errorData) {\n                    data.errorType = 'cdvr';\n                    data.errorCode = errorData.errorCode;\n                    data.errorMessage = errorData.errorMessage;\n                    data.clientErrorCode = extractErrorCode(errorData.error);\n                }\n\n                analyticsService.event('requestToDeleteRecording', data);\n\n            } catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        /**\n         * Function for attaching event listeners.\n         */\n        function attachEventListeners() {\n            try {\n                $rootScope.$on('update-dvr', (evt, schedule, asset, action) => {\n                    if (action && action.actionType === 'cdvrScheduleRecording') {\n                        cdvrRequestToRecord(asset, action);\n                    } else if (action && action.actionType === 'cdvrDeleteRecording') {\n                        cdvrRequestToDelete(asset, action);\n                    } else if (action && (\n                        action.actionType === 'cdvrCancelRecording' ||\n                        action.actionType === 'cdvrCancelSeriesRecording')) {\n                        cdvrRequestToCancel(asset, action);\n                    } else {\n                        if (analyticsService.isDebug()) {\n                            $log.debug('Analytics: unhandled update-dvr event', evt, schedule, asset, action);\n                        }\n                    }\n                });\n                $rootScope.$on('Analytics:cdvr-record-failed', (evt, asset, action, settings, errorData) => {\n                    cdvrRequestToRecord(asset, action, settings, errorData);\n                });\n                $rootScope.$on('Analytics:cdvr-delete-recording-failed',\n                    (evt, asset, action, error) => {\n                    cdvrRequestToDelete(asset, action, error);\n                });\n                $rootScope.$on('Analytics:cdvr-cancel-recording-failed',\n                    (evt, asset, action, settings, error) => {\n                    cdvrRequestToCancel(asset, action, settings, error);\n                });\n                $rootScope.$on('Analytics:cdvr-schedule-series-recording', (evt, asset, action, settings) => {\n                    cdvrRequestToRecord(asset, action, settings);\n                });\n            }\n            catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        // Attach the event listeners.\n        attachEventListeners();\n\n        return {\n            cdvrRequestToRecord,\n            cdvrRequestToDelete\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}