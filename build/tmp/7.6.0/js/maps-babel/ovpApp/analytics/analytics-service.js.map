{"version":3,"sources":["ovpApp/analytics/analytics-service.js"],"names":[],"mappings":"AAAA;AACA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,qCAAqC,CAChD,iBACA,0BACA,2BAEH,QAAQ,oBAAoB,SAAS,0BAA0B;QAC5D,IAAI,UAAU;YACV,KAAA;YACA,KAAA;YACA,OAAA;;;QAGJ,IAAI,SAAS;;QAEb,SAAS,IAAI,KAAK;YACd,OAAO,OAAO,eAAe,QAAQ,SAAS;;QAElD,SAAS,IAAI,KAAK,OAAO;YACrB,OAAO,OAAO,eAAe,QAAQ,SAAS,KAAK;;QAEvD,SAAS,MAAM,KAAK;YAChB,OAAO,OAAO,eAAe,WAAW,SAAS;;;QAGrD,OAAO;OAEV,QAAQ,oBAAoB;;;IAG7B,SAAS,iBAAiB,QAAQ,gBAAgB,UAAU,MAAM,YAAY,SAAS,kBAAkB;;QAErG,IAAI,YAAY,QAAQ;QACxB,IAAI,aAAa,SAAS;QAC1B,IAAI,QAAQ,IAAI;QAChB,IAAI,QAAQ,OAAO,UAAU,SAAS,WAAW,mBAAmB,UAAU;QAC9E,IAAI,UAAU,OAAO,UAAU,OAAO;QACtC,IAAI,WAAW,OAAO,UAAU;;;QAGhC,IAAI,UAAU;YACV,YAAY,CACR,WACA,UACA,kBACA,iBACA,gBACA;YAEJ,YAAY,CACR,WACA,UACA,gBACA,eACA,kBACA,iBACA,mBACA,iBACA,iBACA;YAEJ,QAAQ,CACJ,UACA,eACA,kBACA,iBACA,mBACA;YAEJ,SAAS,CACL,mBACA,iBACA;YAEJ,QAAQ,CACJ;YAEJ,WAAW,CACP;;;QAIR,IAAI,UAAU;YACV,YAAY,SAAA,WAAC,QAAQ,SAAO;gBApCxB,OAoC6B,YAAW,QAAQ;;YACpD,OAAO,SAAA,MAAC,MAAM,MAAM,eAAa;gBAlC7B,OAkCkC,OAAM,MAAM,MAAM;;YACxD,mBAAmB,SAAA,kBAAA,UAAQ;gBAhCvB,OAgC2B,MAAM,aAAa;;YAClD,WAAA;YACA,OAAA;YACA,wBAAA;YACA,OAAA;YACA,QAAA;YACA,gBAAA;YACA,SAAA;;;QAGJ,OAAO;;;QAGP,SAAS,OAAM,MAAM,MAAM,eAAe,WAAW;YACjD,IAAI;;gBAEA,IAAI,eAAe;gBACnB,IAAI;;gBAEJ,IAAI,SAAS,CAAC,UAAU,SAAS,OAAO,UAAU,aAAa,QAAQ,QAAQ,GAAG;oBAC9E,KAAK,MAAM,kCAAkC,MAAM;;;gBAGvD,IAAI,SAAS;;oBAET,IAAI;wBACA,IAAI,oBACA,UACA,OAAO,aACP,OAAO,UAAU,UACjB,OAAO,UAAU,OAAO,UACxB,QAAQ,UAAU,OAAO,UAAU,OAAO,OAAO,UACjD,CAAC,OAAO,UAAU,OAAO,OAAO;;wBAEpC,IAAI,mBAAmB;4BACnB,IAAI,OAAO;gCACP,KAAK,MAAM,+BAA+B,MAAM;;4BAEpD;;;wBAGJ,MAAM,qBAAqB;;;wBAG3B,IAAI,OAAO;4BACP,eAAe;;;;wBAInB,UAAU,MAAM,MAAM,aAAa;;wBAEnC,IAAI,eAAe;4BACf,oBAAoB,MAAM,iBAAiB;4BAC3C,IAAI,mBAAmB;gCACnB,OAAM,kBAAkB,MAAM,kBAAkB,MAAM,WAAW;;;sBAG3E,OAAO,GAAG;wBACR,KAAK,MAAM,qBAAqB;;;;;;gBAMxC,IAAI,OAAO;oBACP,IAAI,WAAW;oBACf,IAAI,aAAa,cAAc;wBAC3B,KAAK,MAAM,2BAA2B,eAAe,SACjD,WAAW,aAAa;wBAC5B,IAAI,eAAe,UAAU;4BACzB,KAAK,MAAM;;;;;gBAKvB;cACF,OAAO,IAAI;;;QAIjB,SAAS,UAAU,MAAM;YACrB,IAAI,eAAe,UAAU;YAC7B,IAAI,QAAQ,iBAAiB,QAAQ,cAAc,QAAQ,QAAQ,CAAC,GAAG;gBACnE,OAAO;;;YAGX,OAAO;;;QAGX,SAAS,YAAW,QAAQ,SAAS;;YAEjC,IAAI,CAAC,SAAS;gBACV;;;YAGJ,UAAU,iBAAiB;YAC3B,UAAU,IAAI,YAAY;YAC1B,UAAU,IAAI,cAAc;;;;;YAK5B,UAAU,IAAI,gBAAgB,OAAO,UAAU,gBAAgB;;;;YAI/D,IAAI,6BAA6B;gBAC7B,UAAU,WAAW;;;YAGzB,UAAU,KAAK,QAAQ;;;YAGvB,UAAU,IAAI,YAAY;;;;YAI1B,WAAW,IAAI,qCAAqC,UAAC,GAAG,UAAa;gBACjE,UAAU,IAAI,YAAY;;;;;YAK9B,OAAO,iBAAiB,YAAY;gBAChC,UAAU;gBACV;;;YAGJ,IAAI,OAAO;gBACP,KAAK,MAAM,iDAAiD,UAAU,cAAc,OAAO;;;;QAInG,SAAS,yBAAyB;YAC9B,OAAO,UAAU;;;QAGrB,SAAS,QAAQ;YACb,UAAU;;;;;;;QAOd,SAAS,SAAS;YACd,OAAO;;;;;;;QAOX,SAAS,iBAAiB;YACtB,OAAO,yBAAyB,WAAW,aACvC,UAAU;;;;;;QAMlB,SAAS,UAAU;YACf,OAAO;;;QAGX,SAAS,4BAA4B;YACjC,IAAI,QAAQ,gBAAgB;gBACxB,IAAI;;oBAEA,QAAQ,eAAe,QAAQ,gBAAgB;oBAC/C,IAAI,WAAW,QAAQ,eAAe,QAAQ,iBAAiB;wBAC3D,MAAM,IAAI,MAAM;;oBAEpB,QAAQ,eAAe,WAAW;kBACpC,OAAO,GAAG;oBACR,OAAO;;;YAGf,OAAO;;;KAGd","file":"ovpApp/analytics/analytics-service.js","sourcesContent":["/* globals window */\n(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.analyticsService', [\n        'ovpApp.config',\n        'ovpApp.analytics.state',\n        'ovpApp.legacy.httpUtil'\n    ])\n    .factory('analyticsStorage', function analyticsSessionStorage() {\n        let service = {\n            get,\n            set,\n            reset\n        };\n\n        let prefix = 'ven-';\n\n        function get(key) {\n            return window.sessionStorage.getItem(prefix + key);\n        }\n        function set(key, value) {\n            return window.sessionStorage.setItem(prefix + key, value);\n        }\n        function reset(key) {\n            return window.sessionStorage.removeItem(prefix + key);\n        }\n\n        return service;\n    })\n    .factory('analyticsService', analyticsService);\n\n    /* @ngInject */\n    function analyticsService(config, AnalyticsState, httpUtil, $log, $rootScope, $window, analyticsStorage) {\n\n        let analytics = require('analytics');\n        let queryPairs = httpUtil.getPairsFromQueryString();\n        let state = new AnalyticsState();\n        let debug = config.analytics.debug || queryPairs.analyticsDebug === 'true' || false;\n        let enabled = config.analytics.venona.enabled;\n        let endpoint = config.analytics.endpoint;\n\n        // ignored events\n        let ignored = {\n            initiating: [\n                'adStart',\n                'adStop',\n                'bufferingStart',\n                'bufferingStop',\n                'adBreakStart',\n                'adBreakStop'\n            ],\n            navigating: [\n                'adStart',\n                'adStop',\n                'adBreakStart',\n                'adBreakStop',\n                'bufferingStart',\n                'bufferingStop',\n                'playbackFailure',\n                'playbackStart',\n                'playbackPause',\n                'playbackUnpause'\n            ],\n            failed: [\n                'adStop',\n                'adBreakStop',\n                'bufferingStart',\n                'bufferingStop',\n                'playbackFailure',\n                'playbackStreamUriAcquired'\n            ],\n            playing: [\n                'playbackUnpause',\n                'playbackStart',\n                'bufferingStop'\n            ],\n            paused: [\n                'playbackPause'\n            ],\n            buffering: [\n                'bufferingStart'\n            ]\n        };\n\n        let service = {\n            initialize: (fields, options) => initialize(fields, options),\n            event: (name, data, deferredEvent) => event(name, data, deferredEvent),\n            setPlayerPosition: position => state.setElapsedMs(position),\n            analytics,\n            state,\n            getCurrentLibraryState,\n            flush,\n            getSDK,\n            getTriggeredBy,\n            isDebug\n        };\n\n        return service;\n\n        /////////////////////\n        function event(name, data, deferredEvent, extraData) {\n            try {\n\n                var currentState = null;\n                var deferredEventData;\n\n                if (debug && !isIgnored(name) && config.analytics.debugIgnored.indexOf(name) < 0) {\n                    $log.debug('Analytics: processing event: ' + name, data);\n                }\n\n                if (enabled) {\n                    // Don't process disabled events.\n                    try {\n                        let suppressThisEvent = (\n                            config &&\n                            config.analytics &&\n                            config.analytics.venona &&\n                            config.analytics.venona.events &&\n                            angular.isDefined(config.analytics.venona.events[name]) &&\n                            !config.analytics.venona.events[name]);\n\n                        if (suppressThisEvent) {\n                            if (debug) {\n                                $log.debug('Analytics: event suppressed', name, data);\n                            }\n                            return;\n                        }\n\n                        state.setPreviousEventName(name);\n\n                        // Only query the current library state if we're in debug mode.\n                        if (debug) {\n                            currentState = getCurrentLibraryState();\n                        }\n\n                        // send the event\n                        analytics[name](data, extraData || {});\n\n                        if (deferredEvent) {\n                            deferredEventData = state.getDeferredEvent(deferredEvent);\n                            if (deferredEventData) {\n                                event(deferredEventData.name, deferredEventData.data, undefined, {});\n                            }\n                        }\n                    } catch (e) {\n                        $log.error('Analytics Error: ', e);\n                    }\n                }\n\n                // Additional logging to clarify when and why the SDK's internal state changes,\n                // especially to a disabled state.\n                if (debug) {\n                    let newState = getCurrentLibraryState();\n                    if (newState !== currentState) {\n                        $log.debug('Analytics: SDK State: ' + currentState + ' -> ' +\n                            newState + ', event:' + name);\n                        if ('DISABLED' === newState) {\n                            $log.error('SDK disabled!');\n                        }\n                    }\n                }\n\n                return;\n            } catch (ex) {\n            }\n        }\n\n        function isIgnored(name) {\n            var currentState = analytics.getCurrentLibraryState();\n            if (ignored[currentState] && ignored[currentState].indexOf(name) > -1) {\n                return true;\n            }\n\n            return false;\n        }\n\n        function initialize(fields, options) {\n            // Don't run if venona disabled.\n            if (!enabled) {\n                return;\n            }\n\n            analytics.addIgnoredEvents(ignored);\n            analytics.set('endpoint', endpoint);\n            analytics.set('validation', false);\n\n            // SDK can suppress irrelevant fields when filterFields=true. This\n            // can be set in the config and overridden by Cyclops. Defaults to\n            // false to retain prior behavior.\n            analytics.set('filterFields', config.analytics.filterFields || false);\n\n            // Point analytics library to session storage so we can continue visits\n            // after a logout.\n            if (isSessionStorageSupported()) {\n                analytics.setStorage(analyticsStorage);\n            }\n\n            analytics.init(fields, options);\n\n            // Inform analytics library we are now online.\n            analytics.set('isOnline', true);\n\n            // Inform client analytics library when we're offline so it can store\n            // events until we return online.\n            $rootScope.$on('connectivityService:statusChanged', (e, isOnline) => {\n                analytics.set('isOnline', isOnline);\n            });\n\n            // Try to send any batched events on browser close or reload\n            // this might not always work, but it's the best option\n            window.onbeforeunload = function () {\n                analytics.flush();\n                return;\n            };\n\n            if (debug) {\n                $log.debug('Analytics: Initialization complete. visitId=' + analytics.getVisitId(), config.analytics);\n            }\n        }\n\n        function getCurrentLibraryState() {\n            return analytics.getCurrentLibraryState();\n        }\n\n        function flush() {\n            analytics.flush();\n        }\n\n        /**\n         * Expose the underlying analytics SDK.\n         * @return Analytics SDK instance.\n         */\n        function getSDK() {\n            return analytics;\n        }\n\n        /**\n         * Determine if the keyboard or a pointing device was most recently used.\n         * @return 'keyboard' if user last activated a control via keyboard, otherwise 'mouse'.\n         */\n        function getTriggeredBy() {\n            return 'focus-outline-none' === $rootScope.focusClass ?\n                'mouse' : 'keyboard';\n        }\n        /**\n         * Accessor for debug flag.\n         * @return True if debug flag is on, otherwise false.\n         */\n        function isDebug() {\n            return debug;\n        }\n\n        function isSessionStorageSupported() {\n            if ($window.sessionStorage) {\n                try {\n                    // Check for private mode (Safari - localStorage not supported in private mode)\n                    $window.sessionStorage.setItem('storageCheck', 'test');\n                    if ('test' !== $window.sessionStorage.getItem('storageCheck')) {\n                        throw new Error('sessionStorage not supported');\n                    }\n                    $window.sessionStorage.removeItem('storageCheck');\n                } catch (e) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}