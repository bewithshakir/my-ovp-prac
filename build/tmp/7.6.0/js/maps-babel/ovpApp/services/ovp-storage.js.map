{"version":3,"sources":["ovpApp/services/ovp-storage.js"],"names":[],"mappings":"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","file":"ovpApp/services/ovp-storage.js","sourcesContent":["/* globals md5 */\n(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.ovpStorage', [\n        'ovpApp.customerInfo.service'\n    ])\n    .constant('storageKeys', {\n        accessibilityEnabled: 'accessibilityEnabled',\n        appLink: 'appLink',\n        behindOwnModem: 'behindOwnModem',\n        ccSettings: 'ccSettings',\n        ccEnabled: 'ccEnabled',\n        channelsSortByType: 'channelsSortByType',\n        currentStb: 'currentStb',\n        currentUser: 'currentUser',\n        drmSessionKey: 'drmSessionKey',\n        guideFilter: 'guideFilter',\n        lastViewedChannelFilter: 'lastViewedChannelFilter',\n        loginRememberMe: 'loginRememberMe',\n        muted: 'muted',\n        parentalControlsAccepted: 'parentalControlsAccepted',\n        parentalControlsChannelEnabled: 'parentalControlsChannelEnabled',\n        parentalControlsDisabled: 'parentalControlsDisabled',\n        parentalControlsLocalPin: 'parentalControlsLocalPin',\n        parentalControlsUnlocked: 'parentalControlsUnlocked',\n        purchasePinDisabled: 'purchasePinDisabled',\n        purchasePinLocal: 'purchasePinLocal',\n        rdvrDisplayType: 'rdvrDisplayType',\n        recentHistory: 'recentHistory',\n        recentSearches: 'recentSearches',\n        recordingGridCategoryViewMode: 'recordingGridCategoryViewMode',\n        sapEnabled: 'sapEnabled',\n        scheduledListViewMode: 'scheduledListViewMode',\n        specuTermsAccepted: 'specuTermsAccepted',\n        vodMinorCategoryViewMode: 'vodMinorCategoryViewMode',\n        volumeLevel: 'volumeLevel',\n        vpnsAvailableTypes: 'vpnsAvailableTypes',\n        vpnsClientId: 'vpnsClientId',\n        vpnsRegistrationData: 'vpnsRegistrationData',\n        vpnsSessionId: 'vpnsSessionId',\n        deviceId: 'device_id',\n        env: 'env',\n        cdvr: 'cdvrEnv',\n        environmentTools: 'environmentTools',\n        environmentToolsMinimized: 'environmentToolsMinimized',\n        configOverride: 'configOverride',\n        figaroOverride: 'figaroOverride',\n        httpOverride: 'httpOverride',\n        bulkMDUOverrideEnabled: 'bulkMDUOverrideEnabled',\n        visualizerEnabled: 'visualizerEnabled',\n        onDemandScrollCachePosition: 'onDemandScrollCachePosition',\n        specUUserName: 'specu',\n        bulkMDUUserName: 'bulkMDU',\n        autoAuthSignOutTime: 'autoAuthSignOutTime',\n        ignoreMobileCheck: 'ignoreMobileCheck',\n        specUToBulkMDU: 'specUToBulkMDU'\n    })\n    .factory('ovpStorage', ovpStorage);\n\n    const storageLocation = {\n        USER: 'USER',\n        LOCAL: 'LOCAL',\n        SESSION: 'SESSION'\n    };\n\n    let storageConfig = {\n        accessibilityEnabled: {\n            keyName: 'accessibilityEnabled',\n            location: storageLocation.USER\n        },\n        appLink: {\n            keyName: 'appLink',\n            location: storageLocation.LOCAL\n        },\n        appVersion: {\n            keyName: 'appVersion',\n            location: storageLocation.SESSION\n        },\n        behindOwnModem: {\n            keyName: 'behindOwnModem',\n            location: storageLocation.SESSION\n        },\n        ccEnabled: {\n            keyName: 'ccEnabled',\n            location: storageLocation.USER\n        },\n        ccSettings: {\n            keyName: 'ccSettings',\n            location: storageLocation.USER\n        },\n        channelsSortByType: {\n            keyName: 'channelsSortbyType',\n            location: storageLocation.USER\n        },\n        currentStb: {\n            keyName: 'currentStb',\n            location: storageLocation.USER\n        },\n        currentUser: {\n            keyName: 'currentUser',\n            location: storageLocation.LOCAL\n        },\n        drmSessionKey: {\n            keyName: 'drmSession',\n            location: storageLocation.SESSION\n        },\n        guideFilter: {\n            keyName: 'guideFilter',\n            location: storageLocation.USER\n        },\n        lastViewedChannelFilter: {\n            keyName: 'lastViewedChannelFilter',\n            location: storageLocation.USER\n        },\n        loginRememberMe: {\n            keyName: 'loginRememberMe',\n            location: storageLocation.LOCAL\n        },\n        muted: {\n            keyName: 'muted',\n            location: storageLocation.USER\n        },\n        parentalControlsAccepted: {\n            keyName: 'parentalControlsAccepted',\n            location: storageLocation.USER\n        },\n        parentalControlsChannelEnabled: {\n            keyName: 'parentalControlsChannelEnabled',\n            location: storageLocation.USER\n        },\n        parentalControlsDisabled: {\n            keyName: 'parentalControlsDisabled',\n            location: storageLocation.USER\n        },\n        parentalControlsLocalPin: {\n            keyName: 'parentalControlsLocalPin',\n            location: storageLocation.USER\n        },\n        parentalControlsUnlocked: {\n            keyName: 'parentalControlsUnlocked',\n            location: storageLocation.SESSION\n        },\n        purchasePinDisabled: {\n            keyName: 'purchasePinDisabled',\n            location: storageLocation.USER\n        },\n        purchasePinLocal: {\n            keyName: 'purchasePinLocal',\n            location: storageLocation.USER\n        },\n        rdvrDisplayType: {\n            keyName: 'rdvrDisplayType',\n            location: storageLocation.USER\n        },\n        recentHistory: {\n            keyName: 'recentHistory',\n            location: storageLocation.USER\n        },\n        recentSearches: {\n            keyName: 'recentSearches',\n            location: storageLocation.USER\n        },\n        recordingGridCategoryViewMode: {\n            keyName: 'recordingGridCategoryViewMode',\n            location: storageLocation.USER\n        },\n        sapEnabled: {\n            keyName: 'sapEnabled',\n            location: storageLocation.USER\n        },\n        scheduledListViewMode: {\n            keyName: 'scheduledListViewMode',\n            location: storageLocation.USER\n        },\n        specuTermsAccepted: {\n            keyName: 'specuTermsAccepted',\n            location: storageLocation.USER\n        },\n        visualizerEnabled: {\n            keyName: 'visualizerEnabled',\n            location: storageLocation.SESSION\n        },\n        volumeLevel: {\n            keyName: 'volumeLevel',\n            location: storageLocation.USER\n        },\n        vpnsAvailableTypes: {\n            keyName: 'vpnsAvailableTypes',\n            location: storageLocation.LOCAL\n        },\n        vpnsClientId: {\n            keyName: 'vpnsClientId',\n            location: storageLocation.LOCAL\n        },\n        vpnsRegistrationData: {\n            keyName: 'vpnsRegistrationData',\n            location: storageLocation.LOCAL\n        },\n        vpnsSessionId: {\n            keyName: 'vpnsSessionId',\n            location: storageLocation.LOCAL\n        },\n        deviceId: {\n            keyName: 'deviceId',\n            location: storageLocation.LOCAL\n        },\n        env: {\n            keyName: 'env',\n            location: storageLocation.LOCAL\n        },\n        cdvrEnv: {\n            keyName: 'cdvr',\n            location: storageLocation.SESSION\n        },\n        environmentTools: {\n            keyName: 'environmentTools',\n            location: storageLocation.SESSION\n        },\n        environmentToolsMinimized: {\n            keyName: 'environmentTools-minimized',\n            location: storageLocation.SESSION\n        },\n        configOverride: {\n            keyName: 'configOverride',\n            location: storageLocation.SESSION\n        },\n        figaroOverride: {\n            keyName: 'figaroOverride',\n            location: storageLocation.SESSION\n        },\n        httpOverride: {\n            keyName: 'httpOverride',\n            location: storageLocation.SESSION\n        },\n        bulkMDUOverrideEnabled: {\n            keyName: 'bulkMDUOverrideEnabled',\n            location: storageLocation.SESSION\n        },\n        onDemandScrollCachePosition: {\n            keyName: 'onDemandScrollCachePosition',\n            location: storageLocation.SESSION\n        },\n        autoAuthSignOutTime: {\n            keyName: 'autoAuthSignOutTime',\n            location: storageLocation.LOCAL\n        },\n        ignoreMobileCheck: {\n            keyName: 'ignoreMobileCheck',\n            location: storageLocation.SESSION\n        }\n    };\n\n    let userName;\n\n\n    /* @ngInject */\n    function ovpStorage($window, $q, storageKeys, customerInfoService, $transitions) {\n        let localStorage, sessionStorage,\n            service = {\n                initUserStorage,\n                setItem,\n                getItem,\n                removeItem,\n                localStorage\n            };\n\n        /////////////////////\n\n        activate();\n\n        return service;\n\n        function activate() {\n            if (isLocalStorageSupported()) {\n                localStorage = $window.localStorage;\n            } else {\n                localStorage = new TemporaryStorage();\n            }\n\n            if (isSessionStorageSupported()) {\n                sessionStorage = $window.sessionStorage;\n            } else {\n                sessionStorage = new TemporaryStorage();\n            }\n\n            // Seed the user with what local storage says. If this is a new\n            // login, then the login process will call initUserStorage() to cause\n            // us to override this value with the now current user.\n            userName = getItem(storageKeys.currentUser);\n\n            $transitions.onStart({to: 'login'}, cleanUp);\n        }\n\n        function isSessionStorageSupported() {\n            if ($window.sessionStorage) {\n                try {\n                    // Check for private mode (Safari - sessionStorage not supported in private mode)\n                    $window.sessionStorage.setItem('storageCheck', 'test');\n                    $window.sessionStorage.removeItem('storageCheck');\n                } catch (e) {\n                    // Safari private mode\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        function isLocalStorageSupported() {\n            if ($window.localStorage) {\n                try {\n                    // Check for private mode (Safari - localStorage not supported in private mode)\n                    $window.localStorage.setItem('storageCheck', 'test');\n                    $window.localStorage.removeItem('storageCheck');\n                } catch (e) {\n                    // Safari private mode\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        function initUserStorage(bypassRefresh=false) {\n            return getUserName(bypassRefresh).then(name => {\n                setItem(storageKeys.currentUser, name);\n            });\n        }\n\n        function cleanUp() {\n            removeItem(storageKeys.currentUser);\n            removeItem(storageKeys.vpnsClientId);\n            userName = undefined;\n        }\n\n        function setItem(key, value, encrypt = null) {\n            let keyName;\n            let location;\n            let config = storageConfig[key];\n\n            if (config) {\n                location = config.location;\n                keyName = config.keyName;\n            } else {\n                // No pre-defined key. Assume local storage\n                location = storageLocation.LOCAL;\n                keyName = key;\n            }\n\n            if (encrypt && encrypt.key) {\n                keyName = md5(keyName);\n            }\n\n            if (encrypt && encrypt.value) {\n                value = md5(value);\n            }\n\n            if (location === storageLocation.LOCAL) {\n                localStorage.setItem(keyName, JSON.stringify(value));\n            } else if (location === storageLocation.SESSION) {\n                sessionStorage.setItem(keyName, JSON.stringify(value));\n            } else if (location === storageLocation.USER) {\n                let userObjKey = getUserObjectKey();\n                let userObj = getUserObject(userObjKey);\n                userObj[keyName] = value;\n                localStorage.setItem(userObjKey, JSON.stringify(userObj));\n            }\n        }\n\n        function getItem(key, encrypt) {\n            let keyName;\n            let location;\n            let config = storageConfig[key];\n\n            if (config) {\n                location = config.location;\n                keyName = config.keyName;\n            } else {\n                // No pre-defined key. Assume local storage\n                location = storageLocation.LOCAL;\n                keyName = key;\n            }\n\n            if (encrypt) {\n                keyName = md5(keyName);\n            }\n\n            try {\n                if (location === storageLocation.LOCAL) {\n                    return JSON.parse(localStorage.getItem(keyName));\n                } else if (location === storageLocation.SESSION) {\n                    return JSON.parse(sessionStorage.getItem(keyName));\n                } else if (location === storageLocation.USER) {\n                    let userObjKey = getUserObjectKey();\n                    let userObj = getUserObject(userObjKey);\n                    return userObj[keyName];\n                }\n            } catch (e) {\n                // Previous unformated value.\n                return undefined;\n            }\n        }\n\n        function removeItem(key) {\n            let keyName;\n            let location;\n            let config = storageConfig[key];\n\n            if (config) {\n                location = config.location;\n                keyName = config.keyName;\n            } else {\n                // No pre-defined key. Assume local storage\n                location = storageLocation.LOCAL;\n                keyName = key;\n            }\n\n            if (location === storageLocation.LOCAL) {\n                localStorage.removeItem(keyName);\n            } else if (location === storageLocation.SESSION) {\n                sessionStorage.removeItem(keyName);\n            } else if (location === storageLocation.USER) {\n                let userObjKey = getUserObjectKey();\n                let userObj = getUserObject(userObjKey);\n                delete userObj[keyName];\n                localStorage.setItem(userObjKey, JSON.stringify(userObj));\n            }\n        }\n\n        function getUserObjectKey() {\n            return 'user-' + userName;\n        }\n\n        function getUserObject(key) {\n            let userObj = getItem(key) || {};\n            return angular.copy(userObj, {});\n        }\n\n\n        function getUserName(bypassRefresh=false) {\n            // Cannot use profileService.isSpecU method because of circular dependency\n            if (getItem('oauth:token_account_type') === 'SPECU') {\n                userName = storageKeys.specUUserName;\n                return $q.resolve(userName);\n            } if (getItem('oauth:token_account_type') === 'BULK') {\n                userName = storageKeys.bulkMDUUserName;\n                return $q.resolve(userName);\n            } else {\n                return customerInfoService.getName(bypassRefresh).then(fullName => {\n                    userName = fullName.replace(/\\s/g, '_');\n                    return userName;\n                });\n            }\n        }\n    }\n\n    function TemporaryStorage() {\n        this.data = {};\n        this.getItem = function (key) {\n            return this.data[key];\n        };\n        this.setItem = function (key, value) {\n            this.data[key] = value;\n        };\n        this.removeItem = function (key) {\n            var val = this.data[key];\n            delete this.data[key];\n            return val;\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}