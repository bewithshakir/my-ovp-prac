{"version":3,"sources":["ovpApp/components/confirm/confirm.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,CAAC,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEjiB,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAJhH,CAAC,YAAY;IACT;;IAEA,QAAQ,OAAO,6BAA6B,CACxC,4BAEH,SAAS,uBAAuB;QAC7B,IAAI;QACJ,QAAQ;QACR,KAAK;QACL,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCP,UAAU,WAAW;QAClB,UAAU;YACN,SAAS;YACT,eAAe;;QAEnB,aAAa;QACb,YAAU,CAAA,YAAA;;;;YAEK,SAFG,QAEF,IAAI,MAAM,YAAY,qBAAqB,gBAAgB;gBAKnE,gBAAgB,MAPN;;gBAGV,QAAQ,OAAO,MAAM,EAAC,IAAA,IAAI,MAAA,MAAM,YAAA,YAAY,qBAAA,qBAAqB,gBAAA;;;YASrE,aAZc,SAAO,CAAA;gBAajB,KAAK;gBACL,OARM,SAAA,WAAC,SAAS;oBAChB,IAAI,QAAQ,SAAS;wBACjB,KAAK,UAAU;wBACf,KAAK,YAAY;wBACjB,KAAK,iBAAiB,KAAK;;wBAE3B,IAAM,UAAU,KAAK,QAAQ,WAAW;wBACxC,KAAK,eAAe,QAAQ;wBAC5B,KAAK,gBAAgB,QAAQ;wBAC7B,KAAK,YAAY,QAAQ;wBACzB,KAAK,kBAAkB,QAAQ;wBAC/B,KAAK,UAAU,QAAQ,WAAW,KAAK,oBAAoB;wBAC3D,KAAK,cAAc,QAAQ,eAAe,KAAK,oBAAoB;wBACnE,KAAK,WAAW,QAAQ;wBACxB,KAAK,eAAe,QAAQ;wBAC5B,KAAK,oBAAoB,QAAQ;wBACjC,KAAK,iBAAiB,QAAQ;;;eAWnC;gBACC,KAAK;gBACL,OATM,SAAA,aAAG;oBACT,KAAK,YAAY;;eAWlB;gBACC,KAAK;gBACL,OAVK,SAAA,YAAG;oBAWJ,IAAI,QAAQ;;oBAVhB,IAAI,KAAK,UAAU;wBACf,IAAM,UAAU,KAAK,GAAG,KAAK,KAAK;wBAClC,KAAK,eAAe,WAAW;wBAC/B,QAAQ,KACJ,YAAM;4BACF,MAAK,UAAU;4BACf,IAAI,CAAC,MAAK,WAAW;gCACjB,MAAK,cAAc,MAAM;gCACzB,IAAI,MAAK,eAAe;oCACpB,MAAK,WAAW,WAAW,iBAAiB,MAAK;;;2BAI7D,UAAA,OAAS;4BACL,MAAK,cAAc,QAAQ;4BAC3B,MAAK,KAAK,MAAM;4BAChB,IAAI,MAAK,gBAAgB;gCACrB,MAAK,WAAW,WAAW,iBAAiB,MAAK,eAAe;;;2BAGzE;wBACH,KAAK,cAAc,MAAM;;;eAa9B;gBACC,KAAK;gBACL,OAXS,SAAA,gBAAG;oBACZ,IAAI,KAAK,cAAc;wBACnB,KAAK;;oBAET,KAAK,cAAc,QAAQ;;;;YAe/B,OA3Ec;;;KAgErB","file":"ovpApp/components/confirm/confirm.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.components.confirm', [\n        'ajoslin.promise-tracker'\n    ])\n    .constant('CONFIRM_BUTTON_TYPE', {\n        OK: 'OK',\n        CANCEL: 'Cancel',\n        YES: 'Yes',\n        NO: 'No'\n    })\n    /*\n     * Confirmation popup that provides one or two buttons (OK and/or CANCEL).\n     *\n     * Single options parameter may have the following properties:\n     *\n     * options.okLabel - Optional. String to display on the ok button. Defaults to\n     * CONFIRM_BUTTON_TYPE.OK\n     *\n     * options.cancelLabel - Optional. String to display on the ok button. Defaults to\n     * CONFIRM_BUTTON_TYPE.CANCEL\n     *\n     * options.preOkMessage - Required. String to be displayed when the dialog pops.\n     *\n     * options.postOkMessage - Optional. String to be displayed for a\n     * configurable timeout (see options.confirmMessageDelayMs). The dialog\n     * automatically dismisses after the timeout.\n     *\n     * options.okAction - Optional. A function returning a promise that is\n     * executed when the OK button is pressed. If not set, the OK button simply\n     * dismisses the dialog.\n     *\n     * options.cancelAction - Optional. A function that is\n     * executed when the CANCEL button is pressed. If not set, the CANCEL button simply\n     * dismisses the dialog.\n     *\n     * options.inProgressMessage - Optional. String to be displayed while Ok action is in\n     * progress.\n     *\n     * options.getErrorString(error) - Optional. Function returning an error\n     * string to display if okAction resolves to an error. ConfirmPopup will log an\n     * error and then show an error with the string returned by this function\n     * and dismiss the dialog.\n     */\n    .component('confirm', {\n        bindings: {\n            resolve: '<',\n            modalInstance: '<'\n        },\n        templateUrl: '/js/ovpApp/components/confirm/confirm.html',\n        controller: class Confirm {\n            /* @ngInject */\n            constructor($q, $log, $rootScope, CONFIRM_BUTTON_TYPE, promiseTracker) {\n                angular.extend(this, {$q, $log, $rootScope, CONFIRM_BUTTON_TYPE, promiseTracker});\n            }\n\n            $onChanges(changes) {\n                if (changes.resolve) {\n                    this.success = false;\n                    this.destroyed = false;\n                    this.loadingTracker = this.promiseTracker();\n\n                    const options = this.resolve.options || {};\n                    this.preOkMessage = options.preOkMessage;\n                    this.postOkMessage = options.postOkMessage;\n                    this.ariaLabel = options.ariaLabel;\n                    this.ariaDescription = options.ariaDescription;\n                    this.okLabel = options.okLabel || this.CONFIRM_BUTTON_TYPE.OK;\n                    this.cancelLabel = options.cancelLabel || this.CONFIRM_BUTTON_TYPE.CANCEL;\n                    this.okAction = options.okAction;\n                    this.cancelAction = options.cancelAction;\n                    this.inProgressMessage = options.inProgressMessage;\n                    this.getErrorString = options.getErrorString;\n                }\n            }\n\n            $onDestroy() {\n                this.destroyed = true;\n            }\n\n            okHandler() {\n                if (this.okAction) {\n                    const promise = this.$q.when(this.okAction());\n                    this.loadingTracker.addPromise(promise);\n                    promise.then(\n                        () => {\n                            this.success = true;\n                            if (!this.destroyed) {\n                                this.modalInstance.close('success');\n                                if (this.postOkMessage) {\n                                    this.$rootScope.$broadcast('message:growl', this.postOkMessage);\n                                }\n                            }\n                        },\n                        error => {\n                            this.modalInstance.dismiss('error');\n                            this.$log.error(error);\n                            if (this.getErrorString) {\n                                this.$rootScope.$broadcast('message:growl', this.getErrorString(error));\n                            }\n                        });\n                } else {\n                    this.modalInstance.close('success');\n                }\n            }\n\n            cancelHandler() {\n                if (this.cancelAction) {\n                    this.cancelAction();\n                }\n                this.modalInstance.dismiss('cancel clicked');\n            }\n        }\n    });\n})();\n"],"sourceRoot":"/source/"}