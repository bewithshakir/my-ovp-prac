{"version":3,"sources":["ovpApp/interceptors/nnsParamsInterceptor.js"],"names":[],"mappings":"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","file":"ovpApp/interceptors/nnsParamsInterceptor.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.interceptors.nns', ['ovpApp.config'])\n        .config(nnsParamsInterceptor);\n\n    /**\n     * All calls to nationalnavigation with TVOD need certain query parameters\n     * specifying client capabilities.\n     *\n     * Since http interceptors in angular are done before services initialize,\n     * the config must be injected at runtime.\n     *\n     * @param $httpProvider\n     */\n\n    /* @ngInject */\n    function nnsParamsInterceptor($httpProvider) {\n        $httpProvider.interceptors.push(['$q', '$injector', '$log', function ($q, $injector) {\n            return {\n                request: function (config) {\n                    var profileService = $injector.get('profileService'),\n                        stbService = $injector.get('stbService'),\n                        locationService = $injector.get('locationService'),\n                        appConfig = $injector.get('config');\n\n                    if (!config.ignoreNNSParams && (config.url.indexOf(appConfig.nnsApi) > -1 ||\n                        config.url.indexOf(appConfig.vod.globalBookmarks) > -1 ||\n                        config.url.indexOf(appConfig.watchlist) > -1)) {\n\n                        return $q.all([profileService.isTVODRentEnabled(),\n                            profileService.isTVODWatchEnabled(),\n                            profileService.isCdvrEnabled(),\n                            stbService.getCurrentStbPromise(),\n                            profileService.getCapabilities(),\n                            locationService.getLocation(),\n                            profileService.isRdvrHidden()]).then(([tvodRentEnabled, tvodWatchEnabled, cdvrEnabled,\n                                                                 currentStb, capabilities, location, rdvrHidden]) => {\n                                config.params = config.params || {};\n\n                                angular.extend(config.params, {\n                                    tvodRent: tvodRentEnabled,\n                                    tvodWatch: tvodWatchEnabled\n                                });\n                                if (cdvrEnabled) {\n                                    angular.extend(config.params, {\n                                        cdvrEnabled: cdvrEnabled\n                                    });\n                                } else if (currentStb) {\n                                    angular.extend(config.params, {\n                                        flickable: currentStb.flickable,\n                                        dvr: currentStb.isDvr,\n                                        macaddress: currentStb.macAddressNormalized,\n                                        dvrManager: !rdvrHidden // whether RDVR view is available or not\n                                    });\n\n                                    if (currentStb.isDvr) {\n                                        angular.extend(config.params, {rdvrVersion: currentStb.rdvrVersion});\n                                    }\n\n                                    if (currentStb.tuneLinear) {\n                                        angular.extend(config.params, {tuneToChannel: true});\n                                    }\n                                }\n\n                                angular.extend(config.params, {\n                                    displayOutOfHomeOnly: !location.behindOwnModem,\n                                    deviceOutOfHome: !location.behindOwnModem\n                                });\n\n                                if (capabilities.watchondemand && capabilities.watchondemand.authorized) {\n                                    angular.extend(config.params, {watchOnDemand: true});\n                                }\n                                if (capabilities.tunetochannel && capabilities.tunetochannel.authorized) {\n                                    angular.extend(config.params, {tuneToChannel: true});\n                                }\n                                if (capabilities.watchlive && capabilities.watchlive.authorized) {\n                                    angular.extend(config.params, {watchLive: true});\n                                }\n\n                                return config;\n                            });\n                    } else {\n                        return $q.resolve(config);\n                    }\n                }\n            };\n        }]);\n    }\n}());\n"],"sourceRoot":"/source/"}