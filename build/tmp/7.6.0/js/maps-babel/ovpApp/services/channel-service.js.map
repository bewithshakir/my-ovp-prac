{"version":3,"sources":["ovpApp/services/channel-service.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;IAEA,QAAQ,OAAO,2BAA2B,CACtC,iBACA,+BACA,4BAEH,QAAQ,kBAAkB;;;IAG3B,SAAS,eAAe,QAAQ,QAAQ,IAAI;QACxC,IAAI,KAAK;;QAET,GAAG,WAAW;QACd,GAAG,kBAAkB;QACrB,GAAG,cAAc;QACjB,GAAG,uBAAuB;QAC1B,GAAG,oBAAoB;QACvB,GAAG,4BAA4B;QAC/B,GAAG,sBAAsB;;QAEzB,OAAO;;;;QAIP,SAAS,cAA6B;YAFlC,IAEiB,UAAO,UAAA,UAAA,KAAA,UAAA,OAAA,YAAG,QAAK,UAAA;;YAChC,IAAI,WAAW,CAAC,GAAG,iBAAiB;gBAChC,GAAG,kBAAkB,OAAO,IACxB,OAAO,iBAAiB,iCAAiC,2BACzD,EAAC,iBAAiB,QACjB,MAAM,GACN,IAAI,UAAA,QAAU;oBACX,IAAI,OAAO,MAAM;wBACb,GAAG,WAAW,OAAO,KAChB,IAAI,UAAA,SAAW;4BACZ,IAAI,QAAQ,UAAU;gCAClB,OAAO,QAAQ,SAAS,IAAI,UAAA,SAAW;oCACnC,QAAQ,UAAU;oCAClB,IAAI,QAAQ,kBAAkB;wCAC1B,QAAQ,mBAAmB,QAAQ,iBAC9B,IAAI,UAAA,UAAQ;4CANrB,OAMyB,SAAS;;;oCAElC,OAAO;;;2BAIlB,OAAO,UAAC,MAAM,UAAa;4BACxB,OAAO,KAAK,OAAO;2BACpB;;oBAEX,OAAO,GAAG;mBAEb,UAAU;gBACf,OAAO,GAAG;mBACP;gBACH,OAAO,GAAG;;;;QAIlB,SAAS,qBAAqB,YAAY;YACtC,IAAI,QAAQ,QAAQ,GAAG,WAAW;gBAC9B,aAAa,WAAW;gBACxB,IAAI,UAAU,GAAG,SAAS,KAAK,UAAA,SAAW;oBACtC,IAAI,QAAQ,kBAAkB;wBAC1B,OAAQ,QAAQ,iBAAiB,QAAQ,cAAc,CAAC;;;gBAGhE,OAAO,GAAG,QAAQ;mBACf;gBACH,OAAO,cAAc,KAAK,YAAA;oBANtB,OAM4B,qBAAqB;;;;;QAI7D,SAAS,kBAAkB,OAAO;YAC9B,IAAI,QAAQ,QAAQ,GAAG,WAAW;gBAC9B,OAAO,GAAG,QAAQ,GAAG,SAAS,KAAK,UAAA,SAAO;oBAJtC,OAI2C,QAAQ,cAAc,QAAQ,cAAc;;mBACxF;gBACH,OAAO,cAAc,KAAK,YAAA;oBAFtB,OAE4B,kBAAkB;;;;;QAI1D,SAAS,0BAA0B,eAAe;YAC9C,IAAI,QAAQ,QAAQ,GAAG,WAAW;gBAC9B,gBAAgB,SAAS;gBACzB,IAAI,UAAU,GAAG,SAAS,KAAK,UAAA,SAAW;oBACtC,OAAQ,QAAQ,YAAY,QAAQ,SAAS,QAAQ,kBAAkB;;gBAE3E,OAAO,GAAG,QAAQ;mBACf;gBACH,OAAO,cAAc,KAAK,YAAA;oBAAtB,OAA4B,0BAA0B;;;;;QAIlE,SAAS,oBAAoB,SAAS;YAClC,IAAI,QAAQ,QAAQ,GAAG,WAAW;gBAC9B,IAAI,WAAW;gBACf,IAAI,QAAQ,kBAAkB;oBAE1B,CAAC,YAAY;wBADb,IAAI,aAAa,QAAQ,iBAAiB;wBAC1C,WAAW,GAAG,SAAS,OAAO,UAAA,SAAW;4BACrC,IAAI,QAAQ,kBAAkB;gCAC1B,OAAQ,QAAQ,iBAAiB,QAAQ,cAAc,CAAC;;;;uBAG7D;oBACH,WAAW,GAAG,SAAS,OAAO,UAAA,SAAW;wBACrC,OAAQ,QAAQ,aAAa,QAAQ;;;gBAG7C,OAAO,GAAG,QAAQ;mBACf;gBACH,OAAO,cAAc,KAAK,YAAA;oBAItB,OAJ4B,oBAAoB;;;;;KAK/D","file":"ovpApp/services/channel-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.services.channel', [\n        'ovpApp.config',\n        'ovpApp.services.epgsService',\n        'ovpApp.services.rxUtils'\n    ])\n    .service('ChannelService', ChannelService);\n\n    /* @ngInject */\n    function ChannelService(config, rxhttp, $q) {\n        let vm = this;\n\n        vm.channels = null;\n        vm.channelsPromise = null;\n        vm.getChannels = getChannels;\n        vm.getChannelByProvider = getChannelByProvider;\n        vm.getChannelByTmsId = getChannelByTmsId;\n        vm.getChannelByChannelNumber = getChannelByChannelNumber;\n        vm.getChannelByNetwork = getChannelByNetwork;\n\n        return vm;\n\n        ////////////\n\n        function getChannels(refresh = false) {\n            if (refresh || !vm.channelsPromise) {\n                vm.channelsPromise = rxhttp.get(\n                    config.parentalControls.parentalControlsByChannelUrl() + '?includeUnentitled=true',\n                    {withCredentials: true})\n                    .retry(3)\n                    .map(result => {\n                        if (result.data) {\n                            vm.channels = result.data\n                                .map(network => {\n                                    if (network.services) {\n                                        return network.services.map(service => {\n                                            service.network = network;\n                                            if (service.productProviders) {\n                                                service.productProviders = service.productProviders\n                                                    .map(provider => provider.toUpperCase());\n                                            }\n                                            return service;\n                                        });\n                                    }\n                                })\n                                .reduce((memo, services) => {\n                                    return memo.concat(services);\n                                }, []);\n                        }\n                        return vm.channels;\n                    })\n                    .toPromise($q);\n                return vm.channelsPromise;\n            } else {\n                return vm.channelsPromise;\n            }\n        }\n\n        function getChannelByProvider(providerId) {\n            if (angular.isArray(vm.channels)) {\n                providerId = providerId.toUpperCase();\n                let channel = vm.channels.find(channel => {\n                    if (channel.productProviders) {\n                        return (channel.productProviders.indexOf(providerId) > -1);\n                    }\n                });\n                return $q.resolve(channel);\n            } else {\n                return getChannels().then(() => getChannelByProvider(providerId));\n            }\n        }\n\n        function getChannelByTmsId(tmsId) {\n            if (angular.isArray(vm.channels)) {\n                return $q.resolve(vm.channels.find(channel => (channel.tmsGuideId && channel.tmsGuideId == tmsId)));\n            } else {\n                return getChannels().then(() => getChannelByTmsId(tmsId));\n            }\n        }\n\n        function getChannelByChannelNumber(channelNumber) {\n            if (angular.isArray(vm.channels)) {\n                channelNumber = parseInt(channelNumber);\n                let channel = vm.channels.find(channel => {\n                    return (channel.channels && channel.channels.indexOf(channelNumber) >= 0);\n                });\n                return $q.resolve(channel);\n            } else {\n                return getChannels().then(() => getChannelByChannelNumber(channelNumber));\n            }\n        }\n\n        function getChannelByNetwork(network) {\n            if (angular.isArray(vm.channels)) {\n                let channels = [];\n                if (network.product_provider) {\n                    let providerId = network.product_provider.toUpperCase();\n                    channels = vm.channels.filter(channel => {\n                        if (channel.productProviders) {\n                            return (channel.productProviders.indexOf(providerId) > -1);\n                        }\n                    });\n                } else {\n                    channels = vm.channels.filter(channel => {\n                        return (channel.callsign === network.callsign);\n                    });\n                }\n                return $q.resolve(channels);\n            } else {\n                return getChannels().then(() => getChannelByNetwork(network));\n            }\n        }\n\n    }\n}());\n"],"sourceRoot":"/source/"}