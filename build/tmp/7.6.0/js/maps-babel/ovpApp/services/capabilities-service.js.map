{"version":3,"sources":["ovpApp/services/capabilities-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/capabilities-service.js","sourcesContent":["(() => {\n    'use strict';\n\n    angular.module('ovpApp.services.capabilitiesService', [\n        'ovpApp.config',\n\n        'ovpApp.services.ovpStorage'\n    ])\n    .constant('CAPABILITIES_ERROR_CODES', {\n            RDVR_DISABLED: 102,\n            STB_NONE: 103,\n            RDVR_NONE: 104,\n            STB_UNREACHABLE: 110,\n            RDVR_UNREACHABLE: 111,\n            UNKNOWN: 0xDEADBEEF\n        })\n    .constant('CAPABILITIES', {\n            ONDEMAND: 'watchondemand',\n            LIVE: 'watchlive',\n            TUNETOCHANNEL: 'tunetochannel',\n            GUIDE: 'viewguide',\n            RDVR: 'dvroperations',\n            CDVR: 'cdvr',\n            IPONLY: 'iponly',\n            TVOD: 'tvod',\n            ACCESSIBILITY: 'accessibility',\n            IPTVPACKAGE: 'iptvpackage',\n            SEARCH: 'search'\n        })\n    .constant('PROTECTED_STATE', {\n            LIVE: 'ovp.livetv',\n            GUIDE: 'ovp.guide',\n            ONDEMAND: 'ovp.ondemand',\n            RDVR: 'ovp.dvr'\n        })\n    .factory('CAPABILITIES_STATE_MAP', CAPABILITIES_STATE_MAP)\n    .factory('capabilitiesService', capabilitiesService);\n\n    /* @ngInject */\n    function CAPABILITIES_STATE_MAP(CAPABILITIES, PROTECTED_STATE) {\n        let map = {};\n        map[CAPABILITIES.LIVE] = PROTECTED_STATE.LIVE;\n        map[CAPABILITIES.ONDEMAND] = PROTECTED_STATE.ONDEMAND;\n        map[CAPABILITIES.GUIDE] = PROTECTED_STATE.GUIDE;\n        map[CAPABILITIES.RDVR] = PROTECTED_STATE.RDVR;\n        return map;\n    }\n\n    /* @ngInject */\n    function capabilitiesService($http, $q, config, $log, ovpStorage, $cacheFactory, $interval,\n                                 CAPABILITIES_STATE_MAP, CAPABILITIES, CAPABILITIES_ERROR_CODES,\n                                 AccessibilityService, $rootScope, $timeout) {\n        let capabilitiesUrl = config.capabilitiesUrl(),\n            capabilitiesCacheTimeoutMs = parseInt(config.capabilitiesCacheTimeoutInMinutes) * 60 * 1000,\n            capabilitiesRefreshOnFailureMs = parseInt(config.capabilitiesRefreshOnFailureInMinutes) * 60 * 1000,\n            capabilitiesFailureRetryCount = parseInt(config.capabilitiesFailureRetryCount),\n            cacheTimer = null,\n            cacheData = null,\n            capabilitiesPromise = null,\n            capabilitiesRequestRetryTimer = null,\n            capabilitiesRequestRetryCount = 0;\n\n        let service = {\n            hasCapability,\n            refreshCapabilities,\n            getCode,\n            isHidden,\n            getCapabilities,\n            isCached\n        };\n\n        startCapabilitiesCacheTimer();\n\n        return service;\n\n        ///////////////////\n\n        function refreshCapabilities(bypassRefresh=false) {\n            // Reset promis\n            capabilitiesPromise = null;\n            return getCapabilities({bypassRefresh: bypassRefresh});\n        }\n\n\n        function clearCapabilitiesCacheTimer() {\n            if (cacheTimer) {\n                $interval.cancel(cacheTimer);\n            }\n        }\n\n        function isCached() {\n            return (cacheData !== null);\n        }\n\n        function startCapabilitiesCacheTimer() {\n            clearCapabilitiesCacheTimer(); // Clear previous timer if any\n            cacheTimer = $interval(refreshCapabilities, capabilitiesCacheTimeoutMs);\n        }\n\n        function getCapabilities(options) {\n            // Return cached value if available\n            if (capabilitiesPromise) {\n                return capabilitiesPromise;\n            }\n\n            // Reset retry timer\n            if (capabilitiesRequestRetryTimer) {\n                $timeout.cancel(capabilitiesRequestRetryTimer);\n            }\n\n            capabilitiesPromise = $http({\n                method: 'GET',\n                url: capabilitiesUrl,\n                bypassRefresh: (options && options.bypassRefresh) || false,\n                withCredentials: true\n            }).then((data) => {\n                capabilitiesRequestRetryCount = 0; // Reset counter\n                // Initialize storage first as other stuff depends on it\n                return ovpStorage.initUserStorage(true).then(() => {\n                    $rootScope.$broadcast('Session:setCapabilities', data.data);\n                    cacheData = data.data;\n                    return data.data;\n                });\n            }).catch((e) => {\n                capabilitiesRequestRetryCount++;\n                // Retry only when you have cached data\n                if (cacheData && capabilitiesRequestRetryCount < capabilitiesFailureRetryCount) {\n                    //Need to invoke the refreshCapabilties again since the refresh call failed.\n                    let retryMs = (capabilitiesRequestRetryCount * capabilitiesRefreshOnFailureMs);\n                    $log.info('Retrying capabilities request in ' + retryMs + ' Ms ...');\n                    // Retry in background, Otherwise user will not be able to navigate to other page\n                    $timeout(refreshCapabilities, retryMs);\n                } else if (cacheData) {\n                    capabilitiesRequestRetryCount = 0; // Reset counter\n                    capabilitiesPromise = null; // Reset promise for next capability check\n                }\n\n                $log.error(e);\n\n                if (cacheData) {\n                    return cacheData;\n                } else {\n                    return $q.reject({errorCode: (e.errorCode || 'WUC-1002')});\n                }\n            });\n\n            return capabilitiesPromise;\n        }\n\n        /**\n         * Determines if the capability is valid.\n         * @param capabilityId {String} - The capability to check\n         * @returns {$q.defer.promise} - The promise to resolve\n         */\n        function hasCapability(capabilityId) {\n            return getCapability(capabilityId);\n\n        }\n\n        /**\n         * Determines if the capablity is enabled or disabled.\n         *\n         * @param capabilityId {String} - The capability to check\n         * @returns {null|$q.defer.promise} - The promise to resolve\n         */\n        function getCapability(capabilityId) {\n            return getCapabilities().then((capabilities) => {\n                let capability = capabilities[capabilityId];\n                return capability ? capability.authorized : false;\n            });\n        }\n\n        /**\n         * Gets the error code associated with the capability\n         *\n         * @param capabilityId (String) - The capability to check\n         * @returns {null|$q.defer.promise} - The promise to resolve\n         */\n        function getCode(capabilityId) {\n            return getCapabilities().then((capabilities) => {\n                let capability = capabilities[capabilityId];\n                return capability ? capability.code : null;\n            });\n        }\n\n        /**\n         * Gets the hide flag associated with the capability\n         *\n         * @param capabilityId (String) - The capability to check\n         * @returns {null|$q.defer.promise} - The promise to resolve\n         */\n        function isHidden(capabilityId) {\n            return getCapabilities().then((capabilities) => {\n                let capability = capabilities[capabilityId];\n                return capability ? capability.hide : null;\n            });\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}