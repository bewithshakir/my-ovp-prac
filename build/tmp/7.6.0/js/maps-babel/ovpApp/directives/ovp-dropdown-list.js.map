{"version":3,"sources":["ovpApp/directives/ovp-dropdown-list.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;IAEA,QACK,OAAO,kCAAkC,CACtC,8BACA,8BAEH,UAAU,mBAAmB;;;IAGlC,SAAS,kBAAkB;;;;;;;;;;;;;;;QAcvB,OAAO;YACH,kBAAkB;YAClB,aAAa;YACb,YAAY;YACZ,cAAc;YACd,MAAM;YACN,UAAU;YACV,OAAO;gBACH,SAAS;gBACT,UAAU;;;;QAIlB,SAAS,KAAK,QAAQ;YAClB,OAAO,GAAG,cAAc,OAAO,GAAG,OAAO,eAAe;;;;QAI5D,SAAS,WAAW,QAAQ,UAAU,WAAW,UAAU;YACvD,IAAI,KAAK;YACT,GAAG,WAAW;YACd,GAAG,SAAS,GAAG,UAAU;YACzB,GAAG,QAAQ,GAAG,SAAS;YACvB,GAAG,OAAO,cAAc,GAAG,OAAO,cAAc,GAAG,OAAO,cAAc;YACxE,GAAG,gBAAgB;YACnB,GAAG,QAAQ;YACX,GAAG,kBAAkB;YACrB,GAAG,wBAAwB;YAC3B,GAAG,iBAAiB;YACpB,GAAG,eAAe;YAClB,GAAG,YAAY;YACf,GAAG,UAAU;YACb,GAAG,iBAAiB;;YAEpB;;;;YAIA,SAAS,WAAW;;YAIpB,SAAS,gBAAgB,OAAO;gBAC5B,IAAI,MAAM,YAAY,MAAM,MAAM,YAAY,IAAI;oBAC9C,MAAM;oBACN,MAAM;oBACN,QAAQ,QAAQ,SAAS,IAAI,KAAK,aAAa,GAAG;uBAC/C,IAAI,MAAM,YAAY,GAAG;oBAC5B,GAAG,eAAe;;;;YAI1B,SAAS,sBAAsB,OAAO;gBAClC,IAAI,MAAM,YAAY,GAAG;;oBACrB,GAAG,eAAe;;;;;YAK1B,SAAS,UAAU,OAAO;gBACtB,IAAI,MAAM,YAAY,MAAM,GAAG,cAAc;;oBACzC,MAAM;oBACN,MAAM;;;;YAId,SAAS,QAAQ,OAAO;gBACpB,IAAI,MAAM,YAAY,MAAM,GAAG,cAAc;;oBACzC,GAAG,eAAe;oBAClB,GAAG,cAAc;oBACjB,MAAM;oBACN,MAAM;;;;;YAKd,SAAS,iBAAiB;;;;;gBAKtB,SAAS,YAAM;oBACX,IAAI,gBAAgB,QAAQ,QAAQ,UAAU,GAAG;oBACjD,IAAI,CAAC,cAAc,SAAS;oBACxB,CAAC,cAAc,SAAS,gCAAgC;;wBACxD,GAAG,eAAe;;mBAEvB;;;YAGP,SAAS,WAAW;gBAChB,IAAI,aAAa;gBACjB,IAAI,GAAG,OAAO,OAAO;oBACjB,IAAI,QAAQ,WAAW,GAAG,OAAO,QAAQ;wBACrC,OAAO,GAAG,OAAO,MAAM;2BACpB;wBACH,OAAO,GAAG,OAAO;;uBAElB;oBACH,OAAQ,eAAe,WAAW,QAAQ,WAAW,UAAU;;;;YAIvE,SAAS,gBAAgB;gBACrB,OAAO,GAAG,MAAM,GAAG,OAAO;;;YAG9B,SAAS,MAAM,OAAO;gBAClB,IAAI,UAAU,GAAG,OAAO,aAAa;oBACjC,GAAG,OAAO,cAAc;;;gBAG5B,IAAI,GAAG,OAAO,UAAU;oBACpB,GAAG,OAAO,SAAS,GAAG,MAAM;uBACzB,IAAI,GAAG,MAAM,OAAO,eAAe;oBACtC,GAAG,MAAM,OAAO;;;;YAIxB,SAAS,eAAe,OAAO;;gBAE3B,IAAI,GAAG,MAAM,SAAS,GAAG;oBACrB,GAAG,eAAe,CAAC,GAAG;;;;;gBAK1B,IAAI,MAAM,SAAS,SAAS;oBACxB,MAAM,OAAO;;;;;KAK5B","file":"ovpApp/directives/ovp-dropdown-list.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.directives.dropdownList', [\n            'ovpApp.directives.arrowNav',\n            'ovpApp.directives.keydown'\n        ])\n        .directive('ovpDropdownList', ovpDropdownList);\n\n    /* @ngInject */\n    function ovpDropdownList() {\n        // Usage:\n        // <ovp-dropdown items=\"someArray\" config=\"configObj\"></ovp-dropdown>\n        //\n        // someArray = [{\n        //    text: \"this will display on a row of the dropdown\"\n        // }]\n        //\n        // config = {\n        //    title: (string or function) specifies what to display on the dropdown button itself. If a function\n        //        the function will be called with whatever the currently selected item is as a parameter.\n        //    activeIndex: (number) The index of the item that should be selected.\n        //    onSelect: () => console.log(\"I've been clicked!\")\n        // }\n        return {\n            bindToController: true,\n            templateUrl: '/js/ovpApp/directives/ovp-dropdown-list.html',\n            controller: Controller,\n            controllerAs: 'vm',\n            link: link,\n            restrict: 'EA',\n            scope: {\n                'items': '=',\n                'config': '='\n            }\n        };\n\n        function link($scope) {\n            $scope.vm.focusButton = $scope.vm.config.focusOnLoad || false;\n        }\n\n        /* @ngInject */\n        function Controller($scope, $element, $document, $timeout) {\n            let vm = this;\n            vm.getTitle = getTitle;\n            vm.config = vm.config || {};\n            vm.items = vm.items || [];\n            vm.config.activeIndex = vm.config.activeIndex ? vm.config.activeIndex : 0;\n            vm.getActiveItem = getActiveItem;\n            vm.click = click;\n            vm.onButtonKeydown = onButtonKeydown;\n            vm.onDropdownListKeydown = onDropdownListKeydown;\n            vm.onListItemBlur = onListItemBlur;\n            vm.onButtonBlur = onListItemBlur;\n            vm.onKeydown = onKeydown;\n            vm.onKeyup = onKeyup;\n            vm.toggleDropdown = toggleDropdown;\n\n            activate();\n\n            ///////////////////\n\n            function activate() {\n\n            }\n\n            function onButtonKeydown(event) {\n                if (event.keyCode === 40 || event.keyCode === 39) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    angular.element($element[0]).find('.listitem')[0].focus();\n                } else if (event.keyCode === 9) {\n                    vm.showDropdown = false;\n                }\n            }\n\n            function onDropdownListKeydown(event) {\n                if (event.keyCode === 9) { // Tab key\n                    vm.showDropdown = false;\n                }\n            }\n\n            // Escape key handler - START\n            function onKeydown(event) {\n                if (event.keyCode === 27 && vm.showDropdown) { // Escape key\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n\n            function onKeyup(event) {\n                if (event.keyCode === 27 && vm.showDropdown) { // Escape key\n                    vm.showDropdown = false;\n                    vm.focusButton = true;\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n            // Escape key handler - END\n\n            function onListItemBlur() {\n                // Focus is not on a list item\n                // Note: we can not check for event.relatedTarget because of\n                // known IE issue - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/101237/\n                // Wait for element to focus and then get the active element\n                $timeout(() => {\n                    let activeElement = angular.element($document[0].activeElement);\n                    if (!activeElement.hasClass('listitem') && // click somewhere else\n                        !activeElement.hasClass('ovp-dropdown-list-container')) { // click on scrollbar\n                        vm.showDropdown = false;\n                    }\n                }, 0);\n            }\n\n            function getTitle() {\n                let activeItem = getActiveItem();\n                if (vm.config.title) {\n                    if (angular.isFunction(vm.config.title)) {\n                        return vm.config.title(activeItem);\n                    } else {\n                        return vm.config.title;\n                    }\n                } else {\n                    return (activeItem && (activeItem.text || activeItem.label) || '');\n                }\n            }\n\n            function getActiveItem() {\n                return vm.items[vm.config.activeIndex];\n            }\n\n            function click(index) {\n                if (index !== vm.config.activeIndex) {\n                    vm.config.activeIndex = index;\n                }\n\n                if (vm.config.onSelect) {\n                    vm.config.onSelect(vm.items[index]);\n                } else if (vm.items[index].clickCallback) {\n                    vm.items[index].clickCallback();\n                }\n            }\n\n            function toggleDropdown(event) {\n                // Toggle allowed only if there are multiple items to select\n                if (vm.items.length > 1) {\n                    vm.showDropdown = !vm.showDropdown;\n                }\n                // Button does NOT focus on click (known issue safari and FF on mac)\n                // https://gist.github.com/cvrebert/68659d0333a578d75372\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus\n                if (event.type === 'click') {\n                    event.target.focus();\n                }\n            }\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}