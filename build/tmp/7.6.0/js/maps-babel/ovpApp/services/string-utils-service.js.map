{"version":3,"sources":["ovpApp/services/string-utils-service.js"],"names":[],"mappings":"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","file":"ovpApp/services/string-utils-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.legacy.stringUtil', [])\n        .factory('stringUtil', LegacyStringUtil);\n\n    /* ngInject */\n    function LegacyStringUtil() {\n        var keystr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n            service = {\n                guid,\n                fromBase64: base64decode,\n                toBase64: base64encode,\n                addParameterToUri: addParameterToUri,\n                extractSingleValueParametersAsObject: extractSingleValueParametersAsObject,\n                capitalizeFirstLetter: capitalizeFirstLetter,\n                formatPageTitle: formatPageTitle\n            };\n\n        return service;\n\n        /**\n         * Produce a randomly-generated GUID in the format:\n         * 8-4-4-4-12\n         * Example: 123e4567-e89b-12d3-a456-426655440000\n         * @see http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n         * @return {string} GUID\n         */\n        /* jscs:disable */\n        function guid() {\n            // Embedded '4' marks this as a 'version 4' (aka randomly-generated) GUID.\n            /*jslint bitwise: true */\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n                return v.toString(16);\n            });\n            /*jslint bitwise: false */\n        }\n        /* jscs:enable */\n\n        function base64encode(input) {\n            var output = '',\n                chr1, chr2, chr3, enc1, enc2, enc3, enc4,\n                i = 0;\n            input = utf8Encode(input);\n\n            while (i < input.length) {\n\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                /* jshint ignore:start */\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n                /* jshint ignore:end */\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n                output = output +\n                keystr.charAt(enc1) + keystr.charAt(enc2) +\n                keystr.charAt(enc3) + keystr.charAt(enc4);\n            }\n            return output;\n        }\n\n        function base64decode(input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n\n                enc1 = keystr.indexOf(input.charAt(i++));\n                enc2 = keystr.indexOf(input.charAt(i++));\n                enc3 = keystr.indexOf(input.charAt(i++));\n                enc4 = keystr.indexOf(input.charAt(i++));\n\n                /* jshint ignore:start */\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n                /* jshint ignore:end */\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 != 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 != 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n            }\n\n            output = utf8Decode(output);\n\n            return output;\n\n        }\n\n        function utf8Encode(string) {\n            string = string.replace(/\\r\\n/g, '\\n');\n            var utftext = '',\n                c, n;\n\n            for (n = 0; n < string.length; n++) {\n\n                c = string.charCodeAt(n);\n\n                if (c < 128) {\n                    utftext += String.fromCharCode(c);\n                } else if ((c > 127) && (c < 2048)) {\n                    utftext += String.fromCharCode((c >> 6) | 192);//jshint ignore:line\n                    utftext += String.fromCharCode((c & 63) | 128);//jshint ignore:line\n                } else {\n                    utftext += String.fromCharCode((c >> 12) | 224);//jshint ignore:line\n                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);//jshint ignore:line\n                    utftext += String.fromCharCode((c & 63) | 128);//jshint ignore:line\n                }\n\n            }\n\n            return utftext;\n        }\n\n        function utf8Decode(utftext) {\n            var string = '',\n                i = 0,\n                c = 0,\n                c2 = 0,\n                c3;\n\n            while (i < utftext.length) {\n                c = utftext.charCodeAt(i);\n                if (c < 128) {\n                    string += String.fromCharCode(c);\n                    i++;\n                } else if ((c > 191) && (c < 224)) {\n                    c2 = utftext.charCodeAt(i + 1);\n                    /* jshint ignore:start */\n                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                    /* jshint ignore:end */\n                    i += 2;\n                } else {\n                    c2 = utftext.charCodeAt(i + 1);\n                    c3 = utftext.charCodeAt(i + 2);\n                    /* jshint ignore:start */\n                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                    /* jshint ignore:end */\n                    i += 3;\n                }\n            }\n            return string;\n        }\n\n        function addParameterToUri(uri, parameter, value) {\n\n            // Do nothing if any value is missing.\n            if (!uri || !parameter || !value) {\n                return uri;\n            }\n\n            if (uri.indexOf('?') < 0) {\n                // No parameters in URI yet. This would be the first.\n                return uri + '?' + parameter + '=' + encodeURI(value);\n            }\n\n            // URI has parameters.\n            return uri + '&' + parameter + '=' + encodeURI(value);\n        }\n\n        /**\n         * Extract single value query parameters and values from a URI.\n         * Based on logic from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n         *\n         * Example: Given URI of http://watch.spectrumtv.net/?a=one&b=two, this will return\n         * an object like: {a: 'one', b: 'two'}\n         *\n         * @param uri The URI containing query parameters to parse out.\n         *\n         * @return An object containing the query parameters and their values. This will never be null.\n         */\n        function extractSingleValueParametersAsObject(uri) {\n\n            let urlParams = {};\n\n            try {\n\n                // If no URI, return empty object result.\n                if (!uri) {\n                    return urlParams;\n                }\n\n                let queryString;\n\n                let queryIdx = uri.indexOf('?');\n                if (queryIdx < 0) {\n                    // No query string, so return default empty object.\n                    return urlParams;\n                } else if (queryIdx === 0) {\n                    // The given uri is a query string, beginning with \"?\".\n                    queryString = uri;\n                } else {\n                    // Common case: URI with a query string, like \"http://watch.spectrumtv.net/?a=one&b=two\"\n                    queryString = '?' + uri.split('?')[1];\n                }\n\n                // Use regex to split out the query parameters.\n                let match,\n                    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                    search = /([^&=]+)=?([^&]*)/g,\n                    decode = function (s) {\n                        return decodeURIComponent(s.replace(pl, ' '));\n                    },\n                    query  = queryString.substring(1);\n\n                // Build up the result object with matching query parameters and their values.\n                match = search.exec(query);\n                while (match) {\n                    urlParams[decode(match[1])] = decode(match[2]);\n                    match = search.exec(query);\n                }\n            }\n            catch (ex) {\n                // console.error(ex);\n            }\n            return urlParams;\n        }\n\n        function formatPageTitle(str) {\n            str = str.replace('_', ' ');\n            str = capitalizeFirstLetter(str);\n            str = str.replace('Tv', 'TV');\n            return str;\n        }\n\n        function capitalizeFirstLetter(string) {\n            var str = '';\n            var words = string.split(' ');\n            words.forEach(word => {\n                str += word.charAt(0).toUpperCase() + word.slice(1) + ' ';\n            });\n            return str;\n        }\n    }\n\n}());\n"],"sourceRoot":"/source/"}