{"version":3,"sources":["ovpApp/components/vast/vastParser.js"],"names":[],"mappings":"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","file":"ovpApp/components/vast/vastParser.js","sourcesContent":["/* globals $ */\n/**\n * Created by sachin.kota on 1/15/16.\n */\n(function () {\n    'use strict';\n    angular.module('ovpApp.components.vast', ['ovpApp.legacy.stringUtil', 'ovpApp.legacy.httpUtil'])\n\n        .constant('VAST_EVENT_MAP', {\n            'adStartTracking': 'impression',\n            'adEndTracking': 'complete',\n            'adFirstQuartileTracking': 'firstQuartile',\n            'adMidPointTracking': 'midpoint',\n            'adThirdQuartileTracking': 'thirdQuartile',\n            'ad-started': 'ad-started',\n            'ad-stopped': 'ad-stopped'\n        })\n        .service('VastParser', VastParser)\n        .service('LegacyAdParser', LegacyAdParser);\n\n    /* @ngInject */\n    function VastParser(stringUtil, httpUtil, VAST_EVENT_MAP) {\n        return {\n            parseAdBreaks,\n            parseAdEvent,\n            macroMapper,\n            getTrackingUrls\n        };\n\n        function getVastAd(base64Ad, startTime, index) {\n            var adData = stringUtil.fromBase64(base64Ad),\n                AdXml = $.parseXML(adData),\n                vastAds = AdXml.getElementsByTagName('Ad'),\n                id = '',\n                adSystem = '',\n                adTitle = '',\n                errorTrackUrls = [],\n                impressionUrls = [],\n                linear = new Linear();\n\n            if (vastAds.length !== 0) {\n                angular.forEach(vastAds, function (adEle) {\n                    if (adEle.getElementsByTagName('InLine').length !== 0) {\n                        id = adEle.getAttribute('id');\n                        let adSystemEle = adEle.getElementsByTagName('AdSystem');\n                        if (adSystemEle.length !== 0) {\n                            adSystem = adSystemEle[0].textContent;\n                        }\n                        let adTitleEle = adEle.getElementsByTagName('AdTitle');\n                        if (adTitleEle.length !== 0) {\n                            adTitle = adTitleEle[0].textContent;\n                        }\n                        let durationEle = adEle.getElementsByTagName('Duration');\n                        if (durationEle.length !== 0) {\n                            linear.duration = hmsToSecondsOnly(durationEle[0].textContent);\n                        }\n\n                    }\n                    let errorElements =  adEle.getElementsByTagName('Error');\n                    errorTrackUrls = pushErrorUrls(errorElements, errorTrackUrls);\n                    let impressionElements = adEle.getElementsByTagName('Impression');\n                    impressionUrls = pushImpressionUrls(impressionElements, impressionUrls);\n                    let trackingEventElements = adEle.getElementsByTagName('TrackingEvents');\n                    if (trackingEventElements.length !== 0) {\n                        $.each(trackingEventElements, function (index,trackingEle) {\n                            linear.trackingEvents = getTrackEvents(trackingEle, false, linear.trackingEvents);\n\n                        });\n                    }\n                });\n            }\n\n            return new VastAd(index, startTime, id, adTitle, adSystem, errorTrackUrls, impressionUrls, linear);\n        }\n\n\n\n        function parseAdBreaks(AdBreaks, streamInfo) {\n            var _adBreaks = [];\n            var breakIndex = 0;\n            var adIndex = 0;\n            var currentAdBreak = null;\n            var currentAd = null;\n            angular.forEach(AdBreaks, function (tag) {\n                if (tag.name !== null) {\n                    if (tag.name == '#EXT-X-AD-BREAK-START') {\n                        if (currentAdBreak !== null) {\n                            let last = [...currentAdBreak.adArray].pop();\n                            if (last && last.endTime) {\n                                currentAdBreak.endTime = last.endTime;\n                                currentAdBreak.duration = currentAdBreak.endTime - currentAdBreak.startTime;\n                                adIndex = 0;\n                            }\n                            currentAdBreak = null;\n                        }\n                        currentAdBreak = new AdBreak(++breakIndex, tag.time);\n                        _adBreaks.push(currentAdBreak);\n                        if (currentAd) {\n                            currentAdBreak.adArray.push(currentAd);\n                        }\n                    } else if (tag.name == '#EXT-X-AD-START') {\n                        if (currentAd) { //Close previous ad if it is still open\n                            currentAd.endTime = tag.time;\n                            currentAd.duration = tag.time -\n                                currentAd.startTime;\n                        }\n                        currentAd = getVastAd(tag.content, tag.time, ++adIndex);\n                        currentAd.streamInfo = streamInfo;\n                        if (currentAdBreak) { //Allow a delayed insert if this is out of order\n                            currentAdBreak.adArray.push(currentAd);\n                        }\n                    } else if (tag.name == '#EXT-X-AD-END' && currentAd) {\n                        currentAd.endTime = tag.time;\n                        currentAd.duration = tag.time -\n                            currentAd.startTime;\n                        currentAd = null;\n                    } else if (tag.name == '#EXT-X-AD-BREAK-END') {\n                        if (currentAdBreak) {\n                            currentAdBreak.endTime = tag.time;\n                            currentAdBreak.duration = currentAdBreak.endTime - currentAdBreak.startTime;\n                            adIndex = 0;\n                        }\n\n                        if (currentAd) { //Make sure this gets closed\n                            currentAd.endTime = tag.time;\n                            currentAd.duration = tag.time -\n                                currentAd.startTime;\n                            currentAd = null;\n                        }\n                        currentAdBreak = null;\n                    }\n                }\n            });\n            //Only return adBreaks that have content.\n            return _adBreaks.filter((adBreak) => (adBreak && adBreak.adArray && adBreak.adArray.length > 0));\n\n        }\n\n        function parseAdEvent(AdEvent, streamInfo) {\n            if (AdEvent.name == '#EXT-X-AD-START') {\n                let currentAd = getVastAd(AdEvent.content, AdEvent.time, null);\n                currentAd.streamInfo = streamInfo;\n                return currentAd;\n            }\n        }\n\n        function pushErrorUrls(errorElements,errorTrackUrls) {\n            for (let j = 0; j < errorElements.length; j++) {\n                errorTrackUrls.push(errorElements[j].textContent.replace(/\\s/g, ''));\n\n            }\n            return errorTrackUrls;\n        }\n\n        function pushImpressionUrls(impressionElements,impressionUrls) {\n            for (let j = 0; j < impressionElements.length; j++) {\n                impressionUrls.push(impressionElements[j].textContent.replace(/\\s/g, ''));\n\n            }\n            return impressionUrls;\n        }\n\n\n\n        function getTrackEvents(trackingElement,isAdBreak,trackingEvents) {\n            if (isAdBreak && trackingElement.parentNode.tagName !== 'vmap:AdBreak')  {\n                return null;\n            }\n\n            let trackingeventsEle = trackingElement.getElementsByTagName('Tracking');\n            for (let i = 0; i < trackingeventsEle.length; i++) {\n                let e = trackingeventsEle.item(i).getAttribute('event');\n                let url = trackingeventsEle[i].textContent.replace(/\\s/g, '');\n                let tempTrack = new TrackingEvent(e, url);\n                trackingEvents.push(tempTrack);\n            }\n            return trackingEvents;\n        }\n\n        function VastAd(index, startTime, id, adTitle, adSystem, errorTrackUrls, impressionUrls, linear) {\n            this.index = index || null;\n            this.startTime = startTime || null;\n            this.id = id || null;\n            this.adSystem = adSystem || null;\n            this.adTitle = adTitle || null;\n            this.errorTrackUrls = errorTrackUrls || [];\n            this.impressionUrls = impressionUrls || [];\n            this.linear = linear || null;\n            this.endTime = null;\n            this.duration = null;\n            if (this.linear && this.linear.duration && !this.duration) {\n                this.duration = this.linear.duration * 1000;\n            }\n            if (this.duration && !this.endTime) {\n                this.endTime = this.startTime + (this.duration);\n            }\n        }\n\n        function TrackingEvent(event, url) {\n            this.event = event;\n            this.url = url;\n\n        }\n\n        function Linear() {\n            this.trackingEvents = [];\n            this.duration = null;\n        }\n\n\n        function hmsToSecondsOnly(str) {\n            var p = str.split(':'),\n                s = 0, m = 1;\n\n            while (p.length > 0) {\n                s += m * parseInt(p.pop(), 10);\n                m *= 60;\n            }\n            return s;\n        }\n\n        function macroMapper(trackingUrl, evt) {\n            var urlVariables, adInstance;\n            let queryString = trackingUrl.split('?');\n            if (queryString.length < 2) {\n                return trackingUrl;\n            } else {\n                queryString = queryString[1];\n            }\n            urlVariables = httpUtil.getPairsFromQueryString(queryString);\n            adInstance = evt.adInstance;\n\n            if (urlVariables) {\n                if (urlVariables.hasOwnProperty('status')) {\n                    urlVariables.status = 0;\n                }\n\n                if (urlVariables.hasOwnProperty('prog')) {\n                    urlVariables.prog = 0;\n                }\n\n                if (urlVariables.hasOwnProperty('note')) {\n                    urlVariables.note = 'null';\n                }\n\n                ['[NOTE]', '[NPT]', '[STATUS]'].forEach(function (tag) {\n                    let keyName = searchPropByValue(urlVariables, tag);\n                    if (keyName) {\n                        urlVariables[keyName] = 0;\n                    }\n                });\n\n                if (trackingUrl.indexOf('[ASSETURI]') >= 0) {\n                    let assetUri = searchPropByValue(urlVariables, '[ASSETURI]');\n                    urlVariables[assetUri] = adInstance.caid;\n                }\n\n                if (trackingUrl.indexOf('[CACHEBUSTING]') >= 0) {\n\n                    let cacheBust = searchPropByValue(urlVariables, '[CACHEBUSTING]');\n                    urlVariables[cacheBust] = Math.floor((Math.random() + 1) * 10000000);\n                }\n\n                if (trackingUrl.indexOf('[CONTENTPLAYHEAD]') >= 0) {\n                    let playHead = searchPropByValue(urlVariables, '[CONTENTPLAYHEAD]');\n                    if (adInstance.streamInfo.type == 'LIVE') {\n                        urlVariables[playHead] = adInstance.startTime;\n                    } else {\n                        let startTimeSec = Math.floor(adInstance.startTime / 1000);\n                        let hour = Math.floor(startTimeSec / 3600);\n                        startTimeSec -= (hour * 3600);\n                        let hours = twoDigits(hour);\n                        let minute = Math.floor((startTimeSec / 60));\n                        startTimeSec -= (minute * 60);\n                        let minutes = twoDigits(minute);\n                        let seconds = twoDigits(startTimeSec);\n                        urlVariables[playHead] = hours + ':' + minutes + ':' + seconds + '.000';\n                    }\n                }\n\n                /*\n                if(eventType == \"error\"){\n                    var errorCode:String = searchPropByValue(urlVariables,\"[ERRORCODE]\");\n                    //to do update Url macro with the specific error code\n                }\n                */\n                return trackingUrl.split('?')[0] + '?' + Object.keys(urlVariables)\n                    .map(key => key + '=' + encodeURIComponent(urlVariables[key]))\n                    .join('&');\n            } else {\n                return trackingUrl;\n            }\n        }\n\n        function twoDigits(num) {\n            return ('00' + num).slice(-2);\n        }\n\n        function getTrackingUrls(trackingEvent) {\n            let eventType = trackingEvent.type;\n            if (eventType && VAST_EVENT_MAP[eventType]) {\n                eventType = VAST_EVENT_MAP[eventType];\n            }\n            if (trackingEvent &&\n                trackingEvent.type &&\n                trackingEvent.adInstance &&\n                trackingEvent.adInstance.trackingEvents) {\n                let event = trackingEvent.adInstance.trackingEvents.find(evt => evt.eventType === eventType);\n                if (event) {\n                    return event.trackingUrls.map(url => macroMapper(url, trackingEvent));\n                }\n            }\n            return [];\n        }\n\n        function searchPropByValue(vals, prop) {\n            return Object.keys(vals).find(key => vals[key] === prop);\n        }\n    }\n\n    function AdBreak(index, startTime, endTime, adArray) {\n        this.index = index;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.adArray = adArray || [];\n    }\n\n    /**\n     * This is a stripped down version of the AdInstance object in the flash player\n     */\n    function AdInstance() {\n\n        this.startTime = null;\n        this.endTime = null;\n        this.duration = null;\n        this.id = null; //adId\n        this.index = null; //Ad index (position)\n\n        //Legacy (mostly unused)\n        this.assetId = null;\n        this.serverId = null;\n        this.providerId = null;\n        this.spotTrackingEventUrl = null;\n        this.adStartTrackingUrl = null;\n        this.trackingEventUrl = null;\n        this.messageRef = null;\n        this.linear = {\n            trackingEvents: []\n        };\n        this.adEndTrackingUrl = null;\n        this.index = null;\n\n        this.getEvent = function (type) {\n            return this.trackingEvent.find(trackingEvent => trackingEvent.eventType === type);\n        };\n    }\n\n    /* @ngInject */\n    function LegacyAdParser(stringUtil, $log, httpUtil) {\n\n        return {\n            parseAdEvents\n        };\n\n        //////////\n\n        function parseAdEvents(tags) {\n            var _adBreaks = [];\n            var currentAdBreak = null;\n            var currentAdInstance = null;\n            var previousAdEndtime = -1;\n            var adIndex = 0;\n            var adBreakIndex = 0;\n\n            angular.forEach(tags, function (timedMetatadata) {\n\n                if (timedMetatadata.name === '#[ADEVENT]') {\n\n                    let adEventContent = stringUtil.fromBase64(timedMetatadata.content);\n                    let urlVariables = httpUtil.getPairsFromQueryString(adEventContent);\n\n                    if (urlVariables.assetid1 && urlVariables.percentile1) {\n                        let percentage = parseInt(urlVariables.percentile1);\n                        if (percentage === 0) {\n                            //previousAdEndtime initial -1\n                            if (timedMetatadata.time != previousAdEndtime) {\n                                if (currentAdBreak !== null && currentAdBreak.adArray.length > 0) {\n                                    //Not to add empty adbreak.\n                                    //close and push on going adbreak and start a new one.\n                                    _adBreaks.push(currentAdBreak);\n                                    currentAdBreak.index = adBreakIndex;\n                                    adBreakIndex++;\n                                }\n                                currentAdBreak = new AdBreak();\n                                currentAdBreak.startTime = timedMetatadata.time;\n                                adIndex = 0; //reset adIndex\n                            }\n\n                            currentAdInstance = new AdInstance();\n                            //This will create the trackgingEvent with the name 'impression' which is\n                            currentAdInstance.impressionUrls = [adEventContent];\n                            currentAdInstance.startTime = timedMetatadata.time;\n                            currentAdInstance.assetId = urlVariables.assetid1;\n                            currentAdInstance.serverId = urlVariables.adsid1;\n                            currentAdInstance.providerId = urlVariables.providerid1;\n                            currentAdInstance.spotTrackingEventUrl = urlVariables.spottracking1;\n                            currentAdInstance.trackingEventUrl = urlVariables.tracking1;\n                            currentAdInstance.messageRef = urlVariables.messageref1;\n\n                        } else if (percentage == 100) {\n                            if (currentAdInstance === null) {\n                                $log.error('Unexpected ad TAG of percentile 100');\n                            } else {\n                                if (currentAdInstance.assetId !== urlVariables.assetid1) {\n                                    $log.debug('Assetid missmatch', currentAdInstance.assetId, urlVariables.adtime1);\n                                    currentAdInstance = null; //close on going adInstance.\n                                } else {\n                                    currentAdInstance.endTime = timedMetatadata.time;\n                                    currentAdInstance.duration = currentAdInstance.endTime -\n                                        currentAdInstance.startTime;\n                                    //End event to trigger the\n                                    let trackingEvent = {\n                                        event: 'complete',\n                                        url: adEventContent\n                                    };\n                                    currentAdInstance.linear.trackingEvents.push(trackingEvent);\n                                    //adEndTrackingUrl = adEventContent;\n                                    previousAdEndtime = currentAdInstance.endTime;\n                                    //add and close on going adInstance.\n                                    currentAdInstance.index = adIndex;\n                                    //Changed to match the current\n                                    currentAdBreak.adArray.push(currentAdInstance);\n                                    currentAdBreak.endTime = timedMetatadata.time;\n                                    adIndex++;\n                                    currentAdInstance = null;\n                                }\n                            }\n                        }\n                    }\n                }\n            }); //for ad TAG\n\n\n            if (currentAdBreak !== null && currentAdBreak.adArray.length > 0) {\n                currentAdBreak.index = adBreakIndex;\n                _adBreaks.push(currentAdBreak);\n            }\n\n            //output ad break info\n            $log.debug('Adbreaks', _adBreaks);\n            return _adBreaks;\n        }\n\n\n    }\n\n}());\n"],"sourceRoot":"/source/"}