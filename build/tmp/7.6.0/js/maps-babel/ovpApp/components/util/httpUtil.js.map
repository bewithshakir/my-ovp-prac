{"version":3,"sources":["ovpApp/components/util/httpUtil.js"],"names":[],"mappings":"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","file":"ovpApp/components/util/httpUtil.js","sourcesContent":["/* globals $ */\n(function () {\n    'use strict';\n    angular.module('ovpApp.legacy.httpUtil', [\n        'ovpApp.config',\n        'ovpApp.oauth',\n        'ovpApp.services.drmSessionService',\n        'ui.router',\n        'ovpApp.services.ovpStorage'\n        ])\n        .factory('httpUtil', LegacyHttpUtil)\n        .run(function (httpUtil) {\n\n            /**\n             *  This is needed for all non-angular jquery ajax requests.\n             */\n            $.ajaxSetup({\n                statusCode: {\n                    401: httpUtil.logout\n                }\n            });\n        });\n\n    /* @ngInject */\n    function LegacyHttpUtil(config, oAuthConfig, OauthDataManager, $location, $rootScope,\n        drmSessionService, $state, $window, $injector, $q, ovpStorage, storageKeys) {\n\n        var  queryStringDictionary;\n\n        return {\n            cleanUp: cleanUp,\n            logout: logout,\n            getQueryStringValue,\n            getPairsFromQueryString,\n            toString: function () {\n                return 'HttpUtil';\n            },\n            updateQueryStringParameter,\n            removeURLParameter\n        };\n\n        ///\n\n        /*\n         * Retrieve a value from the querystring\n         *\n         * @param {String} key Key to get\n         *\n         * @return {String} The value for the given key\n         */\n        function getQueryStringDictionary() {\n            if (!queryStringDictionary) {\n                queryStringDictionary = $location.search();\n            }\n\n            return angular.copy(queryStringDictionary);\n        }\n\n        /*\n         * Get a dictionary of key value pairs from a query string or a url\n         *\n         * @param {String} queryString Query string to parse\n         *\n         * @return {Object} Dictionary of key/value pairs, looked up via key\n         */\n        function getPairsFromQueryString(url) {\n            var queryString, params;\n\n            if (!url) {\n                return getQueryStringDictionary();\n            }\n            params = url.match(/.*\\?(.*)/);\n\n            if (params && params.length > 1) {\n                queryString = params[1];\n            } else if (url.indexOf('://') < 0) {\n                queryString = url;\n            }\n\n            if (queryString) {\n                return queryString.split('&').reduce((memo, keys) => {\n                    let k = keys.split('=');\n                    memo[k[0]] = decodeURIComponent(k[1]);\n                    return memo;\n                }, {});\n            } else {\n                return {};\n            }\n        }\n\n        /*\n         * Retrieve a value from the query string\n         *\n         * @param {String} key Key to get\n         *\n         * @return {String} The value for the given key\n         */\n        function getQueryStringValue(key) {\n            return getQueryStringDictionary()[key];\n        }\n\n        /*\n        * Add or update a query string parameter\n        *\n        * @param {String} uri The entire URL including query\n        * @param {String} key The key to add or replace\n        * @param {String} value The value to set or update\n        *\n        * @return {String} The updated URI\n        */\n        function updateQueryStringParameter(uri, key, value) {\n            // remove the hash part before operating on the uri\n            var i = uri.indexOf('#');\n            var hash = i === -1 ? ''  : uri.substr(i);\n            uri = i === -1 ? uri : uri.substr(0, i);\n\n            var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');\n            var separator = uri.indexOf('?') !== -1 ? '&' : '?';\n\n            if (!value) {\n                // remove key-value pair if value is empty\n                uri = uri.replace(new RegExp('([&]?)' + key + '=.*?(&|$)', 'i'), '');\n                if (uri.slice(-1) === '?') {\n                    uri = uri.slice(0, -1);\n                }\n            } else if (uri.match(re)) {\n                uri = uri.replace(re, '$1' + key + '=' + value + '$2');\n            } else {\n                uri = uri + separator + key + '=' + value;\n            }\n            return uri + hash;\n        }\n\n        /**\n         * From: https://stackoverflow.com/questions/1634748/how-can-i-delete-a-query-string-parameter-in-javascript\n         */\n        function removeURLParameter(url, parameter) {\n            //prefer to use l.search if you have a location/link object\n            var urlparts = url.split('?');\n            if (urlparts.length >= 2) {\n\n                var prefix = encodeURIComponent(parameter) + '=';\n                var pars = urlparts[1].split(/[&;]/g);\n\n                //reverse iteration as may be destructive\n                for (var i = pars.length; i-- > 0;) {\n                    //idiom for string.startsWith\n                    if (pars[i].lastIndexOf(prefix, 0) !== -1) {\n                        pars.splice(i, 1);\n                    }\n                }\n\n                url = urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : '');\n                return url;\n            } else {\n                return url;\n            }\n        }\n\n        function cleanUp() {\n            OauthDataManager.reset();\n            drmSessionService.reset();\n        }\n\n        function flushAnalytics() {\n            // Note: there is no longer a need to flush venona analytics. The\n            // 'prepareForRefresh' event is used when a visit needs to continue.\n            // Recommend future rename of this method to 'flushSplunk'.\n            let SplunkService = $injector.get('SplunkService');\n            return $q.all([SplunkService.flush()]);\n        }\n\n        function logout(flags = {allowAutoLogin: false}) {\n            cleanUp();\n\n\n            // Set flags to prevent auto login\n            let preventAutoLogin = !angular.isDefined(flags.allowAutoLogin) || flags.allowAutoLogin === false;\n            if (preventAutoLogin) {\n                ovpStorage.setItem(storageKeys.autoAuthSignOutTime, Date.now());\n            }\n\n            //Only refresh the page if we are coming from a known state or not login\n            //This will most likely be the root state \"/\", if the user has come frome here they\n            //Would not have any data loaded because that is from manual navigation that would force a\n            //refresh.\n            //This forces a refresh to ensure that the user data is unloaded from memory.\n            if (!($state.includes('login') || ($state.current && $state.current.name === ''))) {\n                $rootScope.$emit('Analytics:logout', {\n                    goOffline: true,\n                    triggeredBy: preventAutoLogin ? 'user' : 'application'\n                });\n                flushAnalytics().finally(function () {\n                    $window.location.href = config.loginPath || '/';\n                });\n            } else {\n                $rootScope.$emit('Analytics:logout', {\n                    goOffline: false,\n                    triggeredBy: preventAutoLogin ? 'user' : 'application'\n                });\n                $state.go('login', undefined, {reload: true});\n            }\n        }\n\n    }\n}());\n"],"sourceRoot":"/source/"}