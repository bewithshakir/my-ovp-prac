{"version":3,"sources":["ovpApp/services/date-format.js"],"names":[],"mappings":"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","file":"ovpApp/services/date-format.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.services.dateFormat', ['angularMoment'])\n        .factory('dateFormat', dateFormat);\n\n    // Based on date formatting rules from the UX team. See end of this file for the\n    //   details of those rules, as taken from http://ux.twcable.com/design/dates/\n    //\n    // Usage:\n    //\n    //   dateFormat.absolute(new Date()) // prints as absolute date\n    //   dateFormat.absolute.standard(new Date()) // same result as previous example\n    //   dateFormat.absolute.short(new Date()) // shorter absolute date\n    //   dateFormat.absolute.expanded(new Date()) // longer absolute date\n    //\n    //   dateFormat.relative(new Date()) // prints the date relative to now\n    //   dateFormat.relative.standard(new Date()) // same as previous example\n    //   dateFormat.relative.short(new Date()) // shorter relative date\n    //\n    //   All of the absolute and relative dates have variants that append \"at [time]\". eg:\n    //      dateFormat.absolute.atTime(new Date())\n    //      dateFormat.absolute.short.atTime(newDate())\n    //      dateFormat.relative.atTime(new Date())\n    //      dateFormat.relative.short.atTime(new Date())\n    //\n    //  dateFormat.runTime(numSeconds)\n    //  dateFormat.runTime.standard(numSeconds) // same as previous example\n    //  dateFormat.runTime.short(numSeconds) // shorter runtime\n\n\n    /* @ngInject */\n    function dateFormat(moment) {\n        var service = {\n            relative,\n            absolute,\n            timeOfDay,\n            runtime,\n            elapsedAndDuration,\n            hhmm,\n            hhmmss,\n            remaining\n        };\n\n        createVariants(service.relative, ['standard', 'short', 'expanded', 'tiny'], true);\n        createVariants(service.absolute, ['standard', 'short', 'expanded', 'tiny'], true);\n        createVariants(service.runtime, ['standard', 'short']);\n\n        return service;\n\n        ////////////////\n\n        function createVariants(mainFunction, variants, doAtTimeSuffix) {\n            if (doAtTimeSuffix) {\n                mainFunction.atTime = date => mainFunction(date) + atTime(date);\n            }\n            variants.forEach(variant => {\n                mainFunction[variant] = date => mainFunction(date, variant);\n                if (doAtTimeSuffix) {\n                    mainFunction[variant].atTime = date => mainFunction[variant](date) + atTime(date);\n                }\n            });\n        }\n\n        function atTime(date) {\n            var dateMoment = moment(date);\n            return dateMoment.isValid() ? ' at ' + timeOfDay(date) : '';\n        }\n\n        function relative(date, variant = 'standard') {\n            let now = moment();\n            let then = moment(date);\n            if (now.clone().subtract(1, 'day').isSame(then, 'day')) {\n                return 'Yesterday';\n            } else if (now.isSame(then, 'day')) {\n                if (variant == 'tiny') {\n                    return 'Today';\n                } else {\n                    if (then - now > 0) {\n                        return 'Later today';\n                    } else {\n                        return 'Earlier today';\n                    }\n                }\n            } else if (now.clone().add(1, 'day').isSame(then, 'day')) {\n                return 'Tomorrow';\n            } else {\n                return absolute(date, variant);\n            }\n        }\n\n        function absolute(date, variant = 'standard') {\n            if (variant == 'short') {\n                return absoluteShort(date);\n            } else if (variant == 'expanded') {\n                return absoluteExpanded(date);\n            } else if (variant == 'tiny') {\n                return absoluteTiny(date);\n            } else {\n                return absoluteStandard(date);\n            }\n        }\n\n        function absoluteStandard(date) {\n            let now = moment();\n            let then = moment(date);\n            if (then.isBefore(now.subtract(1, 'year'))) {\n                return then.format('M/DD/YY');\n            } else {\n                return then.format('MMM D, YYYY');\n            }\n        }\n\n        function absoluteShort(date) {\n            let now = moment();\n            let then = moment(date);\n            if (then.isBefore(now.subtract(1, 'year'))) {\n                return then.format('M/DD/YY');\n            } else {\n                return then.format('ddd M/DD');\n            }\n        }\n\n        function absoluteTiny(date) {\n            let now = moment();\n            let then = moment(date);\n            if (then.isBefore(now.subtract(1, 'year'))) {\n                return then.format('M/DD/YY');\n            } else {\n                return then.format('ddd');\n            }\n        }\n\n        function absoluteExpanded(date) {\n            let now = moment();\n            let then = moment(date);\n            if (then.isBefore(now.subtract(1, 'year'))) {\n                return then.format('M/D/YY');\n            } else {\n                return then.format('dddd, MMM Do');\n            }\n        }\n\n        function timeOfDay(date) {\n            return moment(date).format('h:mm a');\n        }\n\n        function runtime(seconds, variant = 'standard') {\n            seconds = Math.max(1, Math.round(seconds / 60)) * 60;\n            let val = '';\n            let duration = moment.duration(seconds, 'seconds');\n            let hours = duration.hours();\n            if (hours > 0) {\n                val += hours + ' hour' + (hours != 1 ? 's ' : ' ');\n            }\n            let minutes = duration.minutes();\n            let minuteString = '' + minutes;\n            minuteString = minutes.length == 1 ? '0' + minuteString : minuteString;\n            if (minutes > 0 || hours === 0) {\n                val += minuteString + ' minute' + (minutes != 1 ? 's' : '');\n            }\n\n            if (variant == 'short') {\n                let re = /minutes?/gi;\n                val = val.replace(re, 'min');\n                re = /hours?/gi;\n                val = val.replace(re, 'hr');\n            }\n\n            return val;\n        }\n\n        function elapsedAndDuration(elapsedSec, durationSec) {\n            return `${eadFormat(elapsedSec)} / ${eadFormat(durationSec)}`;\n        }\n\n        function hhmm(seconds) {\n            return `${eadFormat(seconds)}`;\n        }\n\n        function hhmmss(seconds) {\n            let minutes = Math.floor(seconds / 60);\n            let hours = Math.floor(minutes / 60);\n            seconds = Math.round(seconds % 60);\n\n            minutes %= 60;\n            if (minutes < 10) {\n                minutes = '0' + minutes;\n            }\n            if (seconds < 10) {\n                seconds = '0' + seconds;\n            }\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        function eadFormat(seconds) {\n            let minutes = Math.floor(seconds / 60);\n            let hours = Math.floor(minutes / 60);\n\n            minutes %= 60;\n            if (minutes < 10) {\n                minutes = '0' + minutes;\n            }\n            return `${hours}:${minutes}`;\n\n        }\n\n        function remaining() {\n            return 'not implemented';\n        }\n    }\n\n    // Date formatting rules from the UX team\n    //\n    // source: http://ux.twcable.com/design/dates/ (as of september 24, 2015)\n    //\n    // **Relative dates**\n    // ------------------\n    //\n    // Use relative dates when a general understanding of sequence is sufficient to communicate meaning. Use absolute\n    // date when precision is needed, for example in logging or supporting an exact understanding of an event sequence.\n    //\n    // **Past events**\n    // Time of event                     Displayed value\n    // --------------------------------------------------------\n    // Within the last few seconds       Just now\n    // Within the same calendar date     Earlier today *\n    // 1 day ago (by date, not hours)    Yesterday\n    // > 1 day ago                       Use absolute datestamp, i.e. Wed 8/03\n    //\n    // **Future events**\n    // Time of event                     Displayed value\n    // Within the next few seconds       On now\n    // In the next 30 minutes            Up next\n    // In the same calendar date         Later today *\n    // In 1 day (by date, not hours)     Tomorrow\n    // In > 1 day                        Use absolute datestamp, i.e. Wed 8/03\n    //\n    // * If screen real estate is at a premium, you may drop the “Earlier/Later” and just use “Today”.\n    //\n    //\n    // **Absolute dates**\n    // ------------------\n    //\n    // Below are several format alternatives for displaying date and time information at several levels of granularity.\n    // These should be used when absolute datestamps are considered necessary, or just make more sense than relative\n    // dates.\n    //\n    // Granularity                                             Value\n    // --------------------------------------------------------------------------\n    // Standard                                                Aug 3, 2009\n    // Short (leading zero in day)                             Wed 8/03\n    // Expanded                                                Wednesday, Aug 3rd\n    // > 1 calendar year ago (leading zero in day and year)    8/03/09\n    //\n    // **Date at Time**\n    // ----------------\n    //\n    // If an exact time of day is necessary to provide clarity or differentiation for the customer, use the time of day\n    // in conjunction with the Relative or Absolute date formats.\n    //\n    // - Tomorrow at 5:00 pm\n    // - Tomorrow at 3:00 pm\n    // - Tomorrow at 1:00 pm\n    // - Later today at 2:00 pm\n    // - Earlier today at 11:00 am\n    // - Yesterday at 1:00 pm\n    // - Wednesday, Aug 3rd at 1:00 pm\n    // - Wed 8/03 at 1:00 pm\n    //\n    // **Time formats**\n    // ----------------\n    //\n    // Listed below are example formats for indicating time.\n    //\n    // **Time of day**\n    // 12-hour clock, no leading zeros.\n    //\n    // - 12:52 pm\n    // - 2:05 am\n    //\n    // **Runtime and recording length**\n    // Use plural hours and minutes when necessary.\n    //\n    // - 1 minute\n    // - 59 minutes\n    // - 1 hour\n    // - 1 hour 1 minute\n    // - 1 hour 59 minutes\n    // - 2 hours\n    //\n    // If space is limited, it’s okay to use “hr” and “min” instead, but try to avoid it.\n    //\n    // - 1 min\n    // - 59 min\n    // - 1 hr\n    // - 1 hr 1 min\n    // - 1 hr 59 min\n    // - 2 hr\n    //\n    // **Time elapsed / duration**\n    // No leading zeros.\n    //\n    // - 0:01 / 0:59\n    // - 1:59 / 12:05\n    //\n    // **Time remaining**\n    // Use plural forms when necessary.\n    //\n    // - 13 seconds left\n    // - 12 minutes left\n    // - 1 hour 36 minutes left\n    // - 2 hours 1 minute left\n})();\n"],"sourceRoot":"/source/"}