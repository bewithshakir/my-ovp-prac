{"version":3,"sources":["ovpApp/login/login.js"],"names":[],"mappings":"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","file":"ovpApp/login/login.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.login', [\n        'ovpApp.login.loginService',\n        'ovpApp.components.alert',\n        'ovpApp.legacy.httpUtil',\n        'ovpApp.config',\n        'ovpApp.messages',\n        'ajoslin.promise-tracker',\n        'ovpApp.oauth',\n        'ovpApp.services.profileService',\n        'ovpApp.services.streamPlusService',\n        'ovpApp.services.runOnceService',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.services.locationService',\n        'ovpApp.directives.focus',\n        'ovpApp.services.errorCodes',\n        'ui.router',\n        'ngAria',\n        'ngMessages',\n        'ngCookies'\n    ])\n    .constant('subViews', {\n        PARENTAL: 'parental',\n        HELP: 'help',\n        FORM: 'form',\n        ERROR: 'error'\n    })\n    //If the login error returned matches a key in the list this will display the \"fatal\" block inidicating\n    //the user must do something special before continuing\n    .constant('LOGIN_ERROR_TEMPLATES', {\n        '1024': '/js/ovpApp/login/errors/login-error-blacklist.html'\n    })\n    .controller('LoginController', LoginController)\n    .directive('ovpLoginForm', loginForm);\n\n    /* @ngInject */\n\n    function LoginController($scope, $window, $q, subViews, loginService, $log, alert,\n              promiseTracker, runOnce, config, messages, $state, profileService,\n              httpUtil, ovpStorage, storageKeys, $rootScope, $timeout, LOGIN_ERROR_TEMPLATES,\n              $element, $location, connectivityService, streamPlusService, errorCodesService,\n              locationService) {\n\n\n        $scope.artOrigin = config.piHost;\n        $scope.collageImageUrl = null;\n        $scope.config = config;\n        $scope.parentalControlsSpinner = false; //This cannot _fail_ so no need to use a promiseTracker\n        $scope.messages = messages;\n\n        $scope.user = {\n            username: '',\n            password: '',\n            rememberme: true,\n            loginsubmit: 'Sign In'\n            //$error: false\n        };\n\n        $scope.enterSite = function () {\n            // OVP-382: Get capabilities to initialize SPP\n            profileService.canUseTwctv().then(() => {\n                $scope.showParentalControlWarning().then(() => {\n                    let storedLink = ovpStorage.getItem(storageKeys.appLink);\n                    if (storedLink) {\n                        // Clear storedLink and navigate to it\n                        ovpStorage.removeItem(storageKeys.appLink);\n                        if (storedLink.url) {\n                            $location.url(storedLink.url);\n                            $state.router.urlRouter.sync();\n                        } else {\n                            $state.go(storedLink.state, storedLink.params);\n                        }\n                    } else {\n                        profileService.canWatchLive().then((isEnabled) => {\n                            $scope.success = true;\n                            if (isEnabled) {\n                                $state.go('ovp.livetv');\n                            } else {\n                                profileService.getFirstAvailableState().then((state) => {\n                                    $state.go(state);\n                                });\n                            }\n                        }, (error) => {\n                            $log.error('Unable to check capabilities', error);\n                        });\n                    }\n                });\n            }, () => {\n                streamPlusService.isStreamPlusEligible(true).then(() => {\n                    $state.go('buyFlow.welcome');\n                }).catch(() => {\n                    $state.go('novideoservice');\n                });\n            });\n        };\n\n        $scope.updateFormWithRememberme = function () {\n            var rememberMe = ovpStorage.getItem(storageKeys.loginRememberMe);\n            $scope.user.username = rememberMe ? rememberMe.username : '';\n            $scope.user.rememberme = true;\n        };\n\n        $scope.parentalControlWarningDeferred = $q.defer();\n        $scope.isValidationError = false;\n        $scope.loadingTracker = promiseTracker();\n        $scope.parentalControlsTracker = promiseTracker();\n\n        $scope.updateFormWithRememberme();\n\n        $scope.parentalControlsWarningAccepted = function () {\n            loginService.acceptParentalControlsWarning();\n            $scope.parentalControlsSpinner = true;\n            $scope.parentalControlWarningDeferred.resolve();\n        };\n\n        $scope.showParentalControlWarning = function () {\n            if (profileService.isSpecUOrBulkMDU()) {\n                $scope.parentalControlWarningDeferred.resolve();\n            } else {\n                loginService.hasAcceptedParentalControlsWarning().then((hasAccepted) => {\n                    if (hasAccepted) {\n                        $scope.parentalControlWarningDeferred.resolve();\n                    } else {\n                        $scope.login.subView = subViews.PARENTAL;\n                    }\n                });\n            }\n\n            return $scope.parentalControlWarningDeferred.promise;\n        };\n\n        $scope.onRememberMeChange = function () {\n            if (!$scope.user.rememberme) {\n                loginService.rememberMe('');\n            }\n        };\n\n        $scope.authenticate = function () {\n            if (!connectivityService.isOnline()) {\n                $scope.errorCode = '-1';\n                $scope.login.subView = subViews.FORM;\n            } else {\n                var authenticationPromise = $q.when(loginService.authenticate($scope.user.username,\n                        $scope.user.password, $scope.user.rememberme)),\n                    loginTrackerPromise = $q.defer(),\n                    locationPromise,\n                    postAuthConfigPromise;\n\n                // reset the form validity so the screen reader will read any new errrors\n                $scope.isValidationError = false;\n                $scope.errorCode = null;\n                $scope.loadingTracker.addPromise(loginTrackerPromise.promise);\n                $scope.fatalErrorTemplate = null;\n\n                authenticationPromise.then(\n                    //success\n                    function () {\n                        $scope.isValidationError = false;\n                        postAuthConfigPromise = profileService.postAuth();\n                        locationPromise = locationService.getLocation();\n                        $q.all([locationPromise, postAuthConfigPromise]).then(function () {\n                            $scope.enterSite();\n                        }).catch((err = {}) => {\n                            // Analytics\n                            $rootScope.$emit('Analytics:sadTv', {\n                                errorCode: err.errorCode,\n                                errorMessage: errorCodesService.getMessageForCode(err.errorCode)\n                            });\n\n                            $state.go('ovp.sadtverror', {errorCode: err.errorCode});\n                        });\n                    },\n                    function (errorResponse = {}) {\n                        loginTrackerPromise.resolve();\n                        if (errorResponse.isInvalidCreds) {\n                            $scope.user.password = '';\n                            $element.find('#password').focus();\n                        }\n                        $scope.login.subView = subViews.FORM;\n                        $scope.isValidationError = true;\n                        $scope.errorCode = errorResponse.errorCode;\n                        if (LOGIN_ERROR_TEMPLATES[$scope.errorCode]) {\n                            $scope.login.subView = 'fatal';\n                            $scope.fatalErrorTemplate = LOGIN_ERROR_TEMPLATES[$scope.errorCode];\n                        }\n                    }\n                );\n            }\n        };\n\n        $scope.fatalErrorClick = function () {\n            $window.open(config.forgotHost + config.registration.forgot, '_forgotpass');\n            $scope.returnToLoginForm();\n        };\n\n        $scope.login = {\n            subView: subViews.FORM,\n            subViews: subViews\n        };\n\n        $scope.forgotUsernameOrPassword = function () {\n            // Analytics:\n            $rootScope.$emit('Analytics:select', {\n                elementStandardizedName: 'forgotUsernamePassword',\n                pageSectionName: 'loginArea'\n            });\n        };\n\n        $scope.createUsername = function () {\n\n            // Analytics:\n            $rootScope.$emit('Analytics:select', {\n                elementStandardizedName: 'createUsername',\n                pageSectionName: 'loginArea'\n            });\n        };\n\n        $scope.viewTOS = function () {\n            // TODO: Analytics Event\n            // $rootScope.$emit('EG:TOSViewed', {\n            //     showable: 'shown',\n            //     agreement: 'termsOfService'\n            // });\n        };\n\n        $scope.viewPrivacy = function () {\n            // TODO: Analytics Event\n            // $rootScope.$emit('EG:TOSViewed', {\n            //     showable: 'shown',\n            //     agreement: 'privacyPolicy'\n            // });\n        };\n\n        $scope.returnToLoginForm = function () {\n            $scope.errorCode = null;\n            $scope.login.subView = subViews.FORM;\n        };\n\n        loginService.error(function () {\n            $scope.login.subView = subViews.FORM;\n            $scope.loadingTracker.cancel();\n        });\n\n        $rootScope.$broadcast('pageChangeComplete', $state.current);\n    }\n\n    /* @ngInject */\n    function loginForm(messages, LOGIN_ERROR_TEMPLATES, ovpStorage, storageKeys,\n        $window, OauthService, $rootScope) {\n        return {\n            restrict: 'E',\n            templateUrl: '/js/ovpApp/login/loginForm.html',\n            link: ($scope) => {\n                let oauthError = OauthService.getOAuthError();\n                $scope.isSpecUError = oauthError.isSpecU || false;\n                $scope.isStreamPlusError = oauthError.isStreamPlus || false;\n                $scope.messages = messages;\n                $scope.privacyPolicyLink = 'https://www.spectrum.com/policies/spectrum-customer-privacy-policy.html';\n                $scope.termsAndConditionsLink = 'https://www.spectrum.com/policies/residential-terms.html';\n\n                $scope.retryAutoOauth = () => {\n                    ovpStorage.removeItem(storageKeys.autoAuthSignOutTime);\n\n                    // Analytics:\n                    $rootScope.$emit('Analytics:prepareForRefresh');\n                    $rootScope.$emit('Analytics:select', {\n                        elementStandardizedName: 'retryAutoAccess',\n                        pageSectionName: 'loginArea'\n                    });\n\n                    $window.location.reload();\n                };\n\n                $scope.onSubmit = () => {\n                    // error check\n                    if ($scope.loginForm.username.$error.required || $scope.loginForm.password.$error.required) {\n                        if ($scope.loginForm.username.$error.required) {\n                            $scope.loginForm.username.$setDirty();\n                        }\n                        if ($scope.loginForm.password.$error.required) {\n                            $scope.loginForm.password.$setDirty();\n                        }\n                        return true;\n                    }\n\n                    $scope.authenticate();\n                };\n\n                $scope.$watch('errorCode', (nv, ov) => {\n                    if (nv) {\n                        $scope.loginForm.$setSubmitted(true);\n                        if ($scope.errorCode && LOGIN_ERROR_TEMPLATES[$scope.errorCode]) {\n                            $scope.loginForm.loginForm.$setValidity(LOGIN_ERROR_TEMPLATES[$scope.errorCode], false);\n                        } else {\n                            if ($scope.errorCode && $scope.errorCode === '-1') {\n                                $scope.loginForm.loginForm.$setValidity('error-connectivity', false);\n                            } else if ($scope.errorCode && $scope.errorCode === 'WLI-1025') {\n                                $scope.loginForm.loginForm.$setValidity('error-locked', false);\n                            } else {\n                                $scope.loginForm.loginForm.$setValidity('error-generic', false);\n                                $scope.loginForm.password.$setPristine();\n                            }\n\n                        }\n                    } else if (ov && !nv) {\n                        //Clear any errors that might have been set\n                        Object.keys(LOGIN_ERROR_TEMPLATES).forEach((key) => {\n                            $scope.loginForm.loginForm.$setValidity(LOGIN_ERROR_TEMPLATES[key], null);\n                        });\n                        $scope.loginForm.loginForm.$setValidity('error-generic', null);\n                        $scope.loginForm.password.$setPristine();\n                    }\n                });\n            }\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}