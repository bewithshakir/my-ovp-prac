{"version":3,"sources":["ovpApp/rdvr/my-recordings-datasource.js"],"names":[],"mappings":"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","file":"ovpApp/rdvr/my-recordings-datasource.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.rdvr.datasource')\n        .factory('MyRecordingsDatasource', factory);\n\n    /* @ngInject */\n    function factory(AbstractDatasource, $q, rx, rxhttp, config, recordingViewModelDefinition,\n        rdvrCacheService, recordingsListType) {\n        return class MyRecordingsDatasource extends AbstractDatasource {\n            constructor(stb) {\n                super(stb, recordingsListType.COMPLETED, {\n                    data: []\n                });\n\n                if (this.stb && this.stb.dvr) {\n                    this.locallyDeleted = new rx.BehaviorSubject([]);\n\n                    this.source = this.reset.map(() => true)\n                        .startWith(false)\n                        .flatMapLatest(force => {\n                            return this.fetchAndCombineWithLocalChanges(force)\n                                .startWith(this.initialValue)\n                                .takeUntil(this.reset);\n                        })\n                        .shareReplay(1);\n                } else {\n                    this.source = rx.Observable.never();\n                }\n            }\n\n            fetchAndCombineWithLocalChanges(force) {\n                this.locallyDeleted.onNext([]);\n\n                return rx.Observable.combineLatest(\n                        this.fetchCompleted(force), this.fetchInProgress(), this.locallyDeleted,\n                        (completed, inProgress, locallyDeleted) => {\n                            let recordings = inProgress.data.concat(completed.data);\n                            locallyDeleted.forEach(deleted => {\n                                const found = recordings.find(r => this.recordingsEqual(r, deleted));\n                                if (found) {\n                                    const index = recordings.indexOf(found);\n                                    if (index > -1) {\n                                        recordings.splice(index, 1);\n                                    }\n                                }\n                            });\n\n                            let completedRecordings = completed.data.slice();\n                            locallyDeleted.forEach(deleted => {\n                                const found = completedRecordings.find(r => this.recordingsEqual(r, deleted));\n                                if (found) {\n                                    const index = completedRecordings.indexOf(found);\n                                    if (index > -1) {\n                                        completedRecordings.splice(index, 1);\n                                    }\n                                }\n                            });\n\n                            if (completedRecordings.length === completed.data.length) {\n                                rdvrCacheService.createNewCache(recordingsListType.COMPLETED, this.stb, {\n                                    data: completedRecordings,\n                                    nextParams: completed.nextParams\n                                });\n                            } else {\n                                rdvrCacheService.updateCache(recordingsListType.COMPLETED, this.stb, {\n                                    data: completedRecordings,\n                                    nextParams: completed.nextParams\n                                });\n                            }\n\n                            return {\n                                data: recordings.map(r => this.wrapRecording(r)),\n                                isComplete: !completed.nextParams && !inProgress.nextParams,\n                                error: completed.error || inProgress.error,\n                                lastUpdated: completed.lastUpdated,\n                                busyUntil: completed.busyUntil\n                            };\n                        }\n                    );\n            }\n\n            fetchCompleted(force) {\n                if (force) {\n                    this.clearCache();\n                }\n\n                return this.batchGetWithCache({\n                        getter: this.getOneCompletedRecordingBatch.bind(this),\n                        initialParams: 0\n                    })\n                    .catch(error => rx.Observable.just({data: [], error}))\n                    .scan(this.mergeBatches);\n            }\n\n            getOneCompletedRecordingBatch(startIndex) {\n                const url = config.piHost + config.nrsApi + this.getDvrBase() +\n                    this.stb.macAddressNormalized + config.services.dvrRecorded;\n                const params = {startIndex: startIndex};\n\n                return rxhttp.get(url, {params, withCredentials: true})\n                    .retry(2)\n                    .map(result => {\n                        if (result.status == 206) {\n                            result.nextParams = result.data.recordings.length + startIndex;\n                        }\n\n                        result.data = result.data.recordings.map(r => {\n                            if (!r.programMetadata) {\n                                this.createEmptyProgramMetadata(r);\n                            }\n                            return r;\n                        });\n\n                        return result;\n                    });\n            }\n\n            fetchInProgress() {\n                const baseUrl = config.piHost + config.nrsApi + this.getDvrBase();\n                const url = baseUrl + this.stb.macAddressNormalized + config.services.dvrRecording;\n                return rxhttp.get(url, {withCredentials: true})\n                    .retry(2)\n                    .map(result => {\n                        result.data = result.data.recordings.map(r => {\n                            if (!r.programMetadata) {\n                                this.createEmptyProgramMetadata(r);\n                            }\n                            return r;\n                        });\n\n                        result.isComplete = true;\n\n                        return result;\n                    })\n                    .catch(error => rx.Observable.just({data: [], error}));\n            }\n\n            deleteRecordings(recordings) {\n                if (!this.stb || !this.stb.dvr) {\n                    return $q.resolve();\n                }\n\n                const baseUrl = config.piHost + config.nrsApi + this.getDvrBase();\n                const fullUrl = baseUrl + this.stb.macAddressNormalized + config.services.dvrRecordedDelete;\n\n                if (!angular.isArray(recordings)) {\n                    recordings = [recordings];\n                }\n\n                const deletions = recordings.map(recording => {\n                    return {\n                        tmsProgramId: recording.tmsProgramId,\n                        mystroServiceId: recording.mystroServiceId,\n                        startUnixTimestampSeconds: recording.startTime,\n                        //we always set recordSeries to false on deletes\n                        recordSeries: false\n                    };\n                });\n\n                return rxhttp.put(fullUrl, {deletions}, {withCredentials: true})\n                    .toPromise($q)\n                    .then((result) => {\n                        let failures = result.data.failedDeletions.map(r => {\n                            if (!r.programMetadata) {\n                                this.createEmptyProgramMetadata(r);\n                            }\n\n                            return recordingViewModelDefinition.createInstance(r);\n                        });\n\n                        let successfulDeletions = recordings.filter(r =>\n                        !failures.find(f => this.recordingsEqual(f, r)));\n\n                        let currentValue = this.locallyDeleted.getValue();\n                        // unwraping the data delegates, so it can be saved to the cache correctly\n                        currentValue.push(...successfulDeletions.map(sd => sd._context.data));\n                        this.locallyDeleted.onNext(currentValue);\n\n                        //TODO: Analytics event\n\n                        return result;\n                    });\n            }\n        };\n    }\n})();\n"],"sourceRoot":"/source/"}