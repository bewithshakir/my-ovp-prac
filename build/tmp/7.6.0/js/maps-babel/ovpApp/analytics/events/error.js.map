{"version":3,"sources":["ovpApp/analytics/events/error.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;IACT;;;IAEA,QAAQ,OAAO,iCAAiC,CAC5C,sCAEH,QAAQ,SAAS,aACjB,cAAI,SAAS,YAAY,OAAO;QACzB,OAAO;;;;IAIf,SAAS,YAAY,YAAY,kBAAkB,MAAM;;;;;;;QAOrD,SAAS,aAAa,MAAM;YACxB,IAAI;gBACA,IAAI,iBAAiB,WAAW;oBAC5B,KAAK,MAAM,2BAA2B;;;;;gBAK1C,IAAI,KAAK,WAAW;oBAChB,QAAQ,OAAO,MAAM,iBAAiB,KAAK;;;;gBAI/C,KAAK,YAAY,MAAM,KAAK,aAAa;gBACzC,KAAK,eAAe,KAAK,gBAAgB;gBACzC,KAAK,YAAY,KAAK,aAAa;;gBAEnC,iBAAiB,MAAM,SAAS;cAClC,OAAO,IAAI;gBACT,KAAK,MAAM,cAAc;;;;;;;;;;QAUjC,SAAS,iBAAiB,WAAW;YACjC,IAAI,iBAAiB,WAAW;gBAC5B,KAAK,MAAM,+BAA+B;;;YAG9C,IAAI,SAAS;;YAEb,IAAI,aAAa,UAAU,MAAM;gBAC7B,OAAO,YAAY,KAAK,UAAU,KAAK;gBACvC,OAAO,eAAe,UAAU,KAAK;gBACrC,OAAO,cAAc;;;gBAGrB,IAAI,UAAU,KAAK,SAAS;oBACxB,OAAO,YAAY,UAAU,UAAU,KAAK;;;;gBAIhD,IAAI,UAAU,UAAU,UAAU,OAAO,KAAK;oBAC1C,OAAO,YAAY,MAAM,UAAU,OAAO;;;;YAIlD,OAAO;;;;;;QAMX,SAAS,uBAAuB;YAC5B,IAAI;gBACA,WAAW,IAAI,mBAAmB,UAAC,OAAO,MAAS;oBAC/C,aAAa;;;gBAGjB,WAAW,IAAI,mBAAmB,UAAC,OAAO,MAAS;oBAC/C,KAAK,YAAY;oBACjB,aAAa;oBACb,WAAW,MAAM;;cAGzB,OAAO,IAAI;gBACP,KAAK,MAAM,cAAc;;;;;QAKjC;;QAEA,OAAO;YACH,cAAA;YACA,kBAAA;;;KAGP","file":"ovpApp/analytics/events/error.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.analytics.events.error', [\n        'ovpApp.analytics.analyticsService'\n    ])\n    .factory('error', errorEvents)\n    .run(function loadHandler(error) {\n            return error;\n        });\n\n    /* @ngInject */\n    function errorEvents($rootScope, analyticsService, $log) {\n\n        /**\n         * Process and publish a venona error event, based on the given data.\n         *\n         * @param data Data object containing venona error information.\n         */\n        function processError(data) {\n            try {\n                if (analyticsService.isDebug()) {\n                    $log.debug('Analytics: processError', data);\n                }\n\n                // If we have an httpError object, extend the data object with\n                // data extracted from the httpError.\n                if (data.httpError) {\n                    angular.extend(data, extractHttpError(data.httpError));\n                }\n\n                // Prevent validation warnings by replacing nulls with strings.\n                data.errorCode = '' + (data.errorCode || '');\n                data.errorMessage = data.errorMessage || '';\n                data.errorType = data.errorType || '';\n\n                analyticsService.event('error', data);\n            } catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        /**\n         * Populate an error object based on an $http error.\n         *\n         * @param httpError Error object returned from an $http invocation.\n         * @return Object containing fields relevant to a venona error event.\n         */\n        function extractHttpError(httpError) {\n            if (analyticsService.isDebug()) {\n                $log.debug('Analytics: extractHttpError', httpError);\n            }\n\n            let result = {};\n\n            if (httpError && httpError.data) {\n                result.errorCode = '' + httpError.data.statusCode;\n                result.errorMessage = httpError.data.error;\n                result.errorExtras = {};\n\n                // Include error message, if exists.\n                if (httpError.data.message) {\n                    result.errorExtras.message = httpError.data.message;\n                }\n\n                // Include URL, if exists\n                if (httpError.config && httpError.config.url) {\n                    result.errorExtras.url = httpError.config.url;\n                }\n            }\n\n            return result;\n        }\n\n        /**\n         * Function for attaching event listeners.\n         */\n        function attachEventListeners() {\n            try {\n                $rootScope.$on('Analytics:error', (event, data) => {\n                    processError(data);\n                });\n\n                $rootScope.$on('Analytics:sadTv', (event, data) => {\n                    data.errorType = 'sadTv';\n                    processError(data);\n                    $rootScope.$emit('Analytics:applicationTriggeredRouting');\n                });\n            }\n            catch (ex) {\n                $log.error('Analytics:', ex);\n            }\n        }\n\n        // Attach the event listeners.\n        attachEventListeners();\n\n        return {\n            processError,\n            extractHttpError\n        };\n    }\n}());\n"],"sourceRoot":"/source/"}