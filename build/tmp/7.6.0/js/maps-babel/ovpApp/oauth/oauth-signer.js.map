{"version":3,"sources":["ovpApp/oauth/oauth-signer.js"],"names":[],"mappings":"AAAA;;AAAA,CAAC,YAAY;;4DACT;IACA,QAAQ,OAAO,gBACV,QAAQ,eAAe;;;IAI5B,SAAS,YAAY,kBAAkB,MAAM;QACzC,IAAI,MAAM;;QAEV,OAAO;YACH,gBAAA;YACA,MAAA;;;QAGJ,SAAS,eAAe,KAAK;YACzB,IAAI,cAAc;gBACd,qBAAqB,IAAI,MAAM;gBAC/B;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;;YAEJ,IAAI,sBAAsB,mBAAmB,QAAQ;gBACjD,cAAc,mBAAmB,GAAG,UAAU;gBAC9C,UAAU,YAAY,MAAM;;gBAE5B,KAAK,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;oBACjC,OAAO,QAAQ;oBACf,QAAQ,KAAK,MAAM;oBACnB,MAAM;oBACN,QAAQ;;oBAER,IAAI,MAAM,SAAS,GAAG;wBAClB,MAAM;2BACH;wBACH,MAAM,MAAM;wBACZ,QAAQ,MAAM;;;oBAGlB,YAAY,OAAO,mBAAmB;;;;YAI9C,OAAO;;;QAGX,SAAS,KAAK,SAAS,WAAW,aAAa;;;YAG3C,IAAI,WAAW,QAAQ,IAAI,MAAM,UAAU;gBACvC,SAAU,QAAQ,SAAU,QAAQ,OAAO,gBAAgB,QAAQ,KAAK;;;YAExE,UAAW,SAAS,MAAM,mBAAmB;gBAE7C,cAAc,UAAU,eAAe;gBACvC,cAAc;gBACd;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;;YAEJ,IAAI,UAAU,SAAS,UAAU,aAAa;gBAC1C,YAAY,cAAc,UAAU;;;;YAIxC,IAAI,WAAW,OAAO;gBAClB,cAAc,eAAe,QAAQ;;;YAGzC,YAAY,OAAO,OAAO,IAAI,aAAa;YAC3C,kBAAkB,OAAO,KAAK,WAAW,IAAI,UAAA,KAAG;gBAC5C,OADgD,MAAM,MAAM,UAAU;eAAM,OAAO,KAAK;YAC5F,kBAAkB,mBAAmB;YACrC,eAAgB,OAAO,KAAK,aAAa,IAAI,UAAA,KAAG;gBAG5C,OAHgD,MAAM,OAAO,YAAY,OAAO;eAAK,OAAO,KAAK;;;YAGrG,iBAAiB,UAAU,MAAM;YACjC,gBAAgB,IAAI,IAAI,gBAAgB;;;;YAIxC,SAAS,iBAAiB,MAAM,SAAS,MAAM;;YAE/C,OAAO,mBAAmB,cAAc,QAAQ,QAAQ,QAAQ,SAAS;;YAEzE,OAAO;;;KAGd","file":"ovpApp/oauth/oauth-signer.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.oauth')\n        .service('OauthSigner', OauthSigner);\n\n\n    /* @ngInject */\n    function OauthSigner(OauthDataManager, sha1) {\n        var Sha = sha1;\n\n        return {\n            getQueryParams,\n            sign\n        };\n\n        function getQueryParams(url) {\n            var queryParams = {},\n                queryStringMatches = url.match(/[?&][^?]+/g),\n                queryString,\n                qParams,\n                i,\n                pair,\n                split,\n                key,\n                value;\n\n            if (queryStringMatches && queryStringMatches.length) {\n                queryString = queryStringMatches[0].substring(1);\n                qParams = queryString.match(/[^?&]+/g);\n\n                for (i = 0; i < qParams.length; i++) {\n                    pair = qParams[i];\n                    split = pair.split('=');\n                    key = '';\n                    value = '';\n\n                    if (split.length < 2) {\n                        key = pair;\n                    } else {\n                        key = split[0];\n                        value = split[1];\n                    }\n\n                    queryParams[key] = encodeURIComponent(value);\n                }\n            }\n\n            return queryParams;\n        }\n\n        function sign(request, oAuthData, oAuthParams) {\n\n            // remove querystring from URL\n            var shortUrl = request.url.match(/[^?]+/g)[0],\n                method = (request.method) ? request.method.toUpperCase() : request.type.toUpperCase(),\n                // base URI used in oauth signature\n                baseUri =  method + '&' + encodeURIComponent(shortUrl),\n\n                tokenSecret = oAuthData.tokenSecret || '',\n                queryParams = {},\n                allParams,\n                paramsSignature,\n                paramsHeader,\n                unsignedParams,\n                sha1Generator,\n                secret,\n                hmac;\n\n            if (oAuthData.token && oAuthData.tokenSecret) {\n                oAuthParams.oauth_token = oAuthData.token;\n            }\n\n            // if get, retrieve querystring params and append to signature\n            if (method === 'GET') {\n                queryParams = getQueryParams(request.url);\n            }\n\n            allParams = Object.assign({}, queryParams, oAuthParams);\n            paramsSignature = Object.keys(allParams).map(key => key + '=' + allParams[key]).sort().join('&');\n            paramsSignature = encodeURIComponent(paramsSignature);\n            paramsHeader =  Object.keys(oAuthParams).map(key => key + '=\"' + oAuthParams[key] + '\"').sort().join(', ');\n\n            // this is the string we will sign\n            unsignedParams = baseUri + '&' + paramsSignature;\n            sha1Generator = new Sha(unsignedParams, 'TEXT');\n\n            // secret is normally the OVP secret concatenatenated the the token secret returned from PI,\n            // however some PI OAuth API calls do not use it so you can choose to ignore it.\n            secret = OauthDataManager.get().secret + '&' + tokenSecret;\n            // sign\n            hmac = encodeURIComponent(sha1Generator.getHMAC(secret, 'TEXT', 'SHA-1', 'B64'));\n\n            return hmac;\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}