{"version":3,"sources":["ovpApp/components/player/mini-guide-data.js"],"names":[],"mappings":"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","file":"ovpApp/components/player/mini-guide-data.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ovpApp.playerControls.miniGuideData', [\n            'ovpApp.player.whatsOn',\n            'ovpApp.services.ovpStorage',\n            'ovpApp.config',\n            'ovpApp.services.locationService'\n        ])\n        .constant('dummyEANAsset', {\n            title: 'Emergency Alert',\n            isEpisodic: false,\n            networkImage: angular.noop,\n            imageUri: angular.noop\n        })\n        .constant('ALL_CHANNELS_FILTER', {\n            name: 'All Channels',\n            filter: 'All Channels'\n        })\n        .constant('RECENT_HISTORY_FILTER', {\n            name: 'Recently Watched',\n            filter: 'Recently Watched'\n        })\n        .constant('AZ_SORT', {\n            name: 'A-Z (networks)',\n            id: 'networkAToZ',\n            egName: 'network'\n        })\n        .constant('CHANNEL_NUMBER_SORT', {\n            name: 'Channel Number',\n            id: 'channelNumber',\n            egName: 'channel'\n        })\n        .factory('miniGuideData', miniGuideData);\n\n    /* @ngInject */\n    function miniGuideData(ovpStorage, storageKeys, whatsOn, $http, config,\n            $q, locationService, $rootScope, parentalControlsService, $timeout, $interval,\n            ALL_CHANNELS_FILTER, RECENT_HISTORY_FILTER, AZ_SORT, CHANNEL_NUMBER_SORT, profileService) {\n\n        const service = {\n            getData,\n            getDefaultChannel,\n            addDummyEANChannel,\n            removeDummyEANChannel,\n            setSelectedFilter,\n            setSelectedSort,\n            setSelectedChannel,\n            onPlayerDestroyed,\n            startChannelUpdateTimer,\n            _private: {\n                //Exposed for unit tests only\n                sortAndFilter\n            }\n        };\n\n        const maxRecentHistoryChannels = 10;\n        const channels = [], filteredChannels = [], recent = [], filters = [], sorts = [];\n\n        let location, isPCDisabled, selectedFilter, selectedSort, selectedChannel, promise;\n        let channelUpdateTimer, lineupUpdateInterval;\n\n        return service;\n\n        ////////////////\n\n        function getData(desiredChannelId, eanUrl) {\n            if (!promise) {\n                promise = $q.all([\n                        initLocation(),\n                        initParentalControls()\n                    ])\n                    .then(initChannels)\n                    .then(initRecent)\n                    .then(() => {\n                        initSort();\n                        initFilters(desiredChannelId);\n                        initFilteredChannels();\n                        startLineupUpdateInterval();\n                        addConnectivityListener();\n                    });\n            }\n\n            return promise.then(() => {\n                selectedChannel = getDefaultChannel(desiredChannelId, eanUrl);\n                return { channels, filters, sorts, filteredChannels, selectedFilter, selectedSort, selectedChannel };\n            });\n        }\n\n        function initLocation() {\n            return locationService.getLocation()\n                .then(loc => {\n                    location = loc;\n                    $rootScope.$on('LocationService:locationChanged', onLocationChanged);\n                });\n        }\n\n        function initParentalControls() {\n            return parentalControlsService.isParentalControlsDisabledForClient()\n                .then(disabled => {\n                    isPCDisabled = disabled;\n                    $rootScope.$on('ParentalControls:updated', onParentalControlsChanged);\n                });\n        }\n\n        function addConnectivityListener() {\n            $rootScope.$on('connectivityService:statusChanged', (event, isOnline) => {\n                if (isOnline) {\n                    whatsOn.now(selectedChannel)\n                    .then(assetOnNow => {\n                        if (!assetOnNow) {\n                            return;\n                        }\n\n                        forceUpdateLineup(assetOnNow, selectedChannel);\n\n                    });\n                }\n            });\n        }\n\n        function onLocationChanged(event, newLocation) {\n            if (newLocation === location) {\n                return;\n            }\n\n            location = newLocation;\n            // let filtersAllowed = loc.behindOwnModem || config.showPlayerChannelBrowserFiltersOutOfHome;\n            // this.player.showCategoryFilters(filtersAllowed);\n            channels.forEach(c =>\n                c.available = location.behindOwnModem || c.availableOutOfHome === true);\n\n            updateFilteredChannels();\n        }\n\n        function onParentalControlsChanged() {\n            parentalControlsService.isParentalControlsDisabledForClient()\n                .then(disabled => {\n                    isPCDisabled = disabled;\n                    updateLineup();\n                });\n        }\n\n        function onPlayerDestroyed() {\n            if (channelUpdateTimer) {\n                $timeout.cancel(channelUpdateTimer);\n                channelUpdateTimer = undefined;\n            }\n        }\n\n        function initChannels() {\n            whatsOn.lineup(); // Get the lineup downloading in parallel\n\n            let url = config.piHost + config.services.streamingChannels + '?viewParentallyBlocked=true';\n            return $http.get(url, {withCredentials: true})\n                .then(response => {\n                    // STVWEB-1868: Display Subscribed Only (Video/Internet Only) - Guide\n                    if (profileService.isIpOnlyEnabled()) {\n                        return response.data.channels.filter(chnl => chnl.subscribed !== false);\n                    }\n                    return response.data.channels;\n                })\n                .then(response => {\n                    replaceArrayContents(channels, response.map(augmentChannelData));\n                    return whatsOn.nowOrImminent(channels);\n                })\n                .then(assetsOnNow => {\n                    let promises = [];\n                    channels.forEach((c, i) => promises.push(setCurrentAsset(c, assetsOnNow[i])));\n                    return $q.all(promises);\n                })\n                .then(() => channels);\n        }\n\n        function augmentChannelData(channel) {\n            if (!channel.channels) {\n                channel.channels = [];\n            }\n            angular.extend(channel, {\n                channelId: channel.tmsId,\n                channelTitle: channel.networkName,\n                available: location.behindOwnModem || channel.availableOutOfHome === true,\n                localChannelNumber: (channel.channels.length > 0) ? channel.channels[0] : '',\n                localChannelNumbers: channel.channels,\n                callSign: channel.callSign,\n                hasLinkedVODAsset: false,\n                isParentallyBlocked: isPCDisabled ? false : channel.parentallyBlocked\n            });\n\n            return channel;\n        }\n\n        function setCurrentAsset(channel, asset) {\n            if (!asset) {\n                return $q.resolve(false);\n            }\n\n            return asset.isBlocked.then(blocked => {\n                let newData = {\n                    channelTitle: asset.isOnNow ? asset.title : `On Next: ${asset.title}`,\n                    episodeTitle: asset.episodeTitle || '',\n                    hasLinkedVODAsset: !!asset.vodProviderAssetId,\n                    isParentallyBlocked: blocked,\n                    networkLogoUri: asset.networkImage({height: 60})\n                };\n\n                let isNew = false;\n                for (let key in newData) {\n                    if (newData.hasOwnProperty(key) && newData[key] !== channel[key]) {\n                        isNew = true;\n                        break;\n                    }\n                }\n\n                if (isNew) {\n                    angular.extend(channel, newData);\n\n                    channel.asset = asset;\n                }\n\n                return isNew;\n            });\n        }\n\n        function getDefaultChannel(desiredChannelId, eanUrl) {\n            let channel;\n            // If ean was specified, use it.\n            if (eanUrl) {\n                return addDummyEANChannel(eanUrl);\n            }\n\n            // Otherwise, if a channel was specified, use it\n            if (desiredChannelId !== undefined) {\n                channel = channels.find(c => c.tmsId === desiredChannelId);\n                if (channel) {\n                    return channel;\n                }\n            }\n\n            let compareFn = profileService.isSpecU() ?\n            (a,b) => {\n                return (a.available && (a.ncsServiceId === b));\n            } :\n            // We must compare the recent channel list from localChannelNumbers array.\n            (a,b) => {\n                return (a.available && (a.localChannelNumbers.indexOf(b) > -1));\n            };\n\n            // This will only return the channelNumber/ncsServiceId from recent list.\n            for (var i = 0; i < recent.length; i++) {\n                channel = channels.find(c => compareFn(c, recent[i]));\n                if (channel && angular.isNumber(channel.localChannelNumber) &&\n                    channel.localChannelNumber !== recent[i]) {\n                    // If a localChannelNumber is not found\n                    // compare recent from the list of duplicate channels\n                    channel = filteredChannels.find(c => {\n                        return c.available && c.localChannelNumber === recent[i];\n                    });\n                }\n                if (channel) {\n                    return channel;\n                }\n            }\n\n            // Failing that, find any available channel\n            return channel || channels.find(c => c.available);\n        }\n\n\n        /**\n         * Initializes filers.\n         * Preconditions: channels and recent must have been initialized\n         * @return {[type]} [description]\n         */\n        function initFilters(desiredChannelId) {\n            let f = [\n                ALL_CHANNELS_FILTER,\n                RECENT_HISTORY_FILTER,\n                {\n                    name: 'TV Shows',\n                    filter: 'TV Shows'\n                },\n                {\n                    name: 'Movies',\n                    filter: 'Movies'\n                },\n                {\n                    name: 'Sports',\n                    filter: 'Sports'\n                },\n                {\n                    name: 'Broadcasters',\n                    filter: 'Broadcasters'\n                },\n                {\n                    name: 'Kids',\n                    filter: 'Kids'\n                },\n                {\n                    name: 'News',\n                    filter: 'News'\n                },\n                {\n                    name: 'Life & Style',\n                    filter: 'Life & Style'\n                },\n                {\n                    name: 'Music',\n                    filter: 'Music'\n                },\n                {\n                    name: 'Latino',\n                    filter: 'Latino'\n                }\n            ];\n\n            // STVWEB-1070: SPECU OVP: Remove \"Premiums\" from mini-guide filter list\n            if (!profileService.isSpecU()) {\n                f.splice(6, 0, {\n                    name: 'Premiums',\n                    filter: 'Premiums'\n                });\n            }\n\n            if (recent.length === 0) {\n                f.splice(1, 1);\n            }\n\n            replaceArrayContents(filters, countFilters(f));\n            selectedFilter = getDefaultFilter(desiredChannelId);\n            return filters;\n        }\n\n        function getDefaultFilter(desiredChannelId) {\n            let filtersAllowed = location.behindOwnModem || config.showPlayerChannelBrowserFiltersOutOfHome;\n            if (filtersAllowed && desiredChannelId === undefined) {\n                let previousFilter = ovpStorage.getItem(storageKeys.lastViewedChannelFilter);\n                if (previousFilter && (previousFilter.filter !== RECENT_HISTORY_FILTER.filter || recent.length !== 0)) {\n                    return filters.find(f => f.filter === previousFilter.filter);\n                }\n            }\n\n            return ALL_CHANNELS_FILTER;\n        }\n\n        function initSort() {\n            // Spec U has no channel numbers, so A to Z is the only sort that will work\n            if (profileService.isSpecU()) {\n                selectedSort = AZ_SORT;\n                return;\n            }\n\n            replaceArrayContents(sorts, [AZ_SORT, CHANNEL_NUMBER_SORT]);\n\n            let id = ovpStorage.getItem(storageKeys.channelsSortByType) ||\n                config.playerChannelBrowserDefaultSortByType;\n            selectedSort = sorts.find(s => s.id === id);\n        }\n\n        /**\n         * Initializes filtered channels\n         * Preconditions: channels, filters, and sort must all have been initialized\n         * @return {[type]} [description]\n         */\n        function initFilteredChannels() {\n            updateFilteredChannels();\n            return filteredChannels;\n        }\n\n        function updateFilteredChannels() {\n            let result = sortAndFilter({channels, selectedFilter, selectedSort});\n            replaceArrayContents(filteredChannels, result);\n        }\n\n        function sortAndFilter({channels, selectedFilter, selectedSort}) {\n            let result;\n            if (selectedFilter.filter === RECENT_HISTORY_FILTER.filter) {\n                if (profileService.isSpecU()) {\n                    result = channels.filter(c => recent.indexOf(c.ncsServiceId) > -1)\n                    .sort((a, b) => recent.indexOf(a.ncsServiceId) - recent.indexOf(b.ncsServiceId));\n                } else {\n                    result = channels.filter(c => recent.indexOf(c.localChannelNumber) > -1)\n                        .sort((a, b) => recent.indexOf(a.localChannelNumber) - recent.indexOf(b.localChannelNumber));\n                }\n            } else if (selectedFilter.filter === ALL_CHANNELS_FILTER.filter) {\n                result = channels.slice();\n            } else {\n                // Genre filter\n                result = channels.filter(c =>\n                    getGenresForChannel(c).indexOf(selectedFilter.filter) > -1);\n            }\n\n\n            if (selectedFilter !== RECENT_HISTORY_FILTER) {\n                if (selectedSort === CHANNEL_NUMBER_SORT) {\n                    // Create duplicates in order to display channels with multiple channel numbers\n                    let duplicates = [];\n                    result.forEach(channel => {\n                        channel.localChannelNumbers.forEach(num => {\n                            if (num !== channel.localChannelNumber) {\n                                duplicates.push(angular.extend({}, channel, {localChannelNumber: num}));\n                            }\n                        });\n                    });\n                    result.push(...duplicates);\n                    result = result.sort((a, b) => a.localChannelNumber - b.localChannelNumber);\n                } else if (selectedSort === AZ_SORT) {\n                    result = result.sort((a, b) => a.networkName < b.networkName ? -1 : 1);\n                }\n            }\n\n            let available = [], unavailable = [];\n            result.forEach(c => {\n                let arr = c.available ? available : unavailable;\n                arr.push(c);\n            });\n\n            return available.concat(...unavailable);\n        }\n\n        function updateLineup() {\n            if (channels.length > 0) {\n                return whatsOn.nowOrImminent(channels)\n                    .then(assetsOnNow => {\n                        channels.forEach((chan, i) => setCurrentAsset(chan, assetsOnNow[i]));\n                        countFilters(filters);\n                    });\n            } else {\n                return $q.resolve();\n            }\n        }\n\n        function countFilters(filters) {\n            let counts = {};\n            channels.forEach(c => {\n                getGenresForChannel(c)\n                    .forEach(g => {\n                        let count = (selectedSort === CHANNEL_NUMBER_SORT) ? c.localChannelNumbers.length : 1;\n                        if (g in counts) {\n                            counts[g] += count;\n                        } else {\n                            counts[g] = count;\n                        }\n                    });\n            });\n\n            filters.filter(f => f !== ALL_CHANNELS_FILTER && f !== RECENT_HISTORY_FILTER)\n                .forEach(f => f.channelCount = counts[f.filter] || 0);\n\n            return filters;\n        }\n\n        function getGenresForChannel(channel) {\n            let genres = [];\n            if (angular.isArray(channel.genres)) {\n                genres = channel.genres;\n            } else {\n                if (channel.asset && angular.isArray(channel.asset.genres)) {\n                    genres = channel.asset.genres;\n                }\n            }\n\n            // Prefer to get Movie/tv show info from the type of asset rather than the genre information.\n            genres = genres.filter(g => ['TV Shows', 'Movies'].indexOf(g) < 0);\n\n            // Add 'TV Show' genre.\n            if (channel.asset && channel.asset.isEpisode) {\n                genres.push('TV Shows');\n            }\n\n            // Add 'Movie' genre.\n            if (channel.asset && channel.asset.isMovie) {\n                genres.push('Movies');\n            }\n\n            // Exlude Sports if it is a movie (VDIS-855)\n            let index = genres.findIndex(g => g === 'Sports');\n            if (index > -1 && channel.asset && channel.asset.isMovie) {\n                genres.splice(index, 1);\n            }\n\n            return genres;\n        }\n\n        function initRecent() {\n            let fromStorage = ovpStorage.getItem(storageKeys.recentHistory);\n            replaceArrayContents(recent, fromStorage || []);\n            return $q.resolve(recent);\n        }\n\n        function saveRecent(channel) {\n            if (isEANChannel(channel)) {\n                return; // Do not add EAN channel to history\n            }\n\n            let oldLength = recent.length,\n                channelKey = (profileService.isSpecU()) ?\n                    channel.ncsServiceId : channel.localChannelNumber;\n\n            if (recent.indexOf(channelKey) !== -1) {\n                recent.splice(recent.indexOf(channelKey), 1);\n            }\n            recent.unshift(channelKey);\n            recent.splice(maxRecentHistoryChannels);\n            ovpStorage.setItem(storageKeys.recentHistory, recent);\n\n            if (oldLength === 0 && recent.length === 1) {\n                filters.splice(1, 0, RECENT_HISTORY_FILTER);\n            }\n        }\n\n        function setSelectedFilter(filter) {\n            selectedFilter = filter;\n            ovpStorage.setItem(storageKeys.lastViewedChannelFilter, selectedFilter);\n            updateFilteredChannels();\n        }\n\n        function setSelectedSort(sort) {\n            selectedSort = sort;\n            ovpStorage.setItem(storageKeys.channelsSortByType, selectedSort.id);\n            countFilters(filters);\n            updateFilteredChannels();\n        }\n\n        function setSelectedChannel(channel) {\n            selectedChannel = channel;\n            saveRecent(channel);\n            startChannelUpdateTimer(channel);\n        }\n\n        function getDummyEANChannel(eanUrl) {\n            return augmentChannelData({\n                asset: {\n                    title: 'Emergency Alert',\n                    isEpisodic: false\n                },\n                ncsServiceId: '',\n                tmsId: '',\n                networkName: 'Emergency Alert',\n                networkId: '',\n                callSign: '',\n                streamUri: '',\n                logoUrl: '',\n                genres: [],\n                availableOutOfHome: false,\n                favorite: false,\n                cdvrRecordable: false,\n                blockEas: false,\n                hd: false,\n                channels: [config.eanChannelNumber],\n                streams: [{\n                    type: 'hls',\n                    drm: false,\n                    dai: false,\n                    uri: '',\n                    cdnUrl: eanUrl\n                }],\n                parentallyBlocked: false\n            });\n        }\n\n        function addDummyEANChannel(eanUrl) {\n            let chan = channels.find(isEANChannel);\n            if (!chan) {\n                chan = getDummyEANChannel(eanUrl);\n                channels.push(chan);\n                filteredChannels.push(chan);\n            }\n            return chan;\n        }\n\n        function removeDummyEANChannel() {\n            let index = channels.findIndex(isEANChannel);\n            if (index >= 0) {\n                channels.splice(index, 1);\n            }\n            index = filteredChannels.findIndex(isEANChannel);\n            if (index >= 0) {\n                filteredChannels.splice(index, 1);\n            }\n        }\n\n        function isEANChannel(channel) {\n            return channel.localChannelNumber === config.eanChannelNumber;\n        }\n\n        function startLineupUpdateInterval() {\n            const channelDisplayInterval = parseInt(config.intervalForChannelBrowserUpdateInMinutes) * 60 * 1000;\n            lineupUpdateInterval = $interval(updateLineup, channelDisplayInterval);\n        }\n\n        function startChannelUpdateTimer(channel) {\n            if (isEANChannel(channel)) {\n                return;\n            }\n            whatsOn.now(channel)\n            .then(assetOnNow => {\n                if (channelUpdateTimer) {\n                    $timeout.cancel(channelUpdateTimer);\n                }\n\n                if (!assetOnNow) {\n                    // Data is missing, so unfortunately we can't tell when an update would be needed.\n                    // As a result, Info panel will be blank and blocking won't be enforced locally.\n                    return;\n                }\n\n                let asset = assetOnNow;\n                let endTimeMsec = asset.scheduledEndTimeSec * 1000;\n                let delay = endTimeMsec - Date.now();\n\n                channelUpdateTimer = $timeout(() => {\n                    channelUpdateTimer = undefined;\n                    forceUpdateLineup(asset, selectedChannel);\n                }, delay);\n            });\n        }\n\n        function forceUpdateLineup(asset, selectedChannel) {\n            let wasBlocked = asset.isBlocked;\n            updateLineup()\n                .then(() => {\n                    $rootScope.$broadcast('player:assetSelected', selectedChannel.asset);\n                    startChannelUpdateTimer(selectedChannel);\n                    let isBlocked = selectedChannel.asset ? selectedChannel.asset.isBlocked : $q.resolve(false);\n                    return $q.all([isBlocked, wasBlocked]);\n                })\n                .then(([is, was]) => {\n                    if (is !== was) {\n                        // Notify the miniguide of the change, so it can play or block as as necessary\n                        $rootScope.$broadcast('player:blockChanged', is);\n                    }\n                });\n        }\n\n        function replaceArrayContents(arrayRef, newContents) {\n            arrayRef.splice(0, arrayRef.length, ...newContents);\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}