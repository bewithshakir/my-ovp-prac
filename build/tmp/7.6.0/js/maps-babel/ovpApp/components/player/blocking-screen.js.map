{"version":3,"sources":["ovpApp/components/player/blocking-screen.js"],"names":[],"mappings":"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","file":"ovpApp/components/player/blocking-screen.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n    * blockingScreen\n    *\n    * Example Usage:\n    * <blocking-screen player=\"$ctrl.player\" fullscreen=\"$ctrl.isVodMode()\" asset=\"$ctrl.asset\"></blocking-screen>\n    *\n    * Bindings:\n    *    player: ([type]) the video player object\n    *    fullscreen: ([type]) whether or not to take up the full area of the player. If false, a strip is left at the\n    *        bottom for the controls\n    *    asset: ([type]) the program to display information about\n    */\n    angular.module('ovpApp.player.blockingScreen', [\n        'rx',\n        'ovpApp.parentalControlsDialog'\n    ])\n    .factory('blockingScreenService', blockingScreenService)\n    .component('blockingScreen', {\n        bindings: {\n            player: '<',\n            fullscreen: '<',\n            asset: '<'\n        },\n        templateUrl: '/js/ovpApp/components/player/blocking-screen.html',\n        controller: class BlockingScreen {\n            /* @ngInject */\n            constructor($scope, $rootScope, $controller,\n                $timeout, $document, $location, blockingScreenService, parentalControlsDialog,\n                parentalControlsContext) {\n                angular.extend(this, {$scope, $rootScope, $controller,\n                    $timeout, $document, $location, blockingScreenService, parentalControlsDialog,\n                    parentalControlsContext});\n            }\n\n            $onInit() {\n                this.visible = false;\n\n                this.stateSubscription = this.blockingScreenService.getSource()\n                .subscribe(state => {\n                    this.visible = state.visible;\n                    if (this.visible) {\n                        try {\n                            this.player.stop();\n                        } catch (ex) {}\n                        this.blockType = state.type;\n                        this.url = this.$location.$$host;\n                    }\n                });\n\n                this.focusListener = this.$rootScope.$on(\n                    'player:focusUnblock',\n                    () => this.focusUnblock());\n            }\n\n            $onDestroy() {\n                this.focusListener();\n                this.stateSubscription.dispose();\n            }\n\n            focusUnblock() {\n                this.$timeout(() => {\n                    this.$document[0].getElementById('unblock-parental-controls-button').focus();\n                }, 0, false);\n            }\n\n            unblockOnKeyDown($event) {\n                const keys = {enter: 13, space: 32};\n                if ([keys.space, keys.enter].indexOf($event.keyCode) > -1) {\n                    this.unlockParentalControls();\n                }\n            }\n\n            unlockParentalControls() {\n                this.parentalControlsDialog\n                    .withContext(this.parentalControlsContext.PLAYBACK)\n                    .unlock()\n                    .then(() => {\n                        this.$rootScope.$broadcast('player:parentalControlsUnblocked');\n                    });\n            }\n\n            onClick($event) {\n                if ($event.target.className.indexOf('base-button') > -1) {\n                    return;\n                }\n                this.$rootScope.$broadcast('player-control:click');\n            }\n        }\n    });\n\n    /**\n    * Tracks and modifies the state of the blocking screen\n    */\n    /* @ngInject */\n    function blockingScreenService(rx) {\n        const state = new rx.BehaviorSubject({visible: false});\n        const service = {\n            show,\n            hide,\n            getSource\n        };\n\n        return service;\n\n        ///////////\n\n        /**\n        * Display the blocking screen\n        * @param  {object} options\n        * @param  {string} options.type either 'adBlocker' or 'parentalControls'\n        */\n        function show(options = {}) {\n            options.visible = true;\n            state.onNext(options);\n        }\n\n        function hide() {\n            state.onNext({visible: false});\n        }\n\n        function getSource() {\n            return state\n            .asObservable()\n            .distinctUntilChanged();\n        }\n    }\n})();\n"],"sourceRoot":"/source/"}