{"version":3,"sources":["ovpApp/config/config-service.js"],"names":[],"mappings":"AAAA;AACA;;AAAA,CAAC,YAAY;IACT;IACA,QAAQ,OAAO,iBACV,SAAS,wBAAwB;QAC9B,wBAAwB;OAE3B,SAAS,UAAU;;IAExB,SAAS,iBAAiB;QACtB,IAAI,gBAAgB,OAAO;;;QAG3B,KAAK,MAAM,YAAY;YACnB,OAAO;;;;QAIX,KAAK,qBAAO,UAAU,WAAW;;YAE7B,IAAI,CAAC,cAAc,0BAA0B;gBACzC,cAAc,2BAA2B,YAAY;oBACjD,IAAI,QAAQ,UAAU,IAAI;;oBAE1B,IAAI,MAAM,cAAc,SAAS,cAAc,SAAS;oBACxD,IAAI,aAAa;wBACb,YAAgB;wBAChB,QAAgB,cAAc,MAAM;wBACpC,UAAgB,cAAc,SAAS;wBACvC,YAAgB,cAAc;wBAC9B,YAAgB,cAAc;wBAC9B,WAAgB,cAAc;;;oBAGlC,OAAO,MAAM;wBACT,QAAQ;wBACR,KAAK;wBACL,MAAM;wBACN,iBAAiB;wBACjB,eAAe;uBAChB,KAAK,UAAA,QAAU;wBACd,IAAI,UAAU,OAAO,MAAM;4BACvB,IAAI,SAAS,OAAO,KAAK;4BACzB,IAAI,CAAC,QAAQ;gCACT,SAAS;;4BAEb,cAAc,iBAAiB;;wBAEnC,OAAO;;;;;YAKnB,OAAO;;;;KAId","file":"ovpApp/config/config-service.js","sourcesContent":["/* globals window */\n(function () {\n    'use strict';\n    angular.module('ovpApp.config')\n        .constant('environmentConstants', {\n            ENVIRONMENT_PRODUCTION: 'prod'\n        })\n        .provider('config', ConfigProvider);\n\n    function ConfigProvider() {\n        var currentConfig = window.currentConfig;\n\n        //Used in the twctv-ui-router to get the current name\n        this.get = function () {\n            return currentConfig;\n        };\n\n        /* @ngInject */\n        this.$get = function ($injector) {\n            //Append this function to the config once we have instantiated the rest of the services\n            if (!currentConfig.fetchAuthenticatedConfig) {\n                currentConfig.fetchAuthenticatedConfig = function () {\n                    let $http = $injector.get('$http');\n\n                    let url = currentConfig.piHost + currentConfig.services.configAuth;\n                    let configData = {\n                        clientType:     'ONEAPP-OVP',\n                        apiKey:         currentConfig.oAuth.consumerKey,\n                        deviceId:       currentConfig.deviceId.toUpperCase(),\n                        appVersion:     currentConfig.majorMinorVersion,\n                        deviceType:     currentConfig.deviceType,\n                        osVersion:      currentConfig.osVersion\n                    };\n\n                    return $http({\n                        method: 'POST',\n                        url: url,\n                        data: configData,\n                        withCredentials: true,\n                        bypassRefresh: true\n                    }).then(result => {\n                        if (result && result.data) {\n                            let config = result.data.config;\n                            if (!config) {\n                                config = {};\n                            }\n                            currentConfig.installOverrides(config);\n                        }\n                        return currentConfig;\n                    });\n                };\n            }\n\n            return currentConfig;\n        };\n\n    }\n}());\n"],"sourceRoot":"/source/"}