{"version":3,"sources":["ovpApp/product/episode-list/product-episode-list.js"],"names":[],"mappings":"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","file":"ovpApp/product/episode-list/product-episode-list.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.product.episodes', [\n        'ovpApp.dataDelegate',\n        'ovpApp.services.dateFormat',\n        'ovpApp.product.productActionService'\n    ])\n    .component('productEpisodeList', {\n        bindings: {\n            fetcher: '<',\n            series: '<',\n            cameFromWatchLater: '<',\n            app: '@',\n            tmsProgramId: '<'\n        },\n        templateUrl: '/js/ovpApp/product/episode-list/product-episode-list.html',\n        controller: class ProductEpisodeList {\n            constructor($element, $document, $scope, $rootScope, productService, $filter,\n                CDVR_STATE, actionTypeMap, $q, dateFormat) {\n                angular.extend(this, {$element, $document, $scope, $rootScope, productService, $filter,\n                    CDVR_STATE, actionTypeMap, $q, dateFormat});\n            }\n\n            $onInit() {\n                this.$scope.$on('update-dvr', () => this.actionExecuting());\n                this.focusAction = false;\n                this.$scope.$on('product:update-started', (event, asset) => {\n                    this.focusAction = asset.isSeries === true ? false : true;\n                });\n            }\n\n            $onChanges(changes) {\n                if (changes.series) {\n                    this.onSeriesChanged();\n                }\n            }\n\n            $postLink() {\n                const keys = {left: 37, up: 38, right: 39, down: 40, tab: 9};\n\n                let episodeContainer = this.$element.find('#episode-container');\n                let details = this.$element.find('#episode-details');\n\n                episodeContainer.on('keydown', (event) => {\n                    if (event.keyCode == keys.right || event.keyCode == keys.down) {\n                        let buttons = details.find('[selectable]');\n                        if (buttons.length > 0) {\n                            buttons[0].focus();\n                        }\n                        event.preventDefault();\n                    }\n                });\n\n                details.on('keydown', (event) => {\n                    if (event.keyCode == keys.left || event.keyCode == keys.up) {\n                        focus(-1);\n                        event.preventDefault();\n                    } else if (event.keyCode == keys.right || event.keyCode == keys.down) {\n                        focus(1);\n                        event.preventDefault();\n                    } else if (event.keyCode == keys.tab) {\n                        this.$element.find('.list-item-episode.active').focus();\n                        // Deliberately allow event to continue, so that the focus will move\n                        // to the next (or previous) episode\n                    }\n                });\n\n                this.unregister = () => {\n                    episodeContainer.off();\n                    details.off();\n                };\n\n                const self = this;\n                function focus(increment) {\n                    let buttons = details.find('[selectable]');\n                    let current = self.$document[0].activeElement;\n                    let i;\n                    for (i = 0; i < buttons.length; i++) {\n                        if (buttons[i] == current) {\n                            break;\n                        }\n                    }\n\n                    let button = buttons[i + increment];\n                    if (button) {\n                        button.focus();\n                    }\n                }\n            }\n\n            $onDestroy() {\n                this.unregister();\n            }\n\n            actionExecuting() {\n                if (this.fetcher) {\n                    const waitForFresh = true;\n                    this.$q.when(this.fetcher(waitForFresh))\n                        .then(asset => {\n                            this.series = asset;\n                            this.onSeriesChanged();\n                        });\n                }\n            }\n\n            onSeriesChanged() {\n                this.extractBonusContent();\n                this.pickElevatedEpisode();\n                this.selectDefaultEpisode();\n                this.assignElementIndices();\n            }\n\n            /**\n             * Assign numeric index to each episode for analytics purposes.\n             */\n            assignElementIndices() {\n                // Analytics: Assign numeric index to each episode.\n                let elementIndex = 0;\n\n                // Reserve first elementIndex to the elevated episode, if one exists.\n                if (this.elevated && this.elevated.episode) {\n                    this.elevated.episode.elementIndex = elementIndex++;\n                }\n\n                if (this.series && this.series.seasons) {\n                    this.series.seasons\n                        .filter(season => season.episodes)\n                        .forEach((season) => {\n                            season.episodes\n                                .forEach((episode) => episode.elementIndex = elementIndex++);\n                        });\n                }\n            }\n\n            extractBonusContent() {\n                if (!this.series || !this.series.seasons) {\n                    return;\n                }\n\n                let normalSeasons = this.series.seasons.filter(season => season.name !== 'Other');\n                let otherSeason = this.series.seasons.find(season => season.name === 'Other');\n                let previewEpisodes = otherSeason ? otherSeason.episodes\n                    .filter(episode => episode.isPreview) : [];\n                let nonPreviewEpisodes = otherSeason ? otherSeason.episodes\n                    .filter(episode => !episode.isPreview) : [];\n\n                this.seasons = normalSeasons;\n                if (nonPreviewEpisodes.length > 0) {\n                    this.seasons.push({\n                        name: 'Other episodes',\n                        episodes: nonPreviewEpisodes\n                    });\n                }\n\n                if (previewEpisodes.length > 0) {\n                    this.seasons.push({\n                        name: 'Clips and more',\n                        episodes: previewEpisodes\n                    });\n                }\n            }\n\n            pickElevatedEpisode() {\n                if (this.app === 'livetv') {\n                    this.elevated = this.byLiveNow();\n                } else if (this.app === 'ondemand') {\n                    this.elevated = this.byBookmark();\n                } else if (this.app === 'watchLater') {\n                    this.elevated = this.byBookmark();\n                } else if (this.app === 'rdvr' || this.app === 'cdvr') {\n                    this.elevated = this.bySpecifiedEpisode() || this.byRecentlyRecorded();\n                } else if (this.app === 'search') {\n                    this.elevated = this.byLiveNow() || this.byBookmark();\n                } else if (this.app === 'guide') {\n                    this.elevated = this.bySpecifiedEpisode();\n                }\n            }\n\n            bySpecifiedEpisode() {\n                let candidate;\n                if (this.tmsProgramId) {\n                    this.seasons.forEach(season =>\n                        season.episodes.some(episode => {\n                            if (episode.tmsProgramIds.indexOf(this.tmsProgramId) > -1) {\n                                candidate = episode;\n                                return true;\n                            }\n                            return false;\n                        })\n                    );\n                }\n\n                if (candidate) {\n                    let description;\n                    if (candidate.isOnNow) {\n                        description = 'Currently airing live';\n                    } else {\n                        let stream = candidate.nextLinearStream;\n                        if (stream) {\n                            description = this.dateFormat.absolute.atTime(\n                                parseInt(stream.streamProperties.startTime));\n                        } else {\n                            description = 'Upcoming';\n                        }\n                    }\n                    return {\n                        description: description,\n                        episode: angular.copy(candidate)\n                    };\n                }\n            }\n\n            byBookmark() {\n                let mostRecent;\n                this.seasons.forEach(season =>\n                    season.episodes.forEach(episode => {\n                        let bm = episode.bookmark;\n                        if (bm && (!mostRecent ||\n                            bm.lastWatchedUtcSeconds >= mostRecent.bookmark.lastWatchedUtcSeconds)) {\n                            mostRecent = episode;\n                        }\n                    }));\n\n                if (mostRecent) {\n                    if (mostRecent.bookmark.complete ||\n                        mostRecent.bookmark.playMarkerSeconds >= mostRecent.bookmark.runtimeSeconds) {\n                        // Find next episode if able\n                        let nextEpisode = this.findNextEpisode(mostRecent, this.seasons);\n                        if (nextEpisode) {\n                            return {\n                                description: `You finished Episode ${mostRecent.episodeNumber}`,\n                                episode: angular.copy(nextEpisode)\n                            };\n                        }\n                    } else {\n                        return {\n                            description: 'You were watching',\n                            episode: angular.copy(mostRecent)\n                        };\n                    }\n                }\n\n                let latest = this.findLatestEpisode(this.seasons);\n                if (latest) {\n                    return {\n                        description: 'Watch the latest episode',\n                        episode: angular.copy(latest)\n                    };\n                }\n            }\n\n            selectDefaultEpisode() {\n                //If programId (or an existing selectedEpisode) is selected select it instead of the first episode\n                this._previousSelected = this.selectedEpisode;\n                this.selectedEpisode = null;\n                if (this.tmsProgramId || this._previousSelected) {\n                    let programIds = [];\n\n                    if (this._previousSelected) {\n                        programIds = this._previousSelected.tmsProgramIds;\n                    } else {\n                        programIds.push(this.tmsProgramId);\n                    }\n\n                    const matchingId = episode => {\n                        return episode.tmsProgramIds.some(progId => {\n                            let comp = (programIds.indexOf(progId) >= 0);\n                            return comp;\n                        });\n                    };\n\n                    if (this.elevated && matchingId(this.elevated.episode)) {\n                        this.selectedEpisode = this.elevated.episode;\n                    } else {\n                        this.seasons.some(season => {\n                            let selectedEpisode = season.episodes.find(matchingId);\n                            if (selectedEpisode) {\n                                this.selectedEpisode = selectedEpisode;\n                                if (this.focusAction && this.selectedEpisode.actions) {\n                                    this.focusAction = false;\n                                    this.selectedEpisode.actions[0].focus = true;\n                                }\n                                this.selectedEpisode.isSeriesRecording = this.series.isSeriesRecording;\n                                return true;\n                            }\n                        });\n                    }\n                }\n\n                if (!this.selectedEpisode && this.elevated) {\n                    this.selectedEpisode = this.elevated.episode;\n                }\n\n                if (!this.selectedEpisode && this.seasons && this.seasons[0] && this.seasons[0].episodes) {\n                    this.selectedEpisode = this.seasons[0].episodes[0];\n                }\n            }\n\n            selectEpisode(episode) {\n                // Analytics (Only publish if episode has changed)\n                if (this.selectedEpisode !== episode) {\n                    this.$rootScope.$emit('Analytics:selectContent', {\n                        asset: episode,\n                        elementIndex: episode.elementIndex,\n                        operationType: 'episodeSelection',\n                        pageSectionName: 'episodeListArea',\n                        pageSubSectionName: 'episodeConversionArea'\n                    });\n                }\n                this.selectedEpisode = episode;\n            }\n\n            findNextEpisode(episode, seasons) {\n                let nextEpisode;\n                let currentSeason = seasons.find(s => s.number === episode.seasonNumber);\n\n                if (currentSeason) {\n                    nextEpisode = this.findNext(currentSeason.episodes, episode, e => e.episodeNumber);\n\n                    if (!nextEpisode) {\n                        let nextSeason = this.findNext(seasons, currentSeason, s => s.number);\n                        if (nextSeason) {\n                            nextEpisode = this.findNext(\n                                nextSeason.episodes,\n                                {episodeNumber: -1},\n                                e => e.episodeNumber\n                            );\n                        }\n                    }\n                }\n\n                return nextEpisode;\n            }\n\n            /**\n             * Finds an element that is \"greater\" than a comparison element. If multiple exist, the element that is\n             *   the \"smallest\" while still being \"greater\" than the comparison element is chosen. If no elements\n             *   are greater, undefined is returned.\n             *\n             * Example:\n             * let arr = [{id: 1}, {id: 0}, {id: 5}, {id: 3}, {id: 4}];\n             * let next = findNext(arr, arr[0], element => element.id);\n             * // at this point next = {id: 3}\n             *\n             * @param  {array} arr             array to search through\n             * @param  {object} start          the base element to compare against.\n             * @param  {function} criterionFxn function to convert an element into a numeric score\n             * @return {object}                the element with the smallest score greater than the starting score\n             */\n            findNext(arr, start, criterionFxn) {\n                let critStart = criterionFxn(start);\n                return arr.reduce((prev, curr) => {\n                    if (criterionFxn(curr) > critStart &&\n                        (!prev || criterionFxn(prev) > criterionFxn(curr))) {\n                        return curr;\n                    }\n                    return prev;\n                }, undefined);\n            }\n\n            findLatestEpisode(seasons) {\n                let latestByAirDate;\n                let latestByEpisodeNumber;\n\n                function isHigherEpNum(a, b) {\n                    return a.seasonNumber > b.seasonNumber ||\n                        (a.seasonNumber === b.seasonNumber && a.episodeNumber > b.episodeNumber);\n                }\n\n                seasons.forEach(s =>\n                    s.episodes.forEach(e => {\n                        if (e.originalAirDate &&\n                            (!latestByAirDate || e.originalAirDate > latestByAirDate.originalAirDate)) {\n                            latestByAirDate = e;\n                        }\n                        if (e.seasonNumber && e.episodeNumber &&\n                            (!latestByEpisodeNumber || isHigherEpNum(e, latestByEpisodeNumber))) {\n                            latestByEpisodeNumber = e;\n                        }\n                    }));\n\n                return latestByEpisodeNumber || latestByAirDate;\n            }\n\n            byLiveNow() {\n                let candidate;\n                this.seasons.some(season =>\n                    season.episodes.find(episode => {\n                        if (episode.isOnNow) {\n                            candidate = episode;\n                            return true;\n                        }\n                    }));\n\n                return candidate && {\n                    description: 'Currently airing live',\n                    episode: angular.copy(candidate)\n                };\n            }\n\n            byRecentlyRecorded() {\n                let recorded = [];\n                this.seasons.forEach(season =>\n                    recorded.push(...season.episodes.filter(this.hasRecordedStream)));\n\n                let mostRecent = recorded.sort(this.sortByMostRecentlyRecorded)[0];\n                if (mostRecent) {\n                    let stream = mostRecent.streamList.find(stream => stream.isCDVRRecorded);\n                    let seasonName = '';\n                    if (stream.cdvrState === this.CDVR_STATE.IN_PROGRESS) {\n                        seasonName = 'Currently recording';\n                    } else {\n                        seasonName = 'You\\'ve recorded';\n                    }\n\n                    return {\n                        description: seasonName,\n                        episode: angular.copy(mostRecent)\n                    };\n                }\n            }\n\n            hasRecordedStream(episode) {\n                return episode.streamList.some(stream => stream.isCDVRRecorded);\n            }\n\n            sortByMostRecentlyRecorded(a, b) {\n                let aEnd = a.streamList.find(stream => stream.isCDVRRecorded).cdvrRecording.stopTimeSec;\n                let bEnd = b.streamList.find(stream => stream.isCDVRRecorded).cdvrRecording.stopTimeSec;\n                return bEnd - aEnd;\n            }\n\n            availabilityMessage(episode) {\n                return this.productService.availabilityMessage(episode, this.cameFromWatchLater);\n            }\n\n            originalAirDateMessage() {\n                return this.selectedEpisode &&\n                    `Original airdate ${this.$filter('date')(this.selectedEpisode.originalAirDate)}`;\n            }\n        }\n    });\n})();\n"],"sourceRoot":"/source/"}