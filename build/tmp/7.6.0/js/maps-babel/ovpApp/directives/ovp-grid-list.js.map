{"version":3,"sources":["ovpApp/directives/ovp-grid-list.js"],"names":[],"mappings":"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","file":"ovpApp/directives/ovp-grid-list.js","sourcesContent":["/**\n * ovpGridList\n *\n * Lays out a grid of items and a list of items. Optionally includes a grid list toggle, or one can be\n * supplied elsewhere on the page and paired up by using the same id.\n *\n * example usage:\n *\n * <ovp-grid-list items=\"vm.someArray\" options=\"vm.someOptionsObject\">\n *    <grid-items>\n *       <div ng-repeat=\"asset in vm.someArray\">\n *          This content for {{asset.title}} will be visible in grid mode\n *       </div>\n *    </grid-items>\n *    <list-items>\n *       <div ng-repeat=\"asset in vm.someArray\">\n *          This content for {{asset.title}} will be visible in list mode\n *       </div>\n *    </list-items>\n * </ovp-grid-list>\n *\n * OR, with grid only:\n *\n * <ovp-grid-list items=\"vm.channels\" options=\"{gridOnly: true}\">\n *    <grid-items>\n *       <channel-card ng-repeat=\"channel in vm.channels\" channel=\"channel\"></channel-card>\n *    </grid-items>\n * </ovp-grid-list>\n *\n * OR, with external toggle:\n *\n * <grid-list-toggler id=\"'someUniqueString'\"></grid-list-toggler>\n * <ovp-grid-list items=\"vm.assets\" options=\"{showPagination: false, id: 'someUniqueString'}\">\n *   <grid-items>\n *      <ovp-product ng-repeat=\"asset in vm.assets\" asset=\"asset\"></ovp-product>\n *   </grid-items>\n *   <list-items>\n *      <ovp-product ng-repeat=\"asset in vm.assets\" asset=\"asset\" template='list'></ovp-product>\n *   </list-items>\n * </ovp-grid-list>\n *\n * Bindings:\n *    items: (array) the array of objects being rendered. Note that the same array must also be passed into\n *       the ng-repeat (or similar directive like dir-paginate).\n *    options: (object) options to modify the grid-list behavior (see below)\n *    onPageChanged: (function) callback to execute when the page changes. Useful for server side pagination\n *    onViewChanged: (function) callback for when the view changes (from grid to list and vice versa)\n *\n * Options:\n *    id: (string) an optional identifier to pair up a gridlist with a gridlist toggle. Used for saving\n *        state to local storage, and for differentiating multiple gridlists on a single page\n *    defaultState: (string) which mode to start in, either 'grid' or 'list'. Defaults to grid.\n *    useLocalStorage: (boolean) if true, the state will be saved to local storage using the specified id.\n *       A value loaded from local storage will trump the value set in the defaultState option.\n *\n *    showHeader: (boolean) if false, the header on top of the grid-list will be hidden. This means no\n *       title, total, pagination, grid/list toggle, nor filter will be visible, regardless of their\n *       settings. Defaults to true.\n *    title: (string) string to display in the header\n *    showTotal: (boolean) if true, the title will be appended with the count of the items. Defaults to false\n *    totalItems: (number) when server side pagination is being used, the number of items in the array would\n *       give the wrong count of items, so this will update the total in the title to the correct value. Not\n *       necessary if the items binding represents the full set of data.\n *    showToggle: (boolean) if true, the grid/list toggle will show if necessary. If false, toggle will be\n *       always hidden. Defaults to true\n *    showPagination (boolean) if true, pagination will show if necessary. If false, pagination will be\n *       always hidden. Defaults to true\n *    showFilter: (boolean) if true, a filter dropdown will be displayed. Defaults to false.\n *    filters: (array) array of filters. Each element of the array should look as follows\n *       {\n *          text: 'filtertext'\n *          clickCallback: function () {}  // optional\n *       }\n *    filterStartingIndex: (number) index to highlight in the filter list\n *\n *    listOnly: (boolean) if true, only the list view will be shown. This automatically overrides\n *       defaultState and showToggle.\n *    gridOnly: (boolean) if true, only the grid view will be shown. This automatically overrides\n *       defaultState and showToggle.\n *\n *    minimumGridItemSeparation (number) minimum number of pixels between grid items. The separation may be\n *       more depending on screen size, but will always be at least this much. defaults to 15\n *\n */\n(function () {\n    'use strict';\n    angular.module('ovpApp.directives.gridList', [\n        'ovpApp.directives.gridList.toggler',\n        'ovpApp.directives.gridList.togglerService',\n        'ovpApp.directives.dropdown',\n        'ovpApp.services.ovpStorage',\n        'angularUtils.directives.dirPagination',\n        'rx'])\n    .decorator('dirPaginationControlsDirective', dirPaginationControlsDirectiveDecorator)\n    .component('ovpGridList', {\n        bindings: {\n            items: '<',\n            options: '<',\n            onPageChanged: '&?',\n            onViewChanged: '&'\n        },\n        transclude: {\n            grid: '?gridItems',\n            list: '?listItems'\n        },\n        templateUrl: '/js/ovpApp/directives/ovp-grid-list.html',\n        controller: class OvpGridList {\n            /* @ngInject */\n            constructor($scope, $element, $timeout, gridListTogglerService, ovpStorage, $log, $window, $state) {\n                angular.extend(this, {$scope, $element, $timeout, gridListTogglerService, ovpStorage,\n                    $log, $window, $state});\n            }\n\n            $onInit() {\n                this.gridCalculationComplete = false;\n                angular.element(this.$window).on('resize', this.onResize.bind(this));\n                this.viewallPage = false;\n                if (this.$state.current.name.indexOf('viewall') !== -1) {\n                    this.viewallPage = true;\n                }\n            }\n\n            $onChanges(changes) {\n                if (changes.options) {\n                    this.applyDefaultOptions(changes.options.currentValue);\n                }\n                if (changes.items) {\n                    this.recalculateGrid();\n                }\n            }\n\n            $onDestroy() {\n                angular.element(this.$window).off('resize', this.onResize);\n                if (this.toggleSubscription) {\n                    this.toggleSubscription.dispose();\n                }\n            }\n\n            /////////////////\n\n            applyDefaultOptions(newOptions) {\n                const defaults = {\n                    title: '',\n                    defaultState: 'grid',\n                    showHeader: true,\n                    showToggle: true,\n                    showFilter: false,\n                    showPagination: true,\n                    showTotal: false,\n                    minimumGridItemSeparation: 15\n                };\n\n                this.options = angular.extend({}, defaults, newOptions);\n\n                this.chooseDefaultState();\n\n                if (this.options.listOnly || this.options.gridOnly) {\n                    this.options.showToggle = false;\n                }\n\n                if (!this.options.filters || this.options.filters.length === 0) {\n                    this.options.showFilter = false;\n                }\n\n                this.filterConfig = {\n                    activeIndex: this.options.filterStartingIndex,\n                    buttonLabel: 'Filter',\n                    showLabel: true,\n                    focusOnLoad: this.options.focusFilter\n                };\n            }\n\n            chooseDefaultState() {\n                let proposedState;\n                if (this.options.listOnly) {\n                    proposedState = 'list';\n                    this.state = proposedState;\n                } else if (this.options.gridOnly) {\n                    proposedState = 'grid';\n                    this.state = proposedState;\n                } else {\n                    let fromLocalStorage;\n                    if (this.options.useLocalStorage) {\n                        if (!this.options.id) {\n                            this.$log.warn('id not supplied; gridlist state can neither be loaded nor saved');\n                        } else {\n                            fromLocalStorage = this.ovpStorage.getItem(this.options.id);\n                        }\n                    }\n                    proposedState = fromLocalStorage || this.options.defaultState;\n                }\n\n                let registration = this.gridListTogglerService.register(proposedState, this.options.id);\n                if (!this.options.listOnly && !this.options.gridOnly) {\n                    this.state = registration.state;\n                    this.onViewChanged({view: registration.state});\n                    this.toggleSubscription = registration.source.subscribe((newState) => this.toggle(newState));\n                }\n            }\n\n            recalculateGrid() {\n                if (this.state !== 'grid') {\n                    return;\n                }\n\n                this.gridCalculationComplete = false;\n                this.$timeout(() => {\n                    this.measureItems();\n                    this.onResize();\n                });\n            }\n\n            measureItems() {\n                this.itemWidth = this.$element.find('grid-items').children().outerWidth(true);\n            }\n\n            onResize() {\n                if (this.state !== 'grid') {\n                    return;\n                }\n\n                let container = this.$element.find('.grid-container');\n                let children = container.children().children();\n                let itemWidthPlus = this.itemWidth + (this.options.minimumGridItemSeparation * 2);\n                let containerWidth = container.innerWidth();\n                let columns = Math.max(1, Math.floor(containerWidth / itemWidthPlus));\n                let padding = 0;\n\n                if (children.length <= columns) {\n                    padding = this.options.minimumGridItemSeparation;\n                } else {\n                    let extraSpace = containerWidth - (columns * this.itemWidth);\n                    padding = Math.floor(extraSpace / (columns * 2));\n                }\n\n                children.css('padding', '0 ' + padding + 'px');\n                this.gridCalculationComplete = true;\n\n                this.$scope.$apply();\n            }\n\n            toggle(newState) {\n                if (this.state != newState && !this.listOnly && !this.gridOnly) {\n                    this.state = newState;\n                    if (this.state == 'grid') {\n                        this.recalculateGrid();\n                    }\n\n                    if (this.options.useLocalStorage && this.options.id) {\n                        this.ovpStorage.setItem(this.options.id, newState);\n                    }\n\n                    this.onViewChanged({view: newState});\n                }\n            }\n\n            pageChanged(page) {\n                if (this.onPageChanged) {\n                    this.onPageChanged(page);\n                }\n                this.gridCalculationComplete = false;\n            }\n\n            hasPagination() {\n                return this.options.showPagination === true;\n            }\n        }\n    });\n\n    /* @ngInject */\n    function dirPaginationControlsDirectiveDecorator($delegate) {\n        let directive = $delegate[0];\n        let link = directive.link;\n        let focusedElement;\n\n        directive.compile = function () {\n            return function (scope, element, attrs) {\n                link.apply(this, arguments);\n                scope.position = attrs.position;\n                scope.focusedElement = focusedElement;\n                scope.setPosition = function (pageNumber, position) {\n                    focusedElement = position + pageNumber;\n                    scope.focusedElement = focusedElement;\n                };\n            };\n        };\n\n        return $delegate;\n    }\n})();\n"],"sourceRoot":"/source/"}