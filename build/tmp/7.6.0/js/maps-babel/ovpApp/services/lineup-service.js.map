{"version":3,"sources":["ovpApp/services/lineup-service.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;IACT;;;IAEA,QAAQ,OAAO,yBAAyB,CACpC,kBAEH,QAAQ,iBAAiB;;;IAG1B,SAAS,cAAc,OAAO,IAAI,QAAQ,YAAY;QAClD,IAAI,QAAK;YACL,UAAU;YACN,UAAA;YACA,WAAA;;;QAGR;QACA,OAAO;;;;QAIP,SAAS,WAAW;;QAIpB,SAAS,YAAY;YACjB,IAAI,CAAC,OAAO;gBACR,QAAQ,GAAG;gBACX,MAAM;oBACF,QAAQ;oBACR,KAAQ,OAAO,SAAM;oBACrB,iBAAiB;mBAEpB,KAAK,UAAA,UAAY;oBACd,WAAW,MAAM,kBAAkB,SAAS;oBAC5C,MAAM,QAAQ,SAAS;mBACxB,YAAM;oBACL,MAAM;oBACN,QAAQ;;;;YAIhB,OAAO,MAAM;;;KAGpB","file":"ovpApp/services/lineup-service.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular.module('ovpApp.service.lineup', [\n        'ovpApp.config'\n    ])\n    .service('lineupService', lineupService);\n\n    /* @ngInject */\n    function lineupService($http, $q, config, $rootScope) {\n        let defer,\n            service = {\n                activate,\n                getLineup\n            };\n\n        activate();\n        return service;\n\n        ///////////\n\n        function activate() {\n\n        }\n\n        function getLineup() {\n            if (!defer) {\n                defer = $q.defer();\n                $http({\n                    method: 'GET',\n                    url: `${config.piHost}/ipvs/api/smarttv/lineup/v1`,\n                    withCredentials: true\n                })\n                .then(response => {\n                    $rootScope.$emit('Session:lineup', response.data);\n                    defer.resolve(response.data);\n                }, () => {\n                    defer.reject();\n                    defer = null;\n                });\n            }\n\n            return defer.promise;\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}