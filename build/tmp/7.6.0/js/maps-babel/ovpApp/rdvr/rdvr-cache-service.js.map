{"version":3,"sources":["ovpApp/rdvr/rdvr-cache-service.js"],"names":[],"mappings":"AAAA;;AAAC,CAAA,YAAY;;kHACT;IACA,QAAQ,OAAO,4BAA4B,CACvC,+BACA,8BACA,4BAGH,QAAQ,oBAAoB;;;IAG7B,SAAS,iBAAiB,MAAM,iBAAiB,oBAAoB,YAAY,YAAY;QACzF,IAAI,WAAW;;QAEf,IAAI,UAAU;YACV,UAAA;YACA,gBAAA;YACA,aAAA;YACA,YAAA;;;QAGJ;;QAEA,OAAO;;;;QAIP,SAAS,WAAW;YAChB;YACA;;;;;;;;;QASJ,SAAS,OAAO;YACZ,IAAI;gBACA;gBACA;gBACA,eAAe,WAAW;;YAE9B,KAAK,KAAK,cAAc;gBACpB,IAAI,aAAa,eAAe,IAAI;oBAChC,cAAc;oBACd,IAAK,YAAY,QAAQ,UAAU,mBAAmB,aAAa,CAAC,KAC/D,YAAY,QAAQ,UAAU,mBAAmB,aAAa,CAAC,KAC/D,YAAY,QAAQ,UAAU,mBAAmB,mBAAmB,CAAC,KACrE,YAAY,QAAQ,UAAU,mBAAmB,cAAc,CAAC,GAAI;;wBAErE,QAAQ,oBAAoB;wBAC5B,IAAI,cAAc,CAAC,MAAM,aAAa,CAAC,MAAM,UAAU;wBACvD,IAAI,MAAM,YAAY,aAAa;4BAC/B,YAAY;+BACT;4BACH,SAAS,eAAe;;;;;;;QAQ5C,SAAS,YAAY;YACjB,WAAW,IAAI,4BAA4B,UAAU,OAAO,OAAO;gBAC/D,IAAI,OAAO;oBACP,YAAY;;;;;QAKxB,SAAS,oBAAoB,KAAK;YAC9B,IAAI,kBAAkB,WAAW,QAAQ;gBACrC;;YAEJ,IAAI,iBAAiB;gBACjB,QAAQ,IAAI;gBACZ,MAAM,YAAY;;YAEtB,OAAO;;;QAGX,SAAS,YAAY,iBAAiB;YAClC,IAAI,OAAO,gBAAgB;gBAAW,MAAM,gBAAgB;gBACxD,MAAM,gBAAgB,UAAU,MAAM;;YAE1C,OAAO,SAAS;YAChB,WAAW,WAAW;;QAE1B,SAAS,SAAS,MAAM,KAAK;YACzB,IAAM,WAAW,gBAAgB,UAAU,MAAM;YACjD,IAAM,QAAQ,SAAS;YACvB,IAAI,SAAS,MAAM,0BAA0B;gBACzC,WAAW;;YAEf,OAAO,SAAS;;QAEpB,SAAS,eAAe,MAAM,SAAS,MAAM;YACzC,IAAI,QAAQ,IAAI,gBAAgB,MAAM;YACtC,MAAM,iBAAiB;YACvB,mBAAmB;YACnB,SAAS,gBAAgB,UAAU,MAAM,YAAY;;QAEzD,SAAS,YAAY,MAAM,SAAS,MAAM;YACtC,IAAI,QAAQ,SAAS,MAAM;YAC3B,IAAI,CAAC,OAAO;gBACR,QAAQ,IAAI,gBAAgB,MAAM;;YAEtC,MAAM,OAAO;YACb,mBAAmB;;QAEvB,SAAS,mBAAmB,iBAAiB;YACzC,WAAW,QAAQ,gBAAgB,UAAU,QAAQ,OAAO;;QAEhE,SAAS,WAAW,MAAM,SAAS;YAC/B,IAAM,MAAM,gBAAgB,UAAU,MAAM;YAC5C,OAAO,SAAS;YAChB,WAAW,WAAW;YACtB,IAAI,SAAS,mBAAmB,WAAW;gBACvC,WAAW,WAAW;;;;KAIjC","file":"ovpApp/rdvr/rdvr-cache-service.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ovpApp.rdvr.cacheService', [\n        'ovpApp.rdvr.recordingsCache',\n        'ovpApp.services.ovpStorage',\n        'ovpApp.rdvr.rdvrService'\n    ])\n\n    .factory('rdvrCacheService', rdvrCacheService);\n\n    /* @ngInject */\n    function rdvrCacheService($log, RecordingsCache, recordingsListType, ovpStorage, $rootScope) {\n        let cacheMap = [];\n\n        let service = {\n            getCache,\n            createNewCache,\n            updateCache,\n            clearCache\n        };\n\n        activate();\n\n        return service;\n\n        /////////////\n\n        function activate() {\n            init();\n            subscribe();\n        }\n\n        /**\n         * Reads through OVP storage on initialization and will populate\n         * cache only if the cache is dirty or has been refreshed before\n         * the refresh time interval\n         * Sets the cache on the rootScope for messaging purposes.\n         */\n        function init() {\n            var i,\n                storageItem,\n                cache,\n                storageItems = ovpStorage.localStorage;\n\n            for (i in storageItems) {\n                if (storageItems.hasOwnProperty(i)) {\n                    storageItem = i;\n                    if ((storageItem.indexOf('rdvr.' + recordingsListType.COMPLETED) > -1) ||\n                        (storageItem.indexOf('rdvr.' + recordingsListType.SCHEDULED) > -1) ||\n                        (storageItem.indexOf('rdvr.' + recordingsListType.SERIES_PRIORITY) > -1) ||\n                        (storageItem.indexOf('rdvr.' + recordingsListType.DISK_USAGE) > -1)) {\n\n                        cache = getCacheFromStorage(storageItem);\n                        let isOldFormat = !cache.getJson() || !cache.getJson().data;\n                        if (cache.isAged() || isOldFormat) {\n                            deleteCache(cache);\n                        } else {\n                            cacheMap[storageItem] = cache;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        function subscribe() {\n            $rootScope.$on('recordings-cache-expired', function (event, cache) {\n                if (cache) {\n                    deleteCache(cache);\n                }\n            });\n        }\n\n        function getCacheFromStorage(key) {\n            var serializedCache = ovpStorage.getItem(key),\n                cache;\n\n            if (serializedCache) {\n                cache = new RecordingsCache();\n                cache.deserialize(serializedCache);\n            }\n            return cache;\n        }\n\n        function deleteCache(recordingsCache) {\n            var type = recordingsCache.getType(), stb = recordingsCache.getStb(),\n                key = RecordingsCache.createKey(type, stb);\n\n            delete cacheMap[key];\n            ovpStorage.removeItem(key);\n        }\n        function getCache(type, stb) {\n            const cacheKey = RecordingsCache.createKey(type, stb);\n            const cache = cacheMap[cacheKey];\n            if (cache && cache.shouldFetchFromService()) {\n                clearCache(cacheKey);\n            }\n            return cacheMap[cacheKey];\n        }\n        function createNewCache(type, stbInfo, data) {\n            var cache = new RecordingsCache(type, stbInfo);\n            cache.refreshCompleted(data);\n            saveCacheToStorage(cache);\n            cacheMap[RecordingsCache.createKey(type, stbInfo)] = cache;\n        }\n        function updateCache(type, stbInfo, json) {\n            let cache = getCache(type, stbInfo);\n            if (!cache) {\n                cache = new RecordingsCache(type, stbInfo);\n            }\n            cache.update(json);\n            saveCacheToStorage(cache);\n        }\n        function saveCacheToStorage(recordingsCache) {\n            ovpStorage.setItem(recordingsCache.getKey(), angular.toJson(recordingsCache));\n        }\n        function clearCache(type, stbInfo) {\n            const key = RecordingsCache.createKey(type, stbInfo);\n            delete cacheMap[key];\n            ovpStorage.removeItem(key);\n            if (type === recordingsListType.SCHEDULED) {\n                $rootScope.$broadcast('DVR:clearScheduledRecordingsCache');\n            }\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}